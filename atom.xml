<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OneKyle</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-30T05:56:17.520Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>OneKyle</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>诗的八堂课</title>
    <link href="http://yoursite.com/2019/12/20/%E8%AF%97%E7%9A%84%E5%85%AB%E5%A0%82%E8%AF%BE/"/>
    <id>http://yoursite.com/2019/12/20/%E8%AF%97%E7%9A%84%E5%85%AB%E5%A0%82%E8%AF%BE/</id>
    <published>2019-12-20T14:14:20.000Z</published>
    <updated>2020-01-30T05:56:17.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这本书是江弱水先生的著作, 我买来已有几年, 一直未曾翻阅.<br>前一段时间一直在跟（前）女友吵架,每次不欢而散的背后就是自己伏案独酌的清冷.<br>在某个清醒的早晨, 我终于吃不消对蹉跎的悔恨, 从书架上抄起这本书. 耐心读下来, 愈觉如获至宝. 遂作笔记以纪之.</p><h2 id="博弈第一"><a href="#博弈第一" class="headerlink" title="博弈第一"></a>博弈第一</h2><p>写诗本身, 就像一场赌博, 一局弈棋–赌博多凭运气, 下棋的要靠人力, 而写诗, 也各自依仗着灵感或者技艺.<br><img src="https://i.imgur.com/f61pZyI.jpg" alt><br>那到底是灵感重要, 还是技艺重要呢?<br>刘勰在《文心雕龙•总术》中借博弈之别讲的非常精到：</p><blockquote><p>是以执术驭篇,似善弈棋之穷数；弃术任心, 如博塞之邀遇. 故博塞之文, 借巧傥来, 虽前驱有功,而后援难继.少既无以相接, 多亦不知所删, 乃多少之并惑, 何妍媸之能制乎! 若夫善奕之文, 则术有恒数, 按部整伍, 以待情会, 因时顺机, 动不失正…</p></blockquote><a id="more"></a><p>而实际上, 中国古典诗人的常态, 是艺术上的高度自觉, 讲究律法, 注重推敲. 所以最推崇”新诗改罢自长吟” “晚节渐于诗律细”的杜甫, 李白的传人千载寥寥. </p><p>“一部作品是长久用心的成果”, 即便”赌圣”李白, 都有横经籍书, 制作不倦, “铁杵磨成针”的坚持与踏实, 仅仅依靠灵感, 喝再多的酒, 也不能吐出好诗来.</p><p><strong>当然, 对诗人而言最好的结果便是博弈并济.</strong><br>灵感是一个美丽的误会, 应将灵感当做是渐悟累积的顿悟. 创作的乐趣应是”上帝无偿地赠给我们第一句, 而我们必须自己来写第二句”.</p><p>所有写作都是在众多的偶然中寻找那个唯一的必然,既,不可无匠心,不可有匠气.</p><p>加西亚•马尔克斯说：”我认为,灵感既不是一种才能,也不是一种天赋,而是作家坚韧不拔的精神和精湛的技巧为他们所努力要表达的主题做出的一种和解.”</p><h2 id="滋味第二"><a href="#滋味第二" class="headerlink" title="滋味第二"></a>滋味第二</h2><p>我们中国人喜欢讲”味道”, “道”可以”味”,”味”能成”道”,我们哪怕进行玄学的思考, 也要征用舌头. 久而久之, 中国人的感性经验发展出一套极为独特的对味道的细腻分析和精微把握. 最终, 我们用视觉和听觉来评鉴赏析的一切艺术, 都可以用舌头代劳.<br><img src="https://i.imgur.com/DLZGwBf.jpg" alt><br>而味道, 是一种联觉. 正所谓”和羹之美, 在于合异”, 杜甫一写到吃喝, 总是视、听、嗅、触、温多管齐下.</p><p>古人品诗, 最排斥甜味, 苦味, 涩味, 清淡之味才是真味, 最高追求便是无招胜有招, 无味胜有味, 饶有余味. </p><p>好的诗词也不能为章法所束缚, “大抵句缚于律而无奇, 语周于意而无余”. “当于平淡中求真味”, “要见语少意多, 意外见意, 境外见境”.</p><p>味觉还通向另一扇神秘的门, 即性爱. “视男女若饮食”, 利用字词的引申与暗示, 以色写食. 大抵是因为人类舌头纪律性的吸吮与咀嚼动作所给予的快感将记忆贯穿一生, 从此便在无意识区域潜伏下食欲与性欲义体化的深层动因.</p><p>然而以味论诗的传统在这个影像时代已经逐渐式微了.</p><h2 id="声文第三"><a href="#声文第三" class="headerlink" title="声文第三"></a>声文第三</h2><p>诗词的音韵与其本身所包含的情感与意蕴紧密相关.<br>如用更贴近古话的粤语来读王维的&lt;&lt;观猎&gt;&gt;:</p><blockquote><p>风劲角弓鸣, 将军猎渭城…<br>Fung1 ging6 gok3 gung1 ming4, zoeng1 gwan1 lip6wai6 seng4…  </p></blockquote><p>一连串重浊的声音沉雄有力.</p><p>再如司各特的叙事诗, 写两个使臣屹立在石阶上:</p><blockquote><p>stood on the steps of stone.  </p></blockquote><p>轻摩擦音s起, 然后接以重实的爆破音t, 这一行诗便显得厚重坚实笃定, 使臣的威仪可见.</p><p>李商隐的&lt;&lt;无题&gt;&gt;中:</p><blockquote><p>刘郎已恨蓬山远, 更隔蓬山一万重.</p></blockquote><p>geng ge, 发声送气时一度梗塞, 高度吻合诗人的阻碍感、挫败感, 又是”双声”, 效果加倍, 正所谓”荡漾处多用叠韵, 促节出多用双声”.</p><p>文字是一种有形有声有意的东西, 三者之中最主要的是意义, 因此不妨说形与声斗不过是传达意义的媒介.</p><p>周邦彦的&lt;&lt;玉楼春&gt;&gt;词中, 末句”情似雨余黏地絮”之声情可谓妙合无间. 一是七字之间, 双声叠韵. 如丝引蔓, 如胶似漆. 同时, qing si yu yu nian di xu, 没有一个字要你开口, 全是唇齿舌之间最微细的厮磨与粘扯, 却以入骨地表现那胶着、纠结、无法排解的痴情.</p><p>只要是两句好诗, 声音也好, 便叫人忘不了.</p><p>再如词牌名, 定型的格律和体式, 其功用是将那些基本的情意姿态化约为大致的类型. 节奏以及扩展而成的旋律简直就是一首诗的生命.</p><h2 id="肌理第四"><a href="#肌理第四" class="headerlink" title="肌理第四"></a>肌理第四</h2><p>诗是活的有机体, 肌理是其紧密相连的一部分.<br>一个真正的诗人不但要明白字的意义，更要明白字的声音、颜色、温度、嗅味、温度，能用肉体去感觉和领悟.字的意义是肤浅的——就像「肤浅」的字面意思皮肤上层薄薄的皮，更让字的功用最大化地显示出来，就要动用诗人对字的处理运用, 正所谓”笔下要涩, 摸着如有筋”.<br>而肌理不是一种技巧, 不是文字上的修炼, 而是字眼与诗境的谐和,是诗的内涵肉体化身.</p><h2 id="玄思第五"><a href="#玄思第五" class="headerlink" title="玄思第五"></a>玄思第五</h2><p>诗起源于抒情叙事, 直到魏晋之乱世, 诗人遂不免由实入虚, 寄心玄远.<br>如果一首诗只能以可感觉者表示可感觉者, 这只能算是”止于技”的诗, 若能以可感觉者表示不可感觉只可思议者, 便是”进于道”的诗. 这样说来, 晋宋之际, 诗能抒情, 也可冥想, 算是”进于道”了.<br>乱世文章静, 诗人们大多只是泛论人生, 所谓”兴怀”是也. 这是诗人们站在高处”游目骋怀”的形而上学的时刻.<br>而玄言诗要用形象思维来避免导致”理过其词,淡乎寡味”.如庄子所言”朝菌不知晦朔, 蟪蛄不知春秋”, 要见”事物当对”.<br>换言之, 表现情感的唯一艺术方式, 就是去找一个”客观对应物”. 譬如”行到水穷处, 坐看云起时”<br><img src="https://i.imgur.com/IsvmO7v.jpg" alt></p><p>但也要明白, 能够在诗中援引玄学资源,是聪明; 懂得诗不是用来表达玄学思想的, 是智慧.<br>诗中的哲学是且只能是一种”软哲学”–至多是一种启示性的、感悟性的、介乎神学与哲学之间的那种东西. 体系性的哲学是轮不到诗人措手的.</p><p>同时,为了于诗词中追求玄思的表述, 一定要”删繁就简, 把那个’多’迫近于本质, 接近于’一’, 那个唯一的’一’”, 真理一定是瘦的, 所谓不着一字尽得风流是也.</p><h2 id="情色第六"><a href="#情色第六" class="headerlink" title="情色第六"></a>情色第六</h2><p>色情与情色有着微妙、却重大的区别: 色情是肉欲,以挑逗官能为能事; 情色是肉感, 以摇荡性灵为指归, 是灵与肉的交集.<br>而一首诗如果没有玄思, 便很难从有限上升到无限, 空灵不起来. 但如果没有情色, 也很难沉醉于纯粹的现实中, 因为最切近现实的就是肉身.<br>“一首美丽的诗就是对女性美丽的身体的再现.” 中国古代数百年来的”情赋”大体都遵循着一个惯例, 欲擒故纵地铺陈其女色之丽, 然后敛容收心, 一归于正.<br>而女色之丽一如历史传说, 是文本层叠形成的. 这是古代众多宫体诗人乐此不疲的玩这些消极的欲望游戏的原因. 说穿了, 文字更能满足他们的欲望与追求, 现实的性爱远不如文字过瘾.<br>“只有文字才是我们爱欲的归宿, 是情色的终极完成式.”<br>莎士比亚也在其诗中云:</p><blockquote><p>当韶华凋谢, 诗提取你的纯精.(When that shall vade, my verse distills your truth.)</p></blockquote><p>一首出色的艳诗, 要刷新我们对生命的感觉, 因此得有奇警的比喻, 丰富的象征, 还得有字、句繁密精准力道十足的处理. 而情色书写不是身体写作,更不是下半身写作.</p><h2 id="乡愁第七"><a href="#乡愁第七" class="headerlink" title="乡愁第七"></a>乡愁第七</h2><p>很多诗人是乡愁驱动型的. 因为乡愁是对逝去美好事物的追忆, 也是与目前难于应付的个人状况达成的妥协. 乡愁朦胧、暧昧、惆怅, 又苦又甜, 是一种甜蜜的忧伤, 是一种高贵的痛苦.<br>“非万里不足以称天涯, 非天涯不足以成游子.”, 它温和、细腻、私密, 是一种审美的病.</p><blockquote><p>诗人的天职是返乡，唯通过返乡，故乡才作为达乎本源的切近国度二得到准备。守护那达乎极乐的有所隐匿的切近之神秘，并且在守护之际吧这个神秘展开出来，这乃是返乡的忧心。</p></blockquote><p>而如今高速发展的社会使的城市和乡村面目全非, 盖了拆, 拆了盖.<br>几十年前的乡愁是隔着路 隔着山 隔着海峡,<br>如今却是隔着时空, 朦胧在记忆里,<br>“回家也并不意味着抵达”, “不但对于故乡是荡子, 对岁月亦是荡子”.</p><p>在这物欲横鞭的潮流中, 诗人是无用的, 却还负有引领我们还乡的使命.</p><h2 id="死亡第八"><a href="#死亡第八" class="headerlink" title="死亡第八"></a>死亡第八</h2><blockquote><p>未知死, 焉知生</p></blockquote><p>只有死亡才能赋予生命以意义, 冉冉征途正因为有一个终点, 才感知到人生的完整.<br>故生与死相依存, 相互转化. “死生存亡之议题”也.</p><p><img src="https://i.imgur.com/cA0lvVL.jpg" alt></p><p>而死亡也是诗意义的终极. 无论玄思、情色、乡愁, 其歇脚处无非死亡.<br>苏格拉底说:</p><blockquote><p>形而上学的玄思就是在练习死亡.</p></blockquote><p>布罗茨基也说:</p><blockquote><p>真正追求哲学, 无非是学习, 学习处于死的状态.</p></blockquote><p>只有认识死亡的面孔,才能感受生命的深度.</p><p>而中国人自古对死亡有通透的看法，死为哀，哀而美.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这本书是江弱水先生的著作, 我买来已有几年, 一直未曾翻阅.&lt;br&gt;前一段时间一直在跟（前）女友吵架,每次不欢而散的背后就是自己伏案独酌的清冷.&lt;br&gt;在某个清醒的早晨, 我终于吃不消对蹉跎的悔恨, 从书架上抄起这本书. 耐心读下来, 愈觉如获至宝. 遂作笔记以纪之.&lt;/p&gt;
&lt;h2 id=&quot;博弈第一&quot;&gt;&lt;a href=&quot;#博弈第一&quot; class=&quot;headerlink&quot; title=&quot;博弈第一&quot;&gt;&lt;/a&gt;博弈第一&lt;/h2&gt;&lt;p&gt;写诗本身, 就像一场赌博, 一局弈棋–赌博多凭运气, 下棋的要靠人力, 而写诗, 也各自依仗着灵感或者技艺.&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/f61pZyI.jpg&quot; alt&gt;&lt;br&gt;那到底是灵感重要, 还是技艺重要呢?&lt;br&gt;刘勰在《文心雕龙•总术》中借博弈之别讲的非常精到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是以执术驭篇,似善弈棋之穷数；弃术任心, 如博塞之邀遇. 故博塞之文, 借巧傥来, 虽前驱有功,而后援难继.少既无以相接, 多亦不知所删, 乃多少之并惑, 何妍媸之能制乎! 若夫善奕之文, 则术有恒数, 按部整伍, 以待情会, 因时顺机, 动不失正…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python随笔</title>
    <link href="http://yoursite.com/2019/10/18/python%E9%9A%8F%E7%AC%94/"/>
    <id>http://yoursite.com/2019/10/18/python%E9%9A%8F%E7%AC%94/</id>
    <published>2019-10-18T02:11:47.000Z</published>
    <updated>2019-10-23T01:07:43.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><p>浅拷贝只会复制最顶层的列表.<br>深拷贝会递归拷贝.<br>copy.copy对于可变类型，会进行浅拷贝<br>copy.copy对于不可变类型，不会拷贝，仅仅是指向</p><h3 id="私有化"><a href="#私有化" class="headerlink" title="私有化"></a>私有化</h3><ul><li>xx: 公有变量</li><li>_x: 单前置下划线,私有化属性或方法，from somemodule import *禁止导入,类对象和子类可以访问</li><li>__xx：双前置下划线,避免与子类中的属性命名冲突，无法在外部直接访问(名字重整所以访问不到)</li><li><strong>xx</strong>:双前后下划线,用户名字空间的魔法对象或属性。例如:<strong>init</strong> , __ 不要自己发明这样的名字</li><li><p>xx_:单后置下划线,用于避免与Python关键词的冲突</p></li><li><p>父类中属性名为__名字的，子类不继承，子类不能访问</p></li><li>如果在子类中向__名字赋值，那么会在子类中定义的一个与父类相同名字的属性</li></ul><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><ul><li>super().<strong>init</strong>相对于类名.<strong>init</strong>，在单继承上用法基本无差</li><li>但在多继承上有区别，super方法能保证每个父类的方法只会执行一次，而使用类名的方法会导致方法被执行多次.</li><li>多继承时，使用super方法，对父类的传参数，必须把参数全部传递，否则会报错</li><li>单继承时，使用super方法，则不能全部传递，只能传父类方法所需的参数，否则会报错</li></ul><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.path) <span class="comment"># 输出当前import 搜索路径</span></span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[&apos;&apos;, </span><br><span class="line">&apos;/Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip&apos;, </span><br><span class="line">&apos;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7&apos;, </span><br><span class="line">&apos;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload&apos;, </span><br><span class="line">&apos;/Users/*/Library/Python/3.7/lib/python/site-packages&apos;, </span><br><span class="line">&apos;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages&apos;]</span><br></pre></td></tr></table></figure></p><p>‘’ 表示当前路径<br>列表中的路径的先后顺序代表了python解释器在搜索模块时的先后顺序</p><h4 id="程序执行时添加新的模块路径"><a href="#程序执行时添加新的模块路径" class="headerlink" title="程序执行时添加新的模块路径"></a>程序执行时添加新的模块路径</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sys.path.append(<span class="string">'/**/xxx'</span>)</span><br><span class="line">sys.path.insert(<span class="number">0</span>, <span class="string">'/**/**/xxx'</span>)  <span class="comment"># 可以确保先搜索这个路径</span></span><br></pre></td></tr></table></figure><h4 id="重新导入模块"><a href="#重新导入模块" class="headerlink" title="重新导入模块"></a>重新导入模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> your_moudle</span><br><span class="line"><span class="keyword">from</span> imp <span class="keyword">import</span> reload</span><br><span class="line">reload(your_moudle)</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span>:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'@price.getter'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @price.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        print(<span class="string">'@price.setter'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @price.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'@price.deleter'</span>)</span><br></pre></td></tr></table></figure><p>类属性方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 原价</span></span><br><span class="line">        self.original_price = <span class="number">100</span></span><br><span class="line">        <span class="comment"># 折扣</span></span><br><span class="line">        self.discount = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_price</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 实际价格 = 原价 * 折扣</span></span><br><span class="line">        new_price = self.original_price * self.discount</span><br><span class="line">        <span class="keyword">return</span> new_price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_price</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.original_price = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_price</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.original_price</span><br><span class="line"></span><br><span class="line">    PRICE = property(get_price, set_price, del_price, <span class="string">'价格属性描述...'</span>)</span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line">obj.PRICE         <span class="comment"># 获取商品价格</span></span><br><span class="line">obj.PRICE = <span class="number">200</span>   <span class="comment"># 修改商品原价</span></span><br><span class="line"><span class="keyword">del</span> obj.PRICE     <span class="comment"># 删除商品原价</span></span><br></pre></td></tr></table></figure></p><h3 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h3><ul><li><code>__doc__</code>表示类的描述</li><li><code>__module__</code> 表示当前操作的对象所在的模块 </li><li><code>__class__</code> 表示当前操作的对象所属的类</li><li><code>__init__</code> 初始化方法，通过类创建对象时，自动触发执行</li><li><code>__del__</code> 当对象在内存中被释放时，自动触发执行.</li><li><code>__call__</code> 对象后面加括号，触发执行.</li><li><code>__dict__</code> 类或对象中的所有属性</li><li><code>__str__</code> 如果一个类中定义了<strong>str</strong>方法，那么在打印 对象 时，默认输出该方法的返回值</li><li><code>__getitem__</code>、<code>__setitem__</code>、<code>__delitem__</code> 用于索引操作，如字典。以上分别表示获取、设置、删除数据</li><li><code>__getslice__</code>、<code>__setslice__</code>、<code>__delslice__</code> 该三个方法用于分片操作</li></ul><h3 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h3><p>对于系统资源如文件、数据库连接、socket 而言，应用程序打开这些资源并执行完业务逻辑之后，必须做的一件事就是要关闭（断开）该资源</p><p>任何实现了 <code>__enter__()</code> 和 <code>__exit__()</code> 方法的对象, 都可称之为上下文管理器, 上下文管理器对象可以使用 with 关键字. 显然，文件（file）对象也实现了上下文管理器</p><p>Python 还提供了一个 <code>contextmanager</code> 的装饰器，更进一步简化了上下文管理器的实现方式.通过 <code>yield</code> 将函数分割成两部分，<code>yield</code> 之前的语句在 <code>__enter__</code> 方法中执行，<code>yield</code> 之后的语句在 <code>__exit__</code> 方法中执行.紧跟在 <code>yield</code> 后面的值是函数的返回值.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_open</span><span class="params">(path, mode)</span>:</span></span><br><span class="line">    f = open(path, mode)</span><br><span class="line">    <span class="keyword">yield</span> f</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure></p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">(start=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> start</span><br><span class="line">        start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line">    <span class="keyword">return</span> incr</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_f</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line"><span class="meta">@test_f</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"foo"</span>)</span><br></pre></td></tr></table></figure><p>@函数名 是一种Python的语法糖, 当发<code>foo()</code>被装饰器修饰时, <code>@test_f def foo()</code> , 外部调用<code>foo()</code>时, 就相当于调用了 <code>test_f(foo)</code>.</p><p>装饰器的一些使用场景</p><ul><li>引入日志</li><li>函数执行时间统计</li><li>执行函数前预备处理</li><li>执行函数后清理功能</li><li>权限校验等场景</li><li>缓存</li><li>…</li></ul><h4 id="当被装饰的函数有参数-有返回值时"><a href="#当被装饰的函数有参数-有返回值时" class="headerlink" title="当被装饰的函数有参数, 有返回值时:"></a>当被装饰的函数有参数, 有返回值时:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testfun</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped_func</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapped_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@testfun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b+c</span><br></pre></td></tr></table></figure><h4 id="装饰器带参数-设置外部变量时"><a href="#装饰器带参数-设置外部变量时" class="headerlink" title="装饰器带参数, 设置外部变量时:"></a>装饰器带参数, 设置外部变量时:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testfun_arg</span><span class="params">(pre=<span class="string">"hello"</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testfun</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapped_func</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">return</span> func()</span><br><span class="line">        <span class="keyword">return</span> wrapped_func</span><br><span class="line">    <span class="keyword">return</span> testfun</span><br><span class="line"></span><br><span class="line"><span class="meta">@testfun_arg("woaa")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I am foo"</span>)</span><br></pre></td></tr></table></figure><p>可以理解为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo() == testfun_arg(<span class="string">"woaa"</span>)(foo)()</span><br></pre></td></tr></table></figure></p><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><p>装饰器函数其实是这样一个接口约束，它必须接受一个callable对象作为参数，然后返回一个callable对象。在Python中一般callable对象都是函数，但也有例外。只要某个对象重写了 <code>__call__()</code> 方法，那么这个对象就是callable的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        print(<span class="string">"---初始化---"</span>)</span><br><span class="line">        print(<span class="string">"func name is %s"</span>%func.__name__)</span><br><span class="line">        self.__func = func</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"---装饰器中的功能---"</span>)</span><br><span class="line">        self.__func()</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"do test--"</span>)</span><br></pre></td></tr></table></figure><p>调用<code>test()</code>就相当于<code>Test(test).__call__()</code></p><h2 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h2><p>类也是一种对象, 只不过类对象拥有创建对象的能力.<br><code>type</code>可以动态的创建类:<br><code>type(类名, 由父类名称组成的元组（针对继承的情况，可以为空），包含类属性、实例函数、静态函数、类方法的字典（名称和值）)</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_static</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_class</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo_bar</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">Foochild = type(<span class="string">'Foochild'</span>, (Foo,), &#123;<span class="string">"echo_bar"</span>:echo_bar, <span class="string">"test_static"</span>: test_static, <span class="string">"test_class"</span>: test_class&#125;)</span><br></pre></td></tr></table></figure></p><p>元类就是这样用来创建类的<code>东西</code>.<br><strong>type就是Python在背后用来创建所有类的元类</strong></p><h3 id="metaclass属性"><a href="#metaclass属性" class="headerlink" title="metaclass属性"></a><strong>metaclass</strong>属性</h3><p>你可以在定义一个类的时候为其添加<code>__metaclass__</code>属性, 这样Python就会用元类来创建类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    __metaclass__ = something…</span><br><span class="line">    ...省略...</span><br></pre></td></tr></table></figure></p><p>Python会做如下操作:<br>Foo中有<code>__metaclass__</code>这个属性吗？如果是，Python会通过<code>__metaclass__</code>创建一个名字为Foo的类(对象)<br>如果Python没有找到<code>__metaclass__</code>，它会继续在Bar（父类）中寻找<code>__metaclass__</code>属性，并尝试做和前面同样的操作。<br>如果Python在任何父类中都找不到<code>__metaclass__</code>，它就会在模块层次中去寻找<code>__metaclass__</code>，并尝试做同样的操作。<br>如果还是找不到<code>__metaclass__</code>,Python就会用内置的type来创建这个类对象.</p><h3 id="自定义元类"><a href="#自定义元类" class="headerlink" title="自定义元类"></a>自定义元类</h3><p><strong>自定义元类的主要目的就是为了当创建类时能够自动地改变类</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="comment"># __new__ 是在__init__之前被调用的特殊方法</span></span><br><span class="line">    <span class="comment"># __new__是用来创建对象并返回之的方法</span></span><br><span class="line">    <span class="comment"># 而__init__只是用来将传入的参数初始化给对象</span></span><br><span class="line">    <span class="comment"># 你很少用到__new__，除非你希望能够控制对象的创建</span></span><br><span class="line">    <span class="comment"># 这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__</span></span><br><span class="line">    <span class="comment"># 如果你希望的话，你也可以在__init__中做些事情</span></span><br><span class="line">    <span class="comment"># 还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, class_name, class_parents, class_attr)</span>:</span></span><br><span class="line">        <span class="comment"># 遍历属性字典，把不是__开头的属性名字变为大写</span></span><br><span class="line">        new_attr = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> class_attr.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">"__"</span>):</span><br><span class="line">                new_attr[name.upper()] = value</span><br><span class="line">        <span class="keyword">return</span> type(class_name, class_parents, new_attr)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object, metaclass=UpperAttrMetaClass)</span>:</span></span><br><span class="line">    bar = <span class="string">'bip'</span></span><br></pre></td></tr></table></figure></p><p>就元类本身而言，它们其实是很简单:</p><ol><li>拦截类的创建</li><li>修改类</li><li>返回修改之后的类</li></ol><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>python中的多线程可以使用接口较为友好的<code>threading</code>来实现.<br>可以通过指定函数指针target来使用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"running"</span>)</span><br><span class="line">    </span><br><span class="line">t = threading.Thread(target=run)</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure></p><p>也可以基于封装性的考虑, 使用子类继承<code>threading.Thread</code>, 并且重写<code>run</code>方法的方式来使用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        msg = <span class="string">"running in "</span>+self.name <span class="comment">#name属性中保存的是当前线程的名字</span></span><br><span class="line">        print(msg)</span><br><span class="line">        </span><br><span class="line">my_thread = MyThread()</span><br><span class="line">my_thread.start()</span><br></pre></td></tr></table></figure></p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>多线程程序的执行顺序是不确定的,我们无法控制线程调度程序，但可以通过别的方式来影响线程调度的方式.<br>如果多个线程同时对同一个全局变量操作，会出现资源竞争问题，从而数据结果会不正确.<br>为了避免这种情况, 同其他语言一样, 使用锁来进行同步控制.<br><code>threading</code>模块中定义了<code>Lock</code>类，可以方便的处理锁定：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建锁</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 锁定</span></span><br><span class="line">mutex.acquire()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放</span></span><br><span class="line">mutex.release()</span><br></pre></td></tr></table></figure></p><p>当一个线程调用锁的<code>acquire()</code>方法获得锁时，锁就进入<code>locked</code>状态。<br>每次只有一个线程可以获得锁。如果此时另一个线程试图获得这个锁，该线程就会变为<code>blocked</code>状态.</p><h3 id="CPython解释器中的GIL"><a href="#CPython解释器中的GIL" class="headerlink" title="CPython解释器中的GIL"></a>CPython解释器中的GIL</h3><p><a href="http://blog.onekyle.com/2019/10/10/Python%E7%9A%84GIL%E4%B8%8E%E5%85%B6%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%A7%E8%83%BD/" target="_blank" rel="noopener">Python的GIL与其多线程性能</a></p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>由于iOS App都是单进程的, 进程这个概念, 在iOS并不常见.<br>当一个程序运行起来后，程序的代码与其用到的资源 称之为进程，它是操作系统分配资源的基本单元.<br>而线程是进程的一个实体,是CPU调度和分派的基本单位.<br><strong>进程在执行过程中拥有独立的内存单元, 代码中局部变量和全局变量都不会在进程间共享.</strong></p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p><code>multiprocessing</code>模块是跨平台版本的多进程模块，提供了一个<code>Process</code>类来代表一个进程对象，这个对象可以理解为是一个独立的进程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line">p = Process(target=run)</span><br><span class="line">p.start()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span><span class="params">()</span>:</span></span><br><span class="line">    name: str</span><br><span class="line">    daemon: bool</span><br><span class="line">    pid: Optional[int]</span><br><span class="line">    exitcode: Optional[int]</span><br><span class="line">    authkey: bytes</span><br><span class="line">    sentinel: int</span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> set type of group to None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">                 group: Any = ...,</span></span></span><br><span class="line"><span class="function"><span class="params">                 target: Optional[Callable] = ...,</span></span></span><br><span class="line"><span class="function"><span class="params">                 name: Optional[str] = ...,</span></span></span><br><span class="line"><span class="function"><span class="params">                 args: Iterable[Any] = ...,</span></span></span><br><span class="line"><span class="function"><span class="params">                 kwargs: Mapping[Any, Any] = ...,</span></span></span><br><span class="line"><span class="function"><span class="params">                 *,</span></span></span><br><span class="line"><span class="function"><span class="params">                 daemon: Optional[bool] = ...)</span> -&gt; <span class="keyword">None</span>:</span> ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span> ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span> ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">terminate</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span> ...</span><br><span class="line">    <span class="keyword">if</span> sys.version_info &gt;= (<span class="number">3</span>, <span class="number">7</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">kill</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span> ...</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span> ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_alive</span><span class="params">(self)</span> -&gt; bool:</span> ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">join</span><span class="params">(self, timeout: Optional[float] = ...)</span> -&gt; <span class="keyword">None</span>:</span> ...</span><br></pre></td></tr></table></figure><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>前面讲到进程间是不共享资源, 但是如果需要跨进程通信时, 操作系统仍然提供了许多机制来实现. 例如, 我们可以使用<code>multiprocessing</code>模块的<code>Queue</code>实现多进程之间的数据传递，<code>Queue</code>本身是一个消息列队程序.</p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>协程是另外一种实现多任务的方式，只不过比线程更小占用更小执行单元, 需要更少的资源.<br>通俗的理解就是在一个线程中的某个函数，可以在任何地方保存当前函数的一些临时变量等信息，然后切换到另外一个函数中执行, 并且切换的次数以及什么时候再切换到原来的函数都由开发者自己确定.<br>协程的切换只是单纯的操作CPU上下文, 所以一秒钟切换个上百万次都扛得住.<br>多进程、多线程可能是并行的，但是协程是在一个线程中 所以是并发的.</p><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">    num1, num2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> current &lt; n:</span><br><span class="line">        num = num1</span><br><span class="line">        num1, num2 = num2, num1 + num2</span><br><span class="line">        current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line"></span><br><span class="line">f = fib(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    print(i) <span class="comment"># 输出: 0 1 1 2 3 5 8 13 21 34</span></span><br></pre></td></tr></table></figure><h4 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有耗时操作时需要</span></span><br><span class="line">monkey.patch_all()  <span class="comment"># 将程序中用到的耗时操作的代码，换为gevent中自己实现的模块</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coroutine_work</span><span class="params">(coroutine_name)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random()) <span class="comment">#模拟耗时操作.</span></span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(coroutine_work, <span class="string">"work1"</span>),</span><br><span class="line">        gevent.spawn(coroutine_work, <span class="string">"work2"</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本&quot;&gt;&lt;a href=&quot;#基本&quot; class=&quot;headerlink&quot; title=&quot;基本&quot;&gt;&lt;/a&gt;基本&lt;/h2&gt;&lt;h3 id=&quot;深浅拷贝&quot;&gt;&lt;a href=&quot;#深浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;深浅拷贝&quot;&gt;&lt;/a&gt;深浅拷贝&lt;/h3&gt;&lt;p&gt;浅拷贝只会复制最顶层的列表.&lt;br&gt;深拷贝会递归拷贝.&lt;br&gt;copy.copy对于可变类型，会进行浅拷贝&lt;br&gt;copy.copy对于不可变类型，不会拷贝，仅仅是指向&lt;/p&gt;
&lt;h3 id=&quot;私有化&quot;&gt;&lt;a href=&quot;#私有化&quot; class=&quot;headerlink&quot; title=&quot;私有化&quot;&gt;&lt;/a&gt;私有化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;xx: 公有变量&lt;/li&gt;
&lt;li&gt;_x: 单前置下划线,私有化属性或方法，from somemodule import *禁止导入,类对象和子类可以访问&lt;/li&gt;
&lt;li&gt;__xx：双前置下划线,避免与子类中的属性命名冲突，无法在外部直接访问(名字重整所以访问不到)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;xx&lt;/strong&gt;:双前后下划线,用户名字空间的魔法对象或属性。例如:&lt;strong&gt;init&lt;/strong&gt; , __ 不要自己发明这样的名字&lt;/li&gt;
&lt;li&gt;&lt;p&gt;xx_:单后置下划线,用于避免与Python关键词的冲突&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;父类中属性名为__名字的，子类不继承，子类不能访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;如果在子类中向__名字赋值，那么会在子类中定义的一个与父类相同名字的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;多继承&quot;&gt;&lt;a href=&quot;#多继承&quot; class=&quot;headerlink&quot; title=&quot;多继承&quot;&gt;&lt;/a&gt;多继承&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;super().&lt;strong&gt;init&lt;/strong&gt;相对于类名.&lt;strong&gt;init&lt;/strong&gt;，在单继承上用法基本无差&lt;/li&gt;
&lt;li&gt;但在多继承上有区别，super方法能保证每个父类的方法只会执行一次，而使用类名的方法会导致方法被执行多次.&lt;/li&gt;
&lt;li&gt;多继承时，使用super方法，对父类的传参数，必须把参数全部传递，否则会报错&lt;/li&gt;
&lt;li&gt;单继承时，使用super方法，则不能全部传递，只能传父类方法所需的参数，否则会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;import&quot;&gt;&lt;a href=&quot;#import&quot; class=&quot;headerlink&quot; title=&quot;import&quot;&gt;&lt;/a&gt;import&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(sys.path) &lt;span class=&quot;comment&quot;&gt;# 输出当前import 搜索路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&amp;apos;&amp;apos;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;/Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip&amp;apos;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7&amp;apos;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload&amp;apos;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;/Users/*/Library/Python/3.7/lib/python/site-packages&amp;apos;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;‘’ 表示当前路径&lt;br&gt;列表中的路径的先后顺序代表了python解释器在搜索模块时的先后顺序&lt;/p&gt;
&lt;h4 id=&quot;程序执行时添加新的模块路径&quot;&gt;&lt;a href=&quot;#程序执行时添加新的模块路径&quot; class=&quot;headerlink&quot; title=&quot;程序执行时添加新的模块路径&quot;&gt;&lt;/a&gt;程序执行时添加新的模块路径&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sys.path.append(&lt;span class=&quot;string&quot;&gt;&#39;/**/xxx&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys.path.insert(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;/**/**/xxx&#39;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;# 可以确保先搜索这个路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;重新导入模块&quot;&gt;&lt;a href=&quot;#重新导入模块&quot; class=&quot;headerlink&quot; title=&quot;重新导入模块&quot;&gt;&lt;/a&gt;重新导入模块&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; your_moudle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; imp &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reload(your_moudle)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>[转发]Python的GIL与其多线程性能</title>
    <link href="http://yoursite.com/2019/10/10/Python%E7%9A%84GIL%E4%B8%8E%E5%85%B6%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%A7%E8%83%BD/"/>
    <id>http://yoursite.com/2019/10/10/Python%E7%9A%84GIL%E4%B8%8E%E5%85%B6%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%A7%E8%83%BD/</id>
    <published>2019-10-10T02:05:38.000Z</published>
    <updated>2019-10-10T02:34:51.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GIL是什么"><a href="#GIL是什么" class="headerlink" title="GIL是什么"></a>GIL是什么</h2><p>首先需要明确的一点是<code>GIL</code>并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。就好比C++是一套语言（语法）标准，但是可以用不同的编译器来编译成可执行代码。有名的编译器例如GCC，INTEL C++，Visual C++等。Python也一样，同样一段代码可以通过CPython，PyPy，Psyco等不同的Python执行环境来执行。像其中的JPython就没有GIL。然而因为CPython是大部分环境下默认的Python执行环境。所以在很多人的概念里CPython就是Python，也就想当然的把<code>GIL</code>归结为Python语言的缺陷。所以这里要先明确一点：GIL并不是Python的特性，Python完全可以不依赖于GIL</p><p>那么CPython实现中的GIL又是什么呢？GIL全称<code>Global Interpreter Lock</code>为了避免误导，我们还是来看一下官方给出的解释：</p><blockquote><p>In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)</p></blockquote><p>好吧，是不是看上去很糟糕？一个防止多线程并发执行机器码的一个Mutex，乍一看就是个BUG般存在的全局锁嘛！别急，我们下面慢慢的分析。</p><hr><h2 id="为什么会有GIL"><a href="#为什么会有GIL" class="headerlink" title="为什么会有GIL"></a>为什么会有GIL</h2><a id="more"></a><p>由于物理上得限制，各CPU厂商在核心频率上的比赛已经被多核所取代。为了更有效的利用多核处理器的性能，就出现了多线程的编程方式，而随之带来的就是线程间数据一致性和状态同步的困难。<a href="linux/all-about-cpu-cache/">即使在CPU内部的Cache也不例外</a>，为了有效解决多份缓存之间的数据同步时各厂商花费了不少心思，也不可避免的带来了一定的性能损失。</p><p>Python当然也逃不开，为了利用多核，Python开始支持多线程。<em>而解决多线程之间数据完整性和状态同步的最简单方法自然就是加锁。</em> 于是有了GIL这把超级大锁，而当越来越多的代码库开发者接受了这种设定后，他们开始大量依赖这种特性（即默认python内部对象是thread-safe的，无需在实现时考虑额外的内存锁和同步操作）。</p><p>慢慢的这种实现方式被发现是蛋疼且低效的。但当大家试图去拆分和去除GIL的时候，发现大量库代码开发者已经重度依赖GIL而非常难以去除了。有多难？做个类比，像MySQL这样的“小项目”为了把Buffer Pool Mutex这把大锁拆分成各个小锁也花了从5.5到5.6再到5.7多个大版为期近5年的时间，并且仍在继续。MySQL这个背后有公司支持且有固定开发团队的产品走的如此艰难，那又更何况Python这样核心开发和代码贡献者高度社区化的团队呢？</p><p>所以简单的说GIL的存在更多的是历史原因。如果推到重来，多线程的问题依然还是要面对，但是至少会比目前GIL这种方式会更优雅。</p><hr><h2 id="GIL的影响"><a href="#GIL的影响" class="headerlink" title="GIL的影响"></a>GIL的影响</h2><p>从上文的介绍和官方的定义来看，GIL无疑就是一把全局排他锁。毫无疑问全局锁的存在会对多线程的效率有不小影响。甚至就几乎等于Python是个单线程的程序。<br>那么读者就会说了，全局锁只要释放的勤快效率也不会差啊。只要在进行耗时的IO操作的时候，能释放GIL，这样也还是可以提升运行效率的嘛。或者说再差也不会比单线程的效率差吧。理论上是这样，而实际上呢？Python比你想的更糟。</p><p>下面我们就对比下Python在多线程和单线程下得效率对比。测试方法很简单，一个循环1亿次的计数器函数。一个通过单线程执行两次，一个多线程执行。最后比较执行总时间。测试环境为双核的Mac pro。注：为了减少线程库本身性能损耗对测试结果带来的影响，这里单线程的代码同样使用了线程。只是顺序的执行两次，模拟单线程。</p><h3 id="顺序执行的单线程-single-thread-py"><a href="#顺序执行的单线程-single-thread-py" class="headerlink" title="顺序执行的单线程(single_thread.py)"></a>顺序执行的单线程(single_thread.py)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_counter</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100000000</span>):</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    thread_array = &#123;&#125;</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> tid <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = Thread(target=my_counter)</span><br><span class="line">        t.start()</span><br><span class="line">        t.join()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">"Total time: &#123;&#125;"</span>.format(end_time - start_time))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="同时执行的两个并发线程-multi-thread-py"><a href="#同时执行的两个并发线程-multi-thread-py" class="headerlink" title="同时执行的两个并发线程(multi_thread.py)"></a>同时执行的两个并发线程(multi_thread.py)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_counter</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100000000</span>):</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    thread_array = &#123;&#125;</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> tid <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = Thread(target=my_counter)</span><br><span class="line">        t.start()</span><br><span class="line">        thread_array[tid] = t</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        thread_array[i].join()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">"Total time: &#123;&#125;"</span>.format(end_time - start_time))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>下图就是测试结果</p><p><img src="https://i.imgur.com/ATvOByz.jpg" alt></p><p>可以看到python在多线程的情况下居然比单线程整整慢了45%。按照之前的分析，即使是有GIL全局锁的存在，串行化的多线程也应该和单线程有一样的效率才对。那么怎么会有这么糟糕的结果呢？</p><p>让我们通过GIL的实现原理来分析这其中的原因。</p><hr><h2 id="当前GIL设计的缺陷"><a href="#当前GIL设计的缺陷" class="headerlink" title="当前GIL设计的缺陷"></a>当前GIL设计的缺陷</h2><h3 id="基于pcode数量的调度方式"><a href="#基于pcode数量的调度方式" class="headerlink" title="基于pcode数量的调度方式"></a>基于pcode数量的调度方式</h3><p>按照Python社区的想法，操作系统本身的线程调度已经非常成熟稳定了，没有必要自己搞一套。所以Python的线程就是C语言的一个pthread，并通过操作系统调度算法进行调度（例如linux是CFS）。为了让各个线程能够平均利用CPU时间，python会计算当前已执行的微代码数量，达到一定阈值后就强制释放GIL。而这时也会触发一次操作系统的线程调度（当然是否真正进行上下文切换由操作系统自主决定）。</p><p>伪代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    acquire GIL</span><br><span class="line">    <span class="keyword">for</span> i in <span class="number">1000</span>:</span><br><span class="line">        <span class="keyword">do</span> something</span><br><span class="line">    release GIL</span><br><span class="line">    <span class="comment">/* Give Operating System a chance to do thread scheduling */</span></span><br></pre></td></tr></table></figure></p><p>这种模式在只有一个CPU核心的情况下毫无问题。任何一个线程被唤起时都能成功获得到GIL（因为只有释放了GIL才会引发线程调度）。但当CPU有多个核心的时候，问题就来了。从伪代码可以看到，从<code>release GIL</code>到<code>acquire GIL</code>之间几乎是没有间隙的。所以当其他在其他核心上的线程被唤醒时，大部分情况下主线程已经又再一次获取到GIL了。这个时候被唤醒执行的线程只能白白的浪费CPU时间，看着另一个线程拿着GIL欢快的执行着。然后达到切换时间后进入待调度状态，再被唤醒，再等待，以此往复恶性循环。</p><p>PS：当然这种实现方式是原始而丑陋的，Python的每个版本中也在逐渐改进GIL和线程调度之间的互动关系。例如先尝试持有GIL在做线程上下文切换，在IO等待时释放GIL等尝试。但是无法改变的是GIL的存在使得操作系统线程调度的这个本来就昂贵的操作变得更奢侈了。<br><a href="http://www.dabeaz.com/GIL/" target="_blank" rel="noopener">关于GIL影响的扩展阅读</a></p><p>为了直观的理解GIL对于多线程带来的性能影响，这里直接借用的一张测试结果图（见下图）。图中表示的是两个线程在双核CPU上得执行情况。两个线程均为CPU密集型运算线程。绿色部分表示该线程在运行，且在执行有用的计算，红色部分为线程被调度唤醒，但是无法获取GIL导致无法进行有效运算等待的时间。<br><img src="http://www.dabeaz.com/images/GIL_2cpu.png" alt="GIL Performance"><br>由图可见，GIL的存在导致多线程无法很好的立即多核CPU的并发处理能力。</p><p>那么Python的IO密集型线程能否从多线程中受益呢？我们来看下面这张测试结果。颜色代表的含义和上图一致。白色部分表示IO线程处于等待。可见，当IO线程收到数据包引起终端切换后，仍然由于一个CPU密集型线程的存在，导致无法获取GIL锁，从而进行无尽的循环等待。<br><img src="http://www.dabeaz.com/images/GIL_ioclose.png" alt="GIL IO Performance"></p><p>简单的总结下就是：Python的多线程在多核CPU上，只对于IO密集型计算产生正面效果；而当有至少有一个CPU密集型线程存在，那么多线程效率会由于GIL而大幅下降。</p><hr><h2 id="如何避免受到GIL的影响"><a href="#如何避免受到GIL的影响" class="headerlink" title="如何避免受到GIL的影响"></a>如何避免受到GIL的影响</h2><p>说了那么多，如果不说解决方案就仅仅是个科普帖，然并卵。GIL这么烂，有没有办法绕过呢？我们来看看有哪些现成的方案。</p><h3 id="用multiprocessing替代Thread"><a href="#用multiprocessing替代Thread" class="headerlink" title="用multiprocessing替代Thread"></a>用multiprocessing替代Thread</h3><p>multiprocessing库的出现很大程度上是为了弥补thread库因为GIL而低效的缺陷。它完整的复制了一套thread所提供的接口方便迁移。唯一的不同就是它使用了多进程而不是多线程。每个进程有自己的独立的GIL，因此也不会出现进程之间的GIL争抢。</p><p>当然multiprocessing也不是万能良药。它的引入会增加程序实现时线程间数据通讯和同步的困难。就拿计数器来举例子，如果我们要多个线程累加同一个变量，对于thread来说，申明一个global变量，用thread.Lock的context包裹住三行就搞定了。而multiprocessing由于进程之间无法看到对方的数据，只能通过在主线程申明一个Queue，put再get或者用share memory的方法。这个额外的实现成本使得本来就非常痛苦的多线程程序编码，变得更加痛苦了。具体难点在哪有兴趣的读者可以扩展阅读<a href="http://www.jeffknupp.com/blog/2013/06/30/pythons-hardest-problem-revisited/" target="_blank" rel="noopener">这篇文章</a></p><h3 id="用其他解析器"><a href="#用其他解析器" class="headerlink" title="用其他解析器"></a>用其他解析器</h3><p>之前也提到了既然GIL只是CPython的产物，那么其他解析器是不是更好呢？没错，像JPython和IronPython这样的解析器由于实现语言的特性，他们不需要GIL的帮助。然而由于用了Java/C#用于解析器实现，他们也失去了利用社区众多C语言模块有用特性的机会。所以这些解析器也因此一直都比较小众。毕竟功能和性能大家在初期都会选择前者，<code>Done is better than perfect</code>。</p><h3 id="所以没救了么？"><a href="#所以没救了么？" class="headerlink" title="所以没救了么？"></a>所以没救了么？</h3><p>当然Python社区也在非常努力的不断改进GIL，甚至是尝试去除GIL。并在各个小版本中有了不少的进步。有兴趣的读者可以扩展阅读<a href="http://www.dabeaz.com/python/UnderstandingGIL.pdf" target="_blank" rel="noopener">这个Slide</a><br>另一个改进<a href="https://mail.python.org/pipermail/python-dev/2009-October/093321.html" target="_blank" rel="noopener">Reworking the GIL</a></p><ul><li>将切换颗粒度从基于opcode计数改成基于时间片计数</li><li>避免最近一次释放GIL锁的线程再次被立即调度</li><li>新增线程优先级功能（高优先级线程可以迫使其他线程释放所持有的GIL锁）</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Python GIL其实是功能和性能之间权衡后的产物，它尤其存在的合理性，也有较难改变的客观因素。从本分的分析中，我们可以做以下一些简单的总结：</p><ul><li>因为GIL的存在，只有IO Bound场景下得多线程会得到较好的性能</li><li>如果对并行计算性能较高的程序可以考虑把核心部分也成C模块，或者索性用其他语言实现</li><li>GIL在较长一段时间内将会继续存在，但是会不断对其进行改进</li></ul><h2 id="原作者信息"><a href="#原作者信息" class="headerlink" title="原作者信息"></a>原作者信息</h2><blockquote><p>前言：博主在刚接触Python的时候时常听到GIL这个词，并且发现这个词经常和Python无法高效的实现多线程划上等号。本着不光要知其然，还要知其所以然的研究态度，博主搜集了各方面的资料，花了一周内几个小时的闲暇时间深入理解了下GIL，并归纳成此文，也希望读者能通过次本文更好且客观的理解GIL。</p><p>文章欢迎转载，但转载时请保留本段文字，并置于文章的顶部<br>作者：卢钧轶(cenalulu)<br>本文原文地址：<a href="http://cenalulu.github.io/python/gil-in-python/" target="_blank" rel="noopener">http://cenalulu.github.io/python/gil-in-python/</a></p></blockquote><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://www.jeffknupp.com/blog/2013/06/30/pythons-hardest-problem-revisited/" target="_blank" rel="noopener">Python’s hardest problem</a><br><a href="https://wiki.python.org/moin/GlobalInterpreterLock" target="_blank" rel="noopener">Official documents about GIL</a><br><a href="http://dabeaz.blogspot.com/2010/02/revisiting-thread-priorities-and-new.html" target="_blank" rel="noopener">Revisiting thread priorities and the new GIL</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GIL是什么&quot;&gt;&lt;a href=&quot;#GIL是什么&quot; class=&quot;headerlink&quot; title=&quot;GIL是什么&quot;&gt;&lt;/a&gt;GIL是什么&lt;/h2&gt;&lt;p&gt;首先需要明确的一点是&lt;code&gt;GIL&lt;/code&gt;并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。就好比C++是一套语言（语法）标准，但是可以用不同的编译器来编译成可执行代码。有名的编译器例如GCC，INTEL C++，Visual C++等。Python也一样，同样一段代码可以通过CPython，PyPy，Psyco等不同的Python执行环境来执行。像其中的JPython就没有GIL。然而因为CPython是大部分环境下默认的Python执行环境。所以在很多人的概念里CPython就是Python，也就想当然的把&lt;code&gt;GIL&lt;/code&gt;归结为Python语言的缺陷。所以这里要先明确一点：GIL并不是Python的特性，Python完全可以不依赖于GIL&lt;/p&gt;
&lt;p&gt;那么CPython实现中的GIL又是什么呢？GIL全称&lt;code&gt;Global Interpreter Lock&lt;/code&gt;为了避免误导，我们还是来看一下官方给出的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好吧，是不是看上去很糟糕？一个防止多线程并发执行机器码的一个Mutex，乍一看就是个BUG般存在的全局锁嘛！别急，我们下面慢慢的分析。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;为什么会有GIL&quot;&gt;&lt;a href=&quot;#为什么会有GIL&quot; class=&quot;headerlink&quot; title=&quot;为什么会有GIL&quot;&gt;&lt;/a&gt;为什么会有GIL&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Repost" scheme="http://yoursite.com/tags/Repost/"/>
    
  </entry>
  
  <entry>
    <title>Swift中的派发机制</title>
    <link href="http://yoursite.com/2019/09/15/Swift%E4%B8%AD%E7%9A%84%E6%B4%BE%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/09/15/Swift%E4%B8%AD%E7%9A%84%E6%B4%BE%E5%8F%91%E6%9C%BA%E5%88%B6/</id>
    <published>2019-09-15T07:10:18.000Z</published>
    <updated>2019-09-15T14:09:33.435Z</updated>
    
    <content type="html"><![CDATA[<p>Swift中的函数调用有很多奇怪的行为, 比如:<br><a name="eg1"><br>案例1<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Runnable</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>: <span class="title">Runnable</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"human run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r: <span class="type">Runnable</span> = <span class="type">Human</span>()</span><br><span class="line">r.run()             <span class="comment">// expected prints "human run", but prints "run" &lt;- Unexpected!</span></span><br></pre></td></tr></table></figure></a></p><p></p><p><br></p><p>这些反直觉的案例就事实存在于Swift中, 要想清晰的明白它们发生的原因, 就必须缕清它们背后的调用机制–函数派发.</p><p>函数派发就是程序判断使用哪种途径去调用一个函数的机制. 了解派发机制对于写出高性能的代码来说很有必要, 而且也能够解释很多Swift里奇怪的行为.</p><a id="more"></a><h2 id="派发方式"><a href="#派发方式" class="headerlink" title="派发方式"></a>派发方式</h2><p>编译型语言有三种基础的派发方式, 分别是: <strong>直接派发(Direct Dispatch)</strong>, <strong>函数表派发(Table Dispatch)</strong> 和 <strong>消息机制派发(Message Dispatch)</strong>. 大多数语言都会支持 直接派发和函数表派发, 如<code>Java</code>和<code>C++</code>. 而<code>Objective-C</code>则总是使用消息机制(<code>objc_msgSend</code>)派发. 而<code>Swift</code>中三种都支持.</p><h3 id="直接派发-Direct-Dispatch"><a href="#直接派发-Direct-Dispatch" class="headerlink" title="直接派发 (Direct Dispatch)"></a>直接派发 (Direct Dispatch)</h3><p>直接派发是最快的, 不止是因为需要调用的指令集会更少, 并且编译器还能够有很大的优化空间, 例如函数内联等. 直接派发也称为静态调用.</p><p>然而, 对于编程来说直接调用也是最大的局限, 而且因为缺乏动态性所以没办法支持继承.</p><h3 id="函数表派发-Table-Dispatch"><a href="#函数表派发-Table-Dispatch" class="headerlink" title="函数表派发 (Table Dispatch)"></a>函数表派发 (Table Dispatch)</h3><p>函数表派发是编译型语言实现动态行为最常见的实现方式. 函数表使用了一个数组来存储类声明的每一个函数的指针. 大部分语言(如<code>C++</code>)把这个称为<code>虚函数表</code>, 而在<code>Swift</code>中将其称为<code>Witness Table(目击表)</code>, 每一个类都会维护一个函数表, 里面记录着类所有的函数, 如果父类函数被 <code>override</code> 的话, 表里面只会保存被 <code>override</code> 之后的函数. 一个子类新添加的函数, 都会被插入到这个数组的最后. 运行时会根据这一个表去决定实际要被调用的函数.</p><p>这种基于数组的实现, 缺陷在于函数表无法拓展. 子类会在虚数函数表的最后插入新的函数, 没有位置可以让 <code>extension</code> 安全地插入函数.</p><h3 id="消息机制派发-Message-Dispatch"><a href="#消息机制派发-Message-Dispatch" class="headerlink" title="消息机制派发 (Message Dispatch)"></a>消息机制派发 (Message Dispatch)</h3><p>消息机制是调用函数最动态的方式. 比如可以通过<code>method swizzling</code>或者<code>isa swizzling</code>来动态修改方法的实现和对象的继承关系, 从而实现自定义派发.<br>而当一个消息被派发, 运行时会顺着类的继承关系向上查找应该被调用的函数.</p><h2 id="Swift的派发机制"><a href="#Swift的派发机制" class="headerlink" title="Swift的派发机制"></a>Swift的派发机制</h2><p>那么<code>Swift</code>是如何糅合这三种派发方式的呢? <code>Swift</code>的文档中并没有具体写明成体系的机制. 而通过测试和了解, Swift的派发机制是通过以下四种因素来制约:</p><ol><li>函数声明的位置(Location Matters)</li><li>调用者(引用)的类型(Reference Type Matters)</li><li>特定的派发行为(Specifying Dispatch Behavior)</li><li>显式地优化(Visibility Optimizations)</li></ol><p>具体的细节<a href="https://kemchenj.github.io/2016-12-25-1/" target="_blank" rel="noopener">这篇文章</a>已经讲述的非常好,就不做赘述.</p><p>最终可以通过一张表来总结:<br><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/fd34ea0b.png" alt="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/fd34ea0b.png"></p><p>如果在开发过程中,错误的混合了这几种分派方式,就可能出现意料之外的结果甚至是Bug.</p><p>拿<a href="#eg1">案例1</a>来说明, <code>Runnable</code>的<code>run</code>方法声明在<code>Extension</code>中, 所以只要使用了<code>Runnable</code>这一类型的调用者, 都是采用直接派发, 直接调用了<code>Runnable</code>的<code>run</code>方法.</p><p>同样,如果我们将<a href="#eg1">案例1</a>的<code>run</code>方法的声明位置变化一下:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r: <span class="type">Runnable</span> = <span class="type">Human</span>()</span><br><span class="line">r.run()             <span class="comment">// prints "human run"</span></span><br></pre></td></tr></table></figure></p><p>另外在Swift4.0之前的版本, 还存在这个问题<a href="https://bugs.swift.org/browse/SR-923" target="_blank" rel="noopener">SR-923</a>.<br>我将其引申为一个较为清晰的版本:<br><a name="eg2"><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Hello"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greetings</span><span class="params">(person: Person)</span></span> &#123;</span><br><span class="line">    person.sayHi()</span><br><span class="line">&#125;</span><br><span class="line">greetings(person: <span class="type">Person</span>()) <span class="comment">// prints 'Hello'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MisunderstoodPerson</span>: <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MisunderstoodPerson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"No one gets me."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greetings(person: <span class="type">MisunderstoodPerson</span>()) <span class="comment">// prints 'Hello'</span></span><br></pre></td></tr></table></figure></a></p><p><br>这也是由于<code>NSObject</code>的<code>extension</code>是使用的<code>Message dispatch</code>，而<code>Initial Declaration</code>使用的是<code>Table dispath</code>. <code>extension</code>重写的方法添加在了<code>Message dispatch</code>内,没有修改函数表,函数表内还是父类的方法,故会执行父类方法. 想在<code>extension</code>重写方法，需要标明<code>dynamic</code>来使用<code>Message dispatch</code>.<br><strong>不过<code>Swift</code>已经修复了这个Bug, 现在<code>extension</code>中不允许重写父类的任何函数了.</strong></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>我们继续更改案例1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>: <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span>: <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"man run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后测试<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r: <span class="type">Runnable</span> = <span class="type">Man</span>.<span class="keyword">init</span>()</span><br><span class="line">r.run()         <span class="comment">// prints "run"</span></span><br></pre></td></tr></table></figure></p><p>咦 怎么会这样呢?<br>断点打在<code>r.run()</code>上, 进入反汇编进行查看, 发现这个<code>run</code> 是被直接call了一个地址<code>0x100001980</code>, 而不是读取存在容器中的<code>Protocol Witness Table(协议目击表)</code>中的某个函数地址, 这是被直接派发调用的…</p><p><img src="http://ww1.sinaimg.cn/large/6b523ad1ly1g70gxuvr3fj22c80f2n68.jpg" alt="WeChatceb0bbfcd367a9dfbf48c6a062813fb3.png"></p><p>swift的bug讨论处也有相关的问题提出 <a href="https://bugs.swift.org/browse/SR-103" target="_blank" rel="noopener">SR-103</a></p><p>讨论中大多数人认为 <code>man</code>的<code>run</code>函数并没有绑定到他自己的协议目击表中,  于是我对案例测试代码修改:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="type">Man</span>.<span class="keyword">init</span>()</span><br><span class="line">(r <span class="keyword">as</span> <span class="type">Runnable</span>).run()  <span class="comment">// prints "run"</span></span><br></pre></td></tr></table></figure></p><p>进入反汇编查看, 发现<code>run</code>确实是通过读取协议目击表相关地址来调用的:<br><img src="http://ww1.sinaimg.cn/large/6b523ad1ly1g70hd22uzaj223i0igtk0.jpg" alt="WeChatf56fb2bbcff6879ab1e1c9421de9e1e7.png"><br>在此断点下 我们读取下 <code>r13</code>寄存器的内容, 也就是调用<code>__swift_project_boxed_opaque_existential_1</code>这个函数的返回值:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 读取r13寄存器内容</span><br><span class="line">(lldb) re r r13</span><br><span class="line">     r13 = 0x00007ffeefbff590</span><br><span class="line">// 读取 0x00007ffeefbff590 内存中的值 (5个, 16进制, 8字节)</span><br><span class="line">(lldb) x/5xg 0x00007ffeefbff590</span><br><span class="line">0x7ffeefbff590: 0x000000010217b990 0x0000000000000000</span><br><span class="line">0x7ffeefbff5a0: 0x0000000000000000 0x00000001000022a8</span><br><span class="line">0x7ffeefbff5b0: 0x0000000100002060</span><br></pre></td></tr></table></figure></p><p>可以看出<code>0x00007ffeefbff590</code>也就是存在容器, 其中前8个字节存储的是我们创建的<code>man</code>对象的指针地址.<br><code>0x7ffeefbff5a8</code>存储的是<code>man</code>的<code>metadata</code>的地址.<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(lldb) di -s <span class="number">0x00000001000022a8</span></span><br><span class="line"><span class="keyword">swift_assmbly`type </span>metadata for <span class="keyword">swift_assmbly.Man:</span></span><br><span class="line"><span class="keyword"> </span>   <span class="number">0x1000022a8</span> &lt;+<span class="number">0</span>&gt;:  jo     <span class="number">0x1000022cc</span>               <span class="comment">; type metadata for swift_assmbly.Man + 36</span></span><br><span class="line">    <span class="number">0x1000022aa</span> &lt;+<span class="number">2</span>&gt;:  <span class="keyword">addb </span>  %al, (%rax)</span><br><span class="line">    <span class="number">0x1000022ac</span> &lt;+<span class="number">4</span>&gt;:  <span class="keyword">addl </span>  %eax, (%rax)</span><br><span class="line">    <span class="number">0x1000022ae</span> &lt;+<span class="number">6</span>&gt;:  <span class="keyword">addb </span>  %al, (%rax)</span><br><span class="line">    <span class="number">0x1000022b0</span> &lt;+<span class="number">8</span>&gt;:  sbbb   %ah, (%rdx)</span><br><span class="line">    <span class="number">0x1000022b2</span> &lt;+<span class="number">10</span>&gt;: <span class="keyword">addb </span>  %al, (%rax)</span><br><span class="line">    <span class="number">0x1000022b4</span> &lt;+<span class="number">12</span>&gt;: <span class="keyword">addl </span>  %eax, (%rax)</span><br><span class="line">    <span class="number">0x1000022b6</span> &lt;+<span class="number">14</span>&gt;: <span class="keyword">addb </span>  %al, (%rax)</span><br><span class="line">    <span class="number">0x1000022b8</span> &lt;+<span class="number">16</span>&gt;: <span class="keyword">addb </span>  %ah, (%rdi,%rsi,<span class="number">4</span>)</span><br><span class="line">    <span class="number">0x1000022bb</span> &lt;+<span class="number">19</span>&gt;: outsb  (%rsi), %dx</span><br></pre></td></tr></table></figure></p><p>而最后8个字节, 存储的就是<code>Protocol Witness Table</code>的地址<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) di -s <span class="number">0x0000000100002060</span></span><br><span class="line"><span class="keyword">swift_assmbly`protocol </span>witness table for <span class="keyword">swift_assmbly.Human </span>: <span class="keyword">swift_assmbly.Runnable </span>in <span class="keyword">swift_assmbly:</span></span><br></pre></td></tr></table></figure></p><p>而最终调用的是什么呢? 我们读取下<code>rax</code>寄存器的地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) re r rax</span><br><span class="line">     rax = 0x0000000100002060  swift_assmbly`protocol witness table for swift_assmbly.Human : swift_assmbly.Runnable in swift_assmbly</span><br></pre></td></tr></table></figure></p><p>发现存储的就是协议目击表的地址.<br>而 <code>*0x8(%rax)</code> 就是 <code>rax</code>存储地址+8个字节后所指向的空间的地址, 也就是最后函数调用的地址. 我们顺着打印下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// %rax + 8 = 0x100002060 + 8 = 0x100002068</span><br><span class="line">(lldb) x/1xg 0x100002068</span><br><span class="line">0x100002068: 0x0000000100001a40</span><br><span class="line">(lldb) di -s 0x0000000100001a40</span><br><span class="line">swift_assmbly`protocol witness for Runnable.run() in conformance Human:</span><br><span class="line">    0x100001a40 &lt;+0&gt;:  pushq  %rbp</span><br><span class="line">    0x100001a41 &lt;+1&gt;:  movq   %rsp, %rbp</span><br><span class="line">    0x100001a44 &lt;+4&gt;:  callq  0x100001870               ; (extension in swift_assmbly):swift_assmbly.Runnable.run() -&gt; () at main.swift:16</span><br><span class="line">    0x100001a49 &lt;+9&gt;:  popq   %rbp</span><br><span class="line">    0x100001a4a &lt;+10&gt;: retq   </span><br><span class="line">    0x100001a4b &lt;+11&gt;: nopl   (%rax,%rax)</span><br><span class="line"></span><br><span class="line">swift_assmbly`Man.run():</span><br><span class="line">    0x100001a50 &lt;+0&gt;:  pushq  %rbp</span><br><span class="line">    0x100001a51 &lt;+1&gt;:  movq   %rsp, %rbp</span><br><span class="line">    0x100001a54 &lt;+4&gt;:  pushq  %r13</span><br><span class="line">    0x100001a56 &lt;+6&gt;:  subq   $0x38, %rsp</span><br></pre></td></tr></table></figure></p><p>发现就是定义在<code>Runnable</code> Extension中的<code>run</code>函数的地址, 而在它下面我们也发现了<code>Man</code>自己实现的<code>run</code>函数地址. 所以<code>Man</code>的<code>run</code>并非没有注册进协议目击表, 只是没有被正确的调用.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://tech.meituan.com/2018/11/01/swift-compile-performance-optimization.html" target="_blank" rel="noopener">【基本功】深入剖析Swift性能优化</a><br><a href="https://kemchenj.github.io/2016-12-25-1/" target="_blank" rel="noopener">深入理解 Swift 派发机制</a><br><a href="https://gist.github.com/KingOfBrian/778dc93bffddf25b2c414360727c273b#file-message-swift" target="_blank" rel="noopener">Method Dispatch in Swift</a><br><a href="https://github.com/apple/swift/blob/78f3017436dbbfe380b69b09a2d02937524ab076/lib/IRGen/ProtocolInfo.h" target="_blank" rel="noopener">swift/lib/IRGen/ProtocolInfo.h</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift中的函数调用有很多奇怪的行为, 比如:&lt;br&gt;&lt;a name=&quot;eg1&quot;&gt;&lt;br&gt;案例1&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;run&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Human&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;human run&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; r: &lt;span class=&quot;type&quot;&gt;Runnable&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Human&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r.run()             &lt;span class=&quot;comment&quot;&gt;// expected prints &quot;human run&quot;, but prints &quot;run&quot; &amp;lt;- Unexpected!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;这些反直觉的案例就事实存在于Swift中, 要想清晰的明白它们发生的原因, 就必须缕清它们背后的调用机制–函数派发.&lt;/p&gt;
&lt;p&gt;函数派发就是程序判断使用哪种途径去调用一个函数的机制. 了解派发机制对于写出高性能的代码来说很有必要, 而且也能够解释很多Swift里奇怪的行为.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu使用Shadowsocks及Privoxy配置代理访问外网</title>
    <link href="http://yoursite.com/2019/08/29/ubuntu%E4%BD%BF%E7%94%A8Shadowsocks%E5%8F%8APrivoxy%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91/"/>
    <id>http://yoursite.com/2019/08/29/ubuntu%E4%BD%BF%E7%94%A8Shadowsocks%E5%8F%8APrivoxy%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91/</id>
    <published>2019-08-29T08:27:21.000Z</published>
    <updated>2019-09-15T14:14:45.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Shadowsocks安装-已安装略过"><a href="#Shadowsocks安装-已安装略过" class="headerlink" title="Shadowsocks安装(已安装略过)"></a>Shadowsocks安装(已安装略过)</h2><h3 id="下载get-pip文件"><a href="#下载get-pip文件" class="headerlink" title="下载get-pip文件"></a>下载get-pip文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br></pre></td></tr></table></figure><h3 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python get-pip.py</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><h3 id="shadowsocks配置文件"><a href="#shadowsocks配置文件" class="headerlink" title="shadowsocks配置文件"></a>shadowsocks配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line"><span class="attr">"server"</span>:<span class="string">"your.server.ip"</span>,</span><br><span class="line"><span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>, </span><br><span class="line"><span class="attr">"local_port"</span>:<span class="number">1081</span>, </span><br><span class="line"><span class="attr">"server_port"</span>:yourserver_port, </span><br><span class="line"><span class="attr">"password"</span>:<span class="string">"yourpasswd"</span>, </span><br><span class="line"><span class="attr">"timeout"</span>:<span class="number">300</span>, </span><br><span class="line"><span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a> <h3 id="启动shadowsock客户端"><a href="#启动shadowsock客户端" class="headerlink" title="启动shadowsock客户端"></a>启动shadowsock客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslocal -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure><h3 id="停止shadowsock客户端"><a href="#停止shadowsock客户端" class="headerlink" title="停止shadowsock客户端"></a>停止shadowsock客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslocal -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure><p>由于shadowsocks是socket5代理，在shell里发起的请求只能使用http/https代理，所以需要安装privoxy代理，来把http请求转发给shadowsocks.</p><h2 id="Privoxy安装"><a href="#Privoxy安装" class="headerlink" title="Privoxy安装"></a>Privoxy安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install privoxy</span><br></pre></td></tr></table></figure><h3 id="privoxy配置"><a href="#privoxy配置" class="headerlink" title="privoxy配置"></a>privoxy配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/privoxy/config</span><br></pre></td></tr></table></figure><p>注释掉: <code>listen-address  [::1]:8118</code>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#listen-address  [::1]:8118</span><br></pre></td></tr></table></figure><p>最后一行添加, 注意最后的端口需要跟shadowsocks中配置的相吻合:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forward-socks5 / 127.0.0.1:1081 .</span><br></pre></td></tr></table></figure></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart privoxy</span><br></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>在<code>~/.bashrc</code>或者<code>~/.zshrc</code>中配置:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias proxy='export http_proxy=127.0.0.1:8118;export https_proxy=127.0.0.1:8118;export ftp_proxy=127.0.0.1:8118'</span><br><span class="line">alias unproxy='unset http_proxy https_proxy ftp_proxy'</span><br></pre></td></tr></table></figure></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>启动ss<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslocal -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure></p><p>启动privoxy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart privoxy</span><br></pre></td></tr></table></figure></p><p>测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 开启</span><br><span class="line">➜  ~ proxy</span><br><span class="line">➜  ~ curl ip.gs</span><br><span class="line">Current IP / 当前 IP: **.**.**.**</span><br><span class="line">ISP / 运营商:  **.**</span><br><span class="line">City / 城市: Los Angeles California</span><br><span class="line">Country / 国家: United States</span><br><span class="line">IP.GS is now IP.SB, please visit https://ip.sb/ for more information. / IP.GS 已更改为 IP.SB ，请访问 https://ip.sb/ 获取更详细 IP 信息！</span><br><span class="line">Please join Telegram group https://t.me/sbfans if you have any issues. / 如有问题，请加入 Telegram 群 https://t.me/sbfans</span><br><span class="line"></span><br><span class="line">  /\_/\</span><br><span class="line">=( °w° )=</span><br><span class="line">  )   (  //</span><br><span class="line"> (__ __)//</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 关闭</span><br><span class="line">➜  ~ unproxy</span><br><span class="line">➜  ~ curl ip.gs</span><br><span class="line">Current IP / 当前 IP: **.**.**.**</span><br><span class="line">ISP / 运营商: tencent.com ChinaTelecom</span><br><span class="line">City / 城市: Beijing Beijing</span><br><span class="line">Country / 国家: China</span><br><span class="line">IP.GS is now IP.SB, please visit https://ip.sb/ for more information. / IP.GS 已更改为 IP.SB ，请访问 https://ip.sb/ 获取更详细 IP 信息！</span><br><span class="line">Please join Telegram group https://t.me/sbfans if you have any issues. / 如有问题，请加入 Telegram 群 https://t.me/sbfans</span><br><span class="line"></span><br><span class="line">  /\_/\</span><br><span class="line">=( °w° )=</span><br><span class="line">  )   (  //</span><br><span class="line"> (__ __)//</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Shadowsocks安装-已安装略过&quot;&gt;&lt;a href=&quot;#Shadowsocks安装-已安装略过&quot; class=&quot;headerlink&quot; title=&quot;Shadowsocks安装(已安装略过)&quot;&gt;&lt;/a&gt;Shadowsocks安装(已安装略过)&lt;/h2&gt;&lt;h3 id=&quot;下载get-pip文件&quot;&gt;&lt;a href=&quot;#下载get-pip文件&quot; class=&quot;headerlink&quot; title=&quot;下载get-pip文件&quot;&gt;&lt;/a&gt;下载get-pip文件&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://bootstrap.pypa.io/get-pip.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;安装shadowsocks&quot;&gt;&lt;a href=&quot;#安装shadowsocks&quot; class=&quot;headerlink&quot; title=&quot;安装shadowsocks&quot;&gt;&lt;/a&gt;安装shadowsocks&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python get-pip.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install shadowsocks&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;shadowsocks配置文件&quot;&gt;&lt;a href=&quot;#shadowsocks配置文件&quot; class=&quot;headerlink&quot; title=&quot;shadowsocks配置文件&quot;&gt;&lt;/a&gt;shadowsocks配置文件&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim /etc/shadowsocks.json&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;&quot;server&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;your.server.ip&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;&quot;local_address&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;&quot;local_port&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1081&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;&quot;server_port&quot;&lt;/span&gt;:yourserver_port, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;&quot;password&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;yourpasswd&quot;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;&quot;timeout&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;&quot;method&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="开发环境" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>使用fastlane交付你的应用</title>
    <link href="http://yoursite.com/2019/08/27/%E4%BD%BF%E7%94%A8fastlane%E4%BA%A4%E4%BB%98%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/27/%E4%BD%BF%E7%94%A8fastlane%E4%BA%A4%E4%BB%98%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2019-08-27T02:22:32.000Z</published>
    <updated>2019-09-16T15:38:36.355Z</updated>
    
    <content type="html"><![CDATA[<p>你是否还在忍受打包时电脑风扇嗡嗡作响的苦恼, 还在”享受”MacOS菊花转起来的微妙, 是否陷入了jenkins的泥沼中止步不前? – <a href="https://docs.fastlane.tools/" target="_blank" rel="noopener">fastlane</a>, (私认为)一款市面上最好的打包分发工具, 足以带你脱离苦海.</p><h2 id="Why-fastlane"><a href="#Why-fastlane" class="headerlink" title="Why fastlane?"></a>Why fastlane?</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:left">fastlane</th></tr></thead><tbody><tr><td style="text-align:center">🚀</td><td style="text-align:left">每次发包, 省时省力</td></tr><tr><td style="text-align:center">✨</td><td style="text-align:left">方便的集成你先有的工具和服务, 同时自己囊括了400多个工具.</td></tr><tr><td style="text-align:center">📖</td><td style="text-align:left">基于MIT开源</td></tr><tr><td style="text-align:center">🎩</td><td style="text-align:left">几分钟之内就可以部署</td></tr><tr><td style="text-align:center">⚒</td><td style="text-align:left">在<strong>你</strong>自己的机器上运行.</td></tr><tr><td style="text-align:center">👻</td><td style="text-align:left">集成了所有的CI系统.</td></tr><tr><td style="text-align:center">🖥</td><td style="text-align:left">支持iOS、 MacOS、 Android app.</td></tr><tr><td style="text-align:center">🔧</td><td style="text-align:left">基于需求 自行扩展, 不需要依赖任何东西.</td></tr><tr><td style="text-align:center">💭</td><td style="text-align:left">一行fastlane走天下, 其他指令全都不需要.</td></tr><tr><td style="text-align:center">🚢</td><td style="text-align:left">可在其他任何设备甚至是CI服务上部署.</td></tr></tbody></table><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><p>具体的搭建可以参考官方文档, <a href="https://docs.fastlane.tools/" target="_blank" rel="noopener">https://docs.fastlane.tools/</a>,<br> 本篇只记录一些细节坑点.<br><a id="more"></a><br>选择模式时选中<code>3</code>, 这样会走拉取<code>iTunes Connect</code>中 app信息的流程.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[11:39:03]: What would you like to use fastlane for?</span><br><span class="line">1. 📸  Automate screenshots</span><br><span class="line">2. 👩‍✈️  Automate beta distribution to TestFlight</span><br><span class="line">3. 🚀  Automate App Store distribution</span><br><span class="line">4. 🛠  Manual setup - manually setup your project to automate your tasks</span><br></pre></td></tr></table></figure></p><p>此时询问你是否允许 fastlane来管理你iTunes Connect app的元数据, 包括一些 app描述, 关键词, 以及截图等等. 建议允许<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[11:43:52]: Would you like to have fastlane manage your app's metadata?</span><br><span class="line">[11:43:52]: If you enable this feature, fastlane will download your existing metadata and screenshots.</span><br><span class="line">[11:43:52]: This way, you'll be able to edit your app's metadata in local `.txt` files.</span><br><span class="line">[11:43:52]: After editing the local `.txt` files, just run fastlane and all changes will be pushed up.</span><br><span class="line">[11:43:52]: If you don't want to use this feature, you can still use fastlane to upload and distribute new builds to the App Store</span><br><span class="line">[11:43:52]: Would you like fastlane to manage your app's metadata? (y/n)</span><br></pre></td></tr></table></figure></p><p>执行完这些步骤之后, 就会发现项目目录下产生了一个fastlane的文件夹, 里面的结构是这样的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Appfile</span><br><span class="line">├── Deliverfile</span><br><span class="line">├── Fastfile</span><br><span class="line">├── metadata</span><br><span class="line">│   ├── app_icon.jpg</span><br><span class="line">│   ├── copyright.txt</span><br><span class="line">│   ├── primary_category.txt</span><br><span class="line">│   ├── primary_first_sub_category.txt</span><br><span class="line">│   ├── primary_second_sub_category.txt</span><br><span class="line">│   ├── review_information</span><br><span class="line">│   │   ├── demo_password.txt</span><br><span class="line">│   │   ├── demo_user.txt</span><br><span class="line">│   │   ├── email_address.txt</span><br><span class="line">│   │   ├── first_name.txt</span><br><span class="line">│   │   ├── last_name.txt</span><br><span class="line">│   │   ├── notes.txt</span><br><span class="line">│   │   └── phone_number.txt</span><br><span class="line">│   ├── secondary_category.txt</span><br><span class="line">│   ├── secondary_first_sub_category.txt</span><br><span class="line">│   ├── secondary_second_sub_category.txt</span><br><span class="line">│   ├── trade_representative_contact_information</span><br><span class="line">│   │   ├── address_line1.txt</span><br><span class="line">│   │   ├── address_line2.txt</span><br><span class="line">│   │   ├── address_line3.txt</span><br><span class="line">│   │   ├── city_name.txt</span><br><span class="line">│   │   ├── country.txt</span><br><span class="line">│   │   ├── email_address.txt</span><br><span class="line">│   │   ├── first_name.txt</span><br><span class="line">│   │   ├── is_displayed_on_app_store.txt</span><br><span class="line">│   │   ├── last_name.txt</span><br><span class="line">│   │   ├── phone_number.txt</span><br><span class="line">│   │   ├── postal_code.txt</span><br><span class="line">│   │   ├── state.txt</span><br><span class="line">│   │   └── trade_name.txt</span><br><span class="line">│   └── zh-Hans</span><br><span class="line">│       ├── apple_tv_privacy_policy.txt</span><br><span class="line">│       ├── description.txt</span><br><span class="line">│       ├── keywords.txt</span><br><span class="line">│       ├── marketing_url.txt</span><br><span class="line">│       ├── name.txt</span><br><span class="line">│       ├── privacy_url.txt</span><br><span class="line">│       ├── promotional_text.txt</span><br><span class="line">│       ├── release_notes.txt</span><br><span class="line">│       ├── subtitle.txt</span><br><span class="line">│       └── support_url.txt</span><br><span class="line">└── screenshots</span><br><span class="line">    ├── README.txt</span><br><span class="line">    └── zh-Hans</span><br><span class="line">        ├── ....png</span><br><span class="line">        └── ....png</span><br></pre></td></tr></table></figure></p><p><code>FastFile</code>就是存放我们自定义的指令的地方, 我们cat下FastFile, 发现fastlane已经基于我们之前的选择, 自动生成了打包上传到appstore的<code>lane</code>:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">default_platform(<span class="symbol">:ios</span>)</span><br><span class="line"></span><br><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line">  desc <span class="string">"Push a new release build to the App Store"</span></span><br><span class="line">  lane <span class="symbol">:release</span> <span class="keyword">do</span></span><br><span class="line">    build_app(<span class="symbol">workspace:</span> <span class="string">"VoiceOfGod.xcworkspace"</span>, <span class="symbol">scheme:</span> <span class="string">"VoiceOfGod"</span>)</span><br><span class="line">    upload_to_app_store</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="证书管理神器Match"><a href="#证书管理神器Match" class="headerlink" title="证书管理神器Match"></a>证书管理神器Match</h2><p>我个人在打包的时候为了避免开发机卡顿 造成效率下降, 所以打包都是在一台mac mini上进行的,  用之前的路数, 需要将开发机的证书导出p12和描述文件 在mini上按照, 即可保证正常.<br>但是难受的是 每次证书更改/描述文件更新时(例如添加adhoc设备) 就需要两边一起更新, 虽然Xcode现在支持在其内部直接下载, 但是有没有办法可以更省心省力呢?</p><p>答案呼之欲出, 这便是 fastlane中著名的action <code>Match</code>  </p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>其实match工具的核心很简单,就是自动创建一套证书与Profile文件.然后通过Git托管这些文件.在共享机器上面通过下载并把证书装到机器上面.</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在项目目录下执行<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane match init</span><br></pre></td></tr></table></figure></p><p>接着我们选择git作为存储容器.</p><p>然后创建一个空的git项目, 并将地址粘贴:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[14:11:57]: Please create a new, private git repository to store the certificates and profiles there</span><br><span class="line">[14:11:57]: URL of the Git Repo: https://github.com/yourname/your_match_files.git</span><br></pre></td></tr></table></figure></p><p>此时, fastlane目录下会多出一个<code>MatchFile</code>, 这就代表你初始化成功了.</p><h3 id="生成并证书及描述文件"><a href="#生成并证书及描述文件" class="headerlink" title="生成并证书及描述文件"></a>生成并证书及描述文件</h3><p>我们编辑<code>fastlane/FastFile</code>, 添加一个新的lane, 用来生成证书及描述文件, 并安装.<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lane <span class="symbol">:match_all</span> <span class="keyword">do</span></span><br><span class="line">  sh <span class="string">"bundle exec fastlane match development"</span></span><br><span class="line">  sh <span class="string">"bundle exec fastlane match adhoc"</span></span><br><span class="line">  sh <span class="string">"bundle exec fastlane match appstore"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>保存后 执行 <code>fastlane match_all</code></p><p>这样会帮你生成所有环境的证书和描述文件, 同时存到你刚才配置的git地址中, 如果是第一次配置, 会让你配置下 git项目密码, 并且会将此密码存到本机的keychain中.</p><p>而之后在其他机器上使用时, 先创建一个新的lane:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lane <span class="symbol">:match_all_readonly</span> <span class="keyword">do</span></span><br><span class="line">  sh <span class="string">"fastlane match development --readonly"</span></span><br><span class="line">  sh <span class="string">"fastlane match adhoc --readonly"</span></span><br><span class="line">  sh <span class="string">"fastlane match appstore --readonly"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>然后在调用 fastlane match_all_readonly,在需要时 手动输入刚才配置的git仓库加密的密码即可, 之后每次打包便不需要手动操作了.<br>不过也正因为match的问题, 使用ssh进行操作时, 都会卡在git加密密钥验证这个地方. 所以每次打包, 要不就是使用teamviewer来操作, 要不就是使用mini上的jenkins调用mini本地 fastlane 命令的方式来打包.</p><h2 id="AdHoc打包"><a href="#AdHoc打包" class="headerlink" title="AdHoc打包"></a>AdHoc打包</h2><p><font size="5"><strong>注意在使用<code>gym</code>前 请确认你的<code>scheme</code>已经勾选了<code>Share</code></strong></font><br></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">lane <span class="symbol">:adhoc</span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># sh "pod install --no-repo-update" </span></span><br><span class="line">  puts <span class="string">"开始打包 adhoc"</span></span><br><span class="line">  gym(</span><br><span class="line">    <span class="symbol">clean:</span><span class="literal">true</span>,</span><br><span class="line">    <span class="symbol">scheme:</span><span class="string">"YourProjectTarget"</span>,</span><br><span class="line">    <span class="symbol">configuration:</span><span class="string">"AdHoc"</span>,</span><br><span class="line">    <span class="symbol">export_method:</span><span class="string">"ad-hoc"</span>,</span><br><span class="line">    <span class="symbol">output_directory:</span><span class="string">"./build"</span>,<span class="comment"># 打包后的 ipa 文件存放的目录</span></span><br><span class="line">    <span class="symbol">silent:</span><span class="literal">true</span>,</span><br><span class="line">  )</span><br><span class="line">  <span class="comment"># 使用fir上传</span></span><br><span class="line">  sh <span class="string">"fir p ../build/your.ipa -T YourFirToken"</span></span><br><span class="line">  puts <span class="string">"打包完成"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h2><p>  fastlane有一个邮件通知的action, 但是需要信用卡绑定才可以发送邮件, 于是我又找了一个替代品 – <a href="https://github.com/xyhuangjia/fastlane-plugin-send_e_mail" target="_blank" rel="noopener">fastlane-plugin-send_e_mail</a></p><p>先添加plugin<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane add_plugin send_e_mail</span><br></pre></td></tr></table></figure></p><p>然后在<code>FastFile</code>中添加一个新的lane:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lane <span class="symbol">:send_mail</span> <span class="keyword">do</span></span><br><span class="line">  version = get_version_number(<span class="symbol">xcodeproj:</span> <span class="string">"your_project.xcodeproj"</span>, <span class="symbol">target:</span> <span class="string">"your_project_target"</span>)</span><br><span class="line">  <span class="comment">#build_number = get_build_number(xcodeproj: "your_project.xcodeproj")</span></span><br><span class="line">  title = <span class="string">"your_app_name (iOS) <span class="subst">#&#123;version&#125;</span> 已提交AppStore审核."</span></span><br><span class="line">  send_e_mail(</span><br><span class="line">    <span class="symbol">stmp_server:</span> <span class="string">'smtp.exmail.qq.com'</span>,</span><br><span class="line">    <span class="symbol">user_name:</span> <span class="string">'xxx@qqqiye.cn'</span>,</span><br><span class="line">    <span class="symbol">password:</span> <span class="string">'xxxxxx'</span>,</span><br><span class="line">    <span class="symbol">recipients:</span> [<span class="string">'tom@qqqiye.cn'</span>,<span class="string">'jeff@qqqiye.cn'</span>],</span><br><span class="line">    <span class="symbol">subject:</span> title,</span><br><span class="line">    <span class="symbol">message_body:</span> <span class="string">"no reply"</span></span><br><span class="line">  )</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>然后直接在其他lane中调用这个<code>send_mail</code>就可:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">desc <span class="string">"Push a new release build to the App Store"</span></span><br><span class="line">lane <span class="symbol">:release</span> <span class="keyword">do</span></span><br><span class="line">  build_app(<span class="symbol">workspace:</span> <span class="string">"VoiceOfGod.xcworkspace"</span>, <span class="symbol">scheme:</span> <span class="string">"VoiceOfGod"</span>)</span><br><span class="line">  upload_to_app_store</span><br><span class="line">  send_mail</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="关于Deliverfile的一些配置"><a href="#关于Deliverfile的一些配置" class="headerlink" title="关于Deliverfile的一些配置"></a>关于Deliverfile的一些配置</h2><p>我的Deliverfile的配置是这样的</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The Deliverfile allows you to store various App Store Connect metadata</span></span><br><span class="line"><span class="comment"># For more information, check out the docs</span></span><br><span class="line"><span class="comment"># https://docs.fastlane.tools/actions/deliver/</span></span><br><span class="line"></span><br><span class="line">force <span class="literal">true</span> <span class="comment">#强制不显示 preview网页.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#build_number "30" #设置项目的build number</span></span><br><span class="line"></span><br><span class="line">skip_screenshots <span class="literal">true</span> <span class="comment">#跳过截图上传.</span></span><br><span class="line"></span><br><span class="line">phased_release <span class="literal">true</span> <span class="comment">#分阶段分发</span></span><br><span class="line"></span><br><span class="line">submit_for_review <span class="literal">false</span> <span class="comment">#提交完成直接进入review.</span></span><br></pre></td></tr></table></figure><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="increment-build-number报错或者无法使用"><a href="#increment-build-number报错或者无法使用" class="headerlink" title="increment_build_number报错或者无法使用"></a>increment_build_number报错或者无法使用</h3><p><code>Xcode-&gt;Build Settings</code> -&gt; <code>VERSIONING SYSTEM</code> 设置成 <code>Apple Generic</code>.</p><p><img src="http://ww1.sinaimg.cn/large/6b523ad1ly1g6rb7jqmrgj20lj09bt9r.jpg" alt="undefined"></p><h3 id="error-Provisioning-profile-“iOS-Team-Provisioning-Profile-“-doesn’t-include-signing-certificate-“iPhone-Developer-“"><a href="#error-Provisioning-profile-“iOS-Team-Provisioning-Profile-“-doesn’t-include-signing-certificate-“iPhone-Developer-“" class="headerlink" title="error: Provisioning profile “iOS Team Provisioning Profile: “ doesn’t include signing certificate “iPhone Developer: “"></a>error: Provisioning profile “iOS Team Provisioning Profile: <em>“ doesn’t include signing certificate “iPhone Developer: </em>“</h3><p><code>Xcode-&gt;Build Settings</code> -&gt; <code>Code Signing Identity</code><br>设置如下即可<br><img src="http://ww1.sinaimg.cn/large/6b523ad1ly1g71s9al7wej20yi09mq4v.jpg" alt="WeChat93e2f836488bd8139d2714daf78dc0c9.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你是否还在忍受打包时电脑风扇嗡嗡作响的苦恼, 还在”享受”MacOS菊花转起来的微妙, 是否陷入了jenkins的泥沼中止步不前? – &lt;a href=&quot;https://docs.fastlane.tools/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fastlane&lt;/a&gt;, (私认为)一款市面上最好的打包分发工具, 足以带你脱离苦海.&lt;/p&gt;
&lt;h2 id=&quot;Why-fastlane&quot;&gt;&lt;a href=&quot;#Why-fastlane&quot; class=&quot;headerlink&quot; title=&quot;Why fastlane?&quot;&gt;&lt;/a&gt;Why fastlane?&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;fastlane&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;🚀&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;每次发包, 省时省力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;✨&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;方便的集成你先有的工具和服务, 同时自己囊括了400多个工具.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;📖&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;基于MIT开源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;🎩&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;几分钟之内就可以部署&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;⚒&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;在&lt;strong&gt;你&lt;/strong&gt;自己的机器上运行.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;👻&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;集成了所有的CI系统.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;🖥&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;支持iOS、 MacOS、 Android app.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;🔧&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;基于需求 自行扩展, 不需要依赖任何东西.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;💭&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;一行fastlane走天下, 其他指令全都不需要.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;🚢&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;可在其他任何设备甚至是CI服务上部署.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;开始搭建&quot;&gt;&lt;a href=&quot;#开始搭建&quot; class=&quot;headerlink&quot; title=&quot;开始搭建&quot;&gt;&lt;/a&gt;开始搭建&lt;/h2&gt;&lt;p&gt;具体的搭建可以参考官方文档, &lt;a href=&quot;https://docs.fastlane.tools/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.fastlane.tools/&lt;/a&gt;,&lt;br&gt; 本篇只记录一些细节坑点.&lt;br&gt;
    
    </summary>
    
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="开发环境" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
      <category term="CI" scheme="http://yoursite.com/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>基于docker搭建项目管理平台redmine</title>
    <link href="http://yoursite.com/2019/06/27/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0redmine/"/>
    <id>http://yoursite.com/2019/06/27/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0redmine/</id>
    <published>2019-06-27T14:42:03.000Z</published>
    <updated>2019-09-15T14:11:44.387Z</updated>
    
    <content type="html"><![CDATA[<p>首发于 <code>2018-07-14 15:23:01</code><br>最后编辑于<code>2019-06-27 22:42:03</code></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在写一个开源的框架, 但是发现效率低下, 于是乎就寻觅了一遭提升开发效率的方法<br>在前辈的提示下, 发现了一款名叫 <a href="https://github.com/redmine/redmine" target="_blank" rel="noopener">redmine</a> 的开源项目管理工具<br>我粗略的看了下, 发现redmine不仅流程科学规范, 而且细致入微, 对鞭策自己开发及浏览开发进度是个非常不错的选择.<br>正好我在公司有台用来垫显示器的闲置 Mac mini, 就利用一下好了.</p><h2 id="搭建Docker"><a href="#搭建Docker" class="headerlink" title="搭建Docker"></a>搭建Docker</h2><p><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！</p><p>无论是应用开发者、运维人员、还是其他信息技术从业人员，都有必要认识和掌握 Docker，节约有限的生命。</p><p>考虑到以后更换设备的可能(比如说从这台Mac mini 更换到另一台垫显示器的Mac mini), 使用 <code>Docker</code> 来避免配置环境的重复劳动, 是最明智不过了.</p><a id="more"></a> <h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p><a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">Docker-从入门到实践</a>一书中已有非常详实准确的指南, 可以参看其中的<a href="https://yeasy.gitbooks.io/docker_practice/content/install/" target="_blank" rel="noopener">安装步骤</a>, 快速的安装Docker</p><p>安装完成后, Mac用户可能会报如下错误  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker does not rely on Virtualbox but may not work properly on systems with VirtualBox versions prior to v4.3.30 VirtualBox v4.3.28 is currently installed. Please upgrade or uninstall Virtualbox.Docker does not rely on Virtualbox but may not work properly on systems with VirtualBox versions prior to v4.3.30 VirtualBox v4.3.28 is currently installed. Please upgrade or uninstall Virtualbox.</span><br></pre></td></tr></table></figure><p>google了一下, 发现github中有关于这个的<a href="https://github.com/docker/for-mac/issues/4" target="_blank" rel="noopener">issue</a>,</p><p>首先检查下本地环境的kextstat:<br>输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kextstat | grep -i virtualbox</span><br></pre></td></tr></table></figure></p><p>此时如果有信息反馈, 那么执行下一步:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /Library/Application\ Support/VirtualBox/</span><br><span class="line">rm -rf *.kext</span><br></pre></td></tr></table></figure></p><p>清除文件后, 再执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kextstat | grep -i virtualbox</span><br></pre></td></tr></table></figure></p><p>这时 应该不会有任何信息出来, 接着我们在重启下mac, 然后再次运行Docker 就OK了.</p><h2 id="安装Redmine"><a href="#安装Redmine" class="headerlink" title="安装Redmine"></a>安装Redmine</h2><p>Redmine依赖数据库, 我这里使用的是MySQL, 而docker hub中已经有redmine及MySQL的官方镜像了, 我们直接加载就行.</p><h3 id="加载镜像"><a href="#加载镜像" class="headerlink" title="加载镜像"></a>加载镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7.22</span><br><span class="line">docker pull redmine:4.0.4</span><br></pre></td></tr></table></figure><p>安装成功之后，执行docker images，可以看到两个镜像的描述，类似如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># docker images</span><br><span class="line">REPOSITORY                         TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mysql                              5.7.22              66bc0f66b7af        2 weeks ago         372MB</span><br><span class="line">redmine                            4.0.4               a3175f2fb34e        2 months ago        574MB</span><br></pre></td></tr></table></figure></p><h3 id="docker-启动-mysql"><a href="#docker-启动-mysql" class="headerlink" title="docker 启动 mysql"></a>docker 启动 mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name server-mysql -e MYSQL_ROOT_PASSWORD=&quot;pass&quot;  -e MYSQL_DATABASE=redmine mysql:5.7.22</span><br></pre></td></tr></table></figure><p>这里为物理机和虚拟机的3306端口做了端口映射，以让外部用户可以通过3306端口访问mysql实例,</p><h3 id="mysql关于默认不支持utf-8的处理"><a href="#mysql关于默认不支持utf-8的处理" class="headerlink" title="mysql关于默认不支持utf-8的处理"></a>mysql关于默认不支持utf-8的处理</h3><p>我是一开始没有处理这个问题, 然后就立马绑定并run redmin了, 然而在使用redmine的时候有许多地方会报interal error的错误.<br>查看了log发现都是mysql插入utf8字段的的错误. 所以推荐启动完mysql之后, 就要着手立马处理问题, 否则像我一样发现问题再改, 就要废很多功夫了.</p><h3 id="解决流程"><a href="#解决流程" class="headerlink" title="解决流程"></a>解决流程</h3><p>1.查看 刚才创建的MYSQL的 container id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></p><p>2.进入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it b63ce7258234 /bin/bash</span><br></pre></td></tr></table></figure></p><p>3.切换成root账号, 密码就是刚才配置的(pass)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></p><p>4.查看MySQL字符集<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;character_set_%&apos;;</span><br><span class="line">SHOW VARIABLES LIKE &apos;collation_%&apos;;</span><br></pre></td></tr></table></figure></p><p>得到输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 输出</span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE &apos;character_set_%&apos;;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | latin1                     |</span><br><span class="line">| character_set_connection | latin1                     |</span><br><span class="line">| character_set_database   | latin1                     |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | latin1                     |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE &apos;collation_%&apos;;</span><br><span class="line">+----------------------+-------------------+</span><br><span class="line">| Variable_name        | Value             |</span><br><span class="line">+----------------------+-------------------+</span><br><span class="line">| collation_connection | latin1_swedish_ci |</span><br><span class="line">| collation_database   | latin1_swedish_ci |</span><br><span class="line">| collation_server     | latin1_swedish_ci |</span><br><span class="line">+----------------------+-------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>5.设置外部访问的编码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES &apos;utf8&apos;;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 输出</span><br><span class="line">mysql&gt; SET NAMES &apos;utf8&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">// 再次查看MySQL字符集, 发现已经变化.</span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE &apos;character_set_%&apos;;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | latin1                     |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE &apos;collation_%&apos;;</span><br><span class="line">+----------------------+-------------------+</span><br><span class="line">| Variable_name        | Value             |</span><br><span class="line">+----------------------+-------------------+</span><br><span class="line">| collation_connection | utf8_general_ci   |</span><br><span class="line">| collation_database   | latin1_swedish_ci |</span><br><span class="line">| collation_server     | latin1_swedish_ci |</span><br><span class="line">+----------------------+-------------------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>6.修改mysql配置文件 (/etc/mysql/mysql.conf.d/mysqld.cn)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 先退出</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// 编辑配置文件</span><br><span class="line">// 由于此环境内没有vim 所以直接用 echo &quot;下面文本的内容&quot; &gt; /etc/mysql/mysql.conf.d/mysqld.cn 进行覆盖</span><br><span class="line"></span><br><span class="line"># Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line">#</span><br><span class="line"># This program is free software; you can redistribute it and/or modify</span><br><span class="line"># it under the terms of the GNU General Public License as published by</span><br><span class="line"># the Free Software Foundation; version 2 of the License.</span><br><span class="line">#</span><br><span class="line"># This program is distributed in the hope that it will be useful,</span><br><span class="line"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="line"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="line"># GNU General Public License for more details.</span><br><span class="line">#</span><br><span class="line"># You should have received a copy of the GNU General Public License</span><br><span class="line"># along with this program; if not, write to the Free Software</span><br><span class="line"># Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># The MySQL  Server configuration file.</span><br><span class="line">#</span><br><span class="line"># For explanations see</span><br><span class="line"># http://dev.mysql.com/doc/mysql/en/server-system-variables.html</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mysql_safe]</span><br><span class="line">default-character-set = utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set = utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">pid-file= /var/run/mysqld/mysqld.pid</span><br><span class="line">socket= /var/run/mysqld/mysqld.sock</span><br><span class="line">datadir= /var/lib/mysql</span><br><span class="line">#log-error= /var/log/mysql/error.log</span><br><span class="line"># By default we only accept connections from localhost</span><br><span class="line">#bind-address= 127.0.0.1</span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line">init_connect  = &apos;SET NAMES utf8&apos;</span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server = utf8_unicode_ci</span><br></pre></td></tr></table></figure><p>7.退出, 停止容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br><span class="line"></span><br><span class="line">docker stop b63ce7258234</span><br></pre></td></tr></table></figure></p><p>8.基于刚才的容器创建一个新的镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit b63ce7258234 mysql-utf8:5.7.22</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 删除刚才使用的容器</span><br><span class="line">docker rm b63ce7258234</span><br></pre></td></tr></table></figure><p>9.基于刚才创建的镜像，启动一个新的容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name server-mysql-uft8 -e MYSQL_ROOT_PASSWORD=&quot;pass&quot;  -e MYSQL_DATABASE=redmine mysql-utf8:5.7.22</span><br></pre></td></tr></table></figure></p><p>好了，修改就到此结束了，后面创建mysql容器时只要使用这个镜像就无需再重新修改字符集了</p><h3 id="docker启动redmine"><a href="#docker启动redmine" class="headerlink" title="docker启动redmine"></a>docker启动redmine</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:3000 --name=server-redmine -e MYSQL_ROOT_PASSWORD=&quot;pass&quot; --link server-mysql-uft8:mysql redmine:4.0.4</span><br></pre></td></tr></table></figure><p>这里为物理机和虚拟机的3000与3000端口做了端口映射，使用外部用户可以通过8080端口访问redmine.</p><p>一切正常的话, 使用 docker ps -a 可以看到docker中运行的进程:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># docker ps -a</span><br><span class="line">ONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS                    PORTS                    NAMES</span><br><span class="line">c7a2a67fb328        redmine:4.0.4                      &quot;/docker-entrypoint.…&quot;   14 minutes ago      Up 18 minutes             0.0.0.0:3000-&gt;3000/tcp   server-redmine</span><br><span class="line">c548ae6a6002        mysql-utf8:5.7.22                  &quot;docker-entrypoint.s…&quot;   15 minutes ago      Up 18 minutes             0.0.0.0:3306-&gt;3306/tcp   mysql-utf8</span><br></pre></td></tr></table></figure></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>使用最新的mysql会出错, 因为 mysql:latest (mysql 8)中修改了authentication method 导致redmine(redmine目前19-06-27最高支持的mysql版本是5.7.26)无法登录.</p><p><strong>在第一次进入redmine的管理页面时, 会提示加载默认配置, 注意将语言勾选为English 以避免中文默认配置无法新建问题的Bug…</strong></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>浏览器中打开 <a href="localhost:3000" target="_blank" rel="noopener">localhost:3000</a> 就可以访问redmine开始玩耍了.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首发于 &lt;code&gt;2018-07-14 15:23:01&lt;/code&gt;&lt;br&gt;最后编辑于&lt;code&gt;2019-06-27 22:42:03&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在写一个开源的框架, 但是发现效率低下, 于是乎就寻觅了一遭提升开发效率的方法&lt;br&gt;在前辈的提示下, 发现了一款名叫 &lt;a href=&quot;https://github.com/redmine/redmine&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redmine&lt;/a&gt; 的开源项目管理工具&lt;br&gt;我粗略的看了下, 发现redmine不仅流程科学规范, 而且细致入微, 对鞭策自己开发及浏览开发进度是个非常不错的选择.&lt;br&gt;正好我在公司有台用来垫显示器的闲置 Mac mini, 就利用一下好了.&lt;/p&gt;
&lt;h2 id=&quot;搭建Docker&quot;&gt;&lt;a href=&quot;#搭建Docker&quot; class=&quot;headerlink&quot; title=&quot;搭建Docker&quot;&gt;&lt;/a&gt;搭建Docker&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker&lt;/a&gt; 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！&lt;/p&gt;
&lt;p&gt;无论是应用开发者、运维人员、还是其他信息技术从业人员，都有必要认识和掌握 Docker，节约有限的生命。&lt;/p&gt;
&lt;p&gt;考虑到以后更换设备的可能(比如说从这台Mac mini 更换到另一台垫显示器的Mac mini), 使用 &lt;code&gt;Docker&lt;/code&gt; 来避免配置环境的重复劳动, 是最明智不过了.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>iOS 越狱后如何更改默认的shell为zsh</title>
    <link href="http://yoursite.com/2019/06/14/iOS-%E8%B6%8A%E7%8B%B1%E5%90%8E%E5%A6%82%E4%BD%95%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84shell/"/>
    <id>http://yoursite.com/2019/06/14/iOS-%E8%B6%8A%E7%8B%B1%E5%90%8E%E5%A6%82%E4%BD%95%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84shell/</id>
    <published>2019-06-14T05:26:37.000Z</published>
    <updated>2019-09-15T14:13:52.973Z</updated>
    
    <content type="html"><![CDATA[<p>通过ssh登录手机之后, 按照以下步骤操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 安装curl</span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get upgrade curl</span></span><br><span class="line"></span><br><span class="line">// 安装awk</span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get install gawk</span></span><br><span class="line"></span><br><span class="line">// 安装on-my-zsh</span><br><span class="line"><span class="meta">$</span><span class="bash"> sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span></span><br></pre></td></tr></table></figure><p>安装完成后会提示无法使用chsh切换默认shell, 需要手动操作.<br>然而使用<code>chsh</code>是无论如何都切换不了的.</p><p>于是便想着通过修改 <code>/etc/passwd</code>文件中的设置来更改, 但是并没有起作用.</p><p>google了一圈也未果, 最终在<code>/etc</code>目录下发现了<code>master.passwd</code>这个文件,  于是修改关于<code>root</code>的配置.</p><p>将最后<code>bin/sh</code>改为<code>bin/zsh</code>即可.<br><a id="more"></a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过ssh登录手机之后, 按照以下步骤操作&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 安装curl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; apt-get upgrade curl&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 安装awk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; apt-get install gawk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 安装on-my-zsh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sh -c &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装完成后会提示无法使用chsh切换默认shell, 需要手动操作.&lt;br&gt;然而使用&lt;code&gt;chsh&lt;/code&gt;是无论如何都切换不了的.&lt;/p&gt;
&lt;p&gt;于是便想着通过修改 &lt;code&gt;/etc/passwd&lt;/code&gt;文件中的设置来更改, 但是并没有起作用.&lt;/p&gt;
&lt;p&gt;google了一圈也未果, 最终在&lt;code&gt;/etc&lt;/code&gt;目录下发现了&lt;code&gt;master.passwd&lt;/code&gt;这个文件,  于是修改关于&lt;code&gt;root&lt;/code&gt;的配置.&lt;/p&gt;
&lt;p&gt;将最后&lt;code&gt;bin/sh&lt;/code&gt;改为&lt;code&gt;bin/zsh&lt;/code&gt;即可.&lt;br&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>组织代码中的依赖关系</title>
    <link href="http://yoursite.com/2019/05/22/%E7%BB%84%E7%BB%87%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2019/05/22/%E7%BB%84%E7%BB%87%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/</id>
    <published>2019-05-22T02:05:54.000Z</published>
    <updated>2019-09-15T14:13:05.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是依赖关系"><a href="#什么是依赖关系" class="headerlink" title="什么是依赖关系"></a>什么是依赖关系</h2><p>例子:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Swift demo</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Canvas</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> color: <span class="type">UIColor</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">drawCircle</span><span class="params">(at origin: <span class="params">(Double, Double)</span></span></span>, d: <span class="type">Double</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pen = <span class="type">Pencil</span>(of: color)</span><br><span class="line">    pen.circle(at: origin, d: d)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="type">Canvas</span>(color: .red)</span><br><span class="line">canvas.drawCircle(at: (<span class="number">0</span>, <span class="number">0</span>), d: <span class="number">10</span>)</span><br></pre></td></tr></table></figure></p><ol><li>首先，是由于对类型名称的了解而引入的依赖关系。这里Canvas要求必须存在一个叫做Pencil的</li><li>其次，是由于要发送给其它对象的方法名而引入的依赖关系。这里Canvas要求Pencil中必须有一个叫做circle的方法</li><li>第三，是方法的参数引入的依赖关系。既然Canvas创建了Pencil对象，它自然就需要知道Pencil的init方法需要接受一个UIColor对象<br>除了上面三点之外，还有一类依赖关系是参数的顺序。但由于Swift并不像Ruby一样可以通过命名参数调整顺序，因此这类依赖关系，我们就不在这里讨论了<a id="more"></a> <h2 id="评估项目中类依赖关系的方法"><a href="#评估项目中类依赖关系的方法" class="headerlink" title="评估项目中类依赖关系的方法"></a>评估项目中类依赖关系的方法</h2></li></ol><p>了解了一些具体的处理依赖关系的方法之后，这一节最后，我们介绍一个评估依赖关系的方法。只有找到项目中最危险的分子，才能最安全有效的实施重构。对于一个类型来说，我们可以从两个方面来评估它：</p><ul><li>在未来发生修改的可能性；</li><li>类型的依赖关系的多少；<br>而这两个方面，又不是彼此独立的，我们可以画一个平面图来表达它们的关系：<br><img src="https://image.boxueio.com/relieve-dependency-condition-1@2x.jpg" alt="img"></li></ul><p>这里，越靠近顶部的类型，包含的依赖关系越多；越靠近右侧的类型，越可能发生修改。重构之前，我们要做的第一件事，就是把收集到的类型，对号入座地收集到这个图里。</p><p>通常，可以放在区域A中的类型，抽象级别应该是最高的，它们通常是一些接口或者抽象基类这样的东西，只用于约定行为。因此，它们非常稳定，几乎不会改变。对于这样的类型，即便它们有很多依赖关系（例如：Swift中的Collection就是多个protocols组合起来的），也是没问题的。</p><p>而对于B和C区域的类型，通常它们都不是我们要关注的重点。项目中，绝大多数的类型，应该属于这两个区域。由于它们的依赖关系并不多，所以你会发现对这些类型的修改，你的脑子里一下子就能反映出具体的方案并确定结果。当然，也正因为如此，其实重构它们的收益，并不大 :)</p><p>最后，就是区域D中的类型。它们才是项目中最危险的分子。它们不仅依赖关系多，还经常需要被需改。所谓的Massive View Controller就是最典型的例子之一。尽管修改它们并不容易，但你要知道，这些类型，绝对是你在开始重构的时候，一定要要优先考虑的对象。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="从名字依赖到方法依赖"><a href="#从名字依赖到方法依赖" class="headerlink" title="从名字依赖到方法依赖"></a>从名字依赖到方法依赖</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Swift demo</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Pen</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">circle</span><span class="params">(at origin: <span class="params">(Double, Double)</span></span></span>, d: <span class="type">Double</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pencil</span>: <span class="title">Pen</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">circle</span><span class="params">(at origin: <span class="params">(Double, Double)</span></span></span>, d: <span class="type">Double</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Canvas</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">drawCircle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    at origin: <span class="params">(Double, Double)</span></span></span>,</span><br><span class="line">    d: <span class="type">Double</span>,</span><br><span class="line">    by pen: <span class="type">Pen</span>) &#123;</span><br><span class="line">    pen.circle(at: origin, d: d)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="type">Canvas</span>()</span><br><span class="line">canvas.drawCircle(</span><br><span class="line">  at: (<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">  d: <span class="number">10</span>,</span><br><span class="line">  by: <span class="type">Pencil</span>(of: .red))</span><br></pre></td></tr></table></figure><p>而这种直接把对象当作参数传递的行为，就叫做<code>依赖注入（Dependency Injection）</code>。把原本Canvas依赖的Pencil对象，“注入”到drawCircle。没错，这个听起来很复杂的名称，实际上就这么简单的一回事儿。</p><p>不过在很多时候，这种方法仍旧是不可行的。例如，项目工期不允许我们立即修改某个接口的签名，或者，我们根本就无法修改来自第三方的代码。但即便是面对这些情况，我们仍旧可以通过依赖注入在某些程度上缓解对象之间的依赖关系，以便于在时机成熟的时候，更方便的处理问题。  </p><h3 id="把对象的创建统一隔离到init方法"><a href="#把对象的创建统一隔离到init方法" class="headerlink" title="把对象的创建统一隔离到init方法"></a>把对象的创建统一隔离到init方法</h3><p>如果条件不允许立即修改drawCircle的签名，至少，我们也要把Pencil对象的创建从drawCircle的定义里搬出来，放到Canvas的init方法里：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// SWIFT</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Canvas</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pen: <span class="type">Pencil</span></span><br><span class="line">  <span class="keyword">init</span>(pen: <span class="type">Pencil</span>) &#123; <span class="keyword">self</span>.pen = pen &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">drawCircle</span><span class="params">(at origin: <span class="params">(Double, Double)</span></span></span>, d: <span class="type">Double</span>) &#123;</span><br><span class="line">    pen.circle(at: origin, d: diameter)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="type">Canvas</span>(pen: <span class="type">Pencil</span>(of: .red))</span><br><span class="line">canvas.drawCircle(at: (<span class="number">0</span>, <span class="number">0</span>), d: <span class="number">10</span>)</span><br></pre></td></tr></table></figure></p><p>这样做有两个目的：</p><ul><li>一个是让drawCircle不再隐性的使用一个具象的Pencil对象，未来我们修改drawCircle签名的时候，可以不用再修改它的实现；</li><li>另一个则是更明确的把Canvas依赖Pencil这个事实暴露出来，从上面的例子就可以看到，每次创建Canvas的时候，都“注入”了一个Pencil对象，这就好比在时刻提醒你：喔，对了，Canvas现在可是得依赖Pencil的。在条件允许的时候，我得把它修改过来；</li></ul><h3 id="尽可能在复杂方法中剥离依赖关系"><a href="#尽可能在复杂方法中剥离依赖关系" class="headerlink" title="尽可能在复杂方法中剥离依赖关系"></a>尽可能在复杂方法中剥离依赖关系</h3><p>除了把依赖的对象暴露在init方法之外，另外一个无副作用的改进，就是把“深埋”在复杂方法里的依赖关系从中剥离开，变成一个属于类自身的方法或属性，例如：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// SWIFT</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Canvas</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pen: <span class="type">Pencil</span></span><br><span class="line">  <span class="keyword">init</span>(pen: <span class="type">Pencil</span>) &#123; <span class="keyword">self</span>.pen = pen &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">drawCircle</span><span class="params">(at origin: <span class="params">(Double, Double)</span></span></span>, d: <span class="type">Double</span>) &#123;</span><br><span class="line">    <span class="comment">/// Complicated render before draw</span></span><br><span class="line">    circle(at: origin, d: diameter)</span><br><span class="line">    <span class="comment">/// Complicated pipeline work</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">circle</span><span class="params">(at origin: <span class="params">(Double, Double)</span></span></span>, d: <span class="type">Double</span>) &#123;</span><br><span class="line">    pen.circle(at: origin, d: diameter)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样做的目的，和我们在init中注入对象是类似的，也就是尽可能明确在未来重构代码时，需要修改的代码边界。让需要重构的部分，明确暴露出来。</p><h4 id="多层容器"><a href="#多层容器" class="headerlink" title="多层容器"></a>多层容器</h4><p>也就是说，BoxueUserSessionRepository是有状态的，我们不能够随意创建BoxueUserSessionRepository对象，如果有多个地方需要这个对象，我们应该让它成为一个单例。<br>而这，也是我们通过容器类创建对象的一个重要作用：<strong>即创建并持有需要长时间保持的依赖关系</strong>。</p><p>但如果我们在一个项目中只使用一个容器类，往往还是会有一些不方便的地方。</p><p>最直接的问题，就是这个类的体积会越来越大，它会包含越来越多的单例对象和工厂方法。最终，自己演化成一个Massive Container，变得难以维护。</p><p>另一个问题是，一个App中的依赖关系往往不是平等的。有些依赖关系存活在App的整个生命周期、有些依赖关系只在用户登录后才产生，有些关系，则仅和某个UI、某个交互相关。如果把这些依赖关系的管理都放在一个容器中，我们可能就需要不断在这个容器中安插Optional类型的属性，然后通过unwrap它来判断各种情况。显然，这会让我们的container变得更加复杂。</p><p>面对这种问题，我们就可以使用<strong>多层容器</strong>来解决。</p><h4 id="多层容器分层规则"><a href="#多层容器分层规则" class="headerlink" title="多层容器分层规则"></a>多层容器分层规则</h4><p>按照一个对象从创建到销毁所覆盖到的区域的大小，我们可以把这个区域分成4大类：</p><ul><li>App作用域，这个作用域里是我们最熟悉的单例对象，它们从App启动的时候就被创建，之后便一直保持在内存里，直到App结束。我们之前定义的sharedMainViewModel就属于这类作用域；</li><li>用户作用域，是指在用户登录后创建，登出后销毁的对象；</li><li>功能作用域，是指用户使用了某个功能之后才创建，离开这个功能后就可以销毁的对象。一会儿，我们就会看到这样一个例子；</li><li>交互作用域，是指只有在执行了某个交互动作（例如手势）之后才创建的对象，这应该是生命周期最短的一类对象了；</li></ul><p>有了这些作用域，我们就可以制定一个简单的对容器进行分层的规则：</p><ul><li>首先，管理App作用域的容器永远都是根容器，我们上一节定义的BoxueAppDepedencyContainer就是如此；</li><li>其次，每当我们需要一个新的对象作用域时，就创建一个新的子容器来管理其中所有对象的创建方法；</li><li>最后，下层容器可以向上层容器请求其管理的依赖关系；</li></ul><p>例子:<br>BoxueGuideDependencyContainer要可以向它的上层容器BoxueAppDepedencyContainer请求数据，这可以通过在init方法中注入上层容器实现：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoxueGuideDependencyContainer</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// - Properties</span></span><br><span class="line">  <span class="keyword">let</span> sharedMainViewModel: <span class="type">MainViewModel</span></span><br><span class="line">  <span class="keyword">let</span> sharedUserSessionRepository: <span class="type">UserSessionRepository</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(appDependencyContainer: <span class="type">BoxueAppDepedencyContainer</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.sharedMainViewModel =</span><br><span class="line">      appDependencyContainer.sharedMainViewModel</span><br><span class="line">    <span class="keyword">self</span>.sharedUserSessionRepository =</span><br><span class="line">      appDependencyContainer.sharedUserSessionRepository</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="如何组织文件"><a href="#如何组织文件" class="headerlink" title="如何组织文件"></a>如何组织文件</h3><p>在项目目录中，这种“一个protocol会对应多个实现”的情况，我们都用下面的方式来组织文件：<br><img src="https://image.boxueio.com/fake-objs-for-dev-and-test-1@2x.jpg" alt></p><p>在图中可以看到，Auth和UserSessionStore分别表示要实现的功能。在根目录中，我们定义对应的protocol。然后在Implementations中，包含对这个protocol的多个实现。</p><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p><img src="https://image.boxueio.com/repository-pattern-in-bx-app-3@2x.jpg" alt="MVVM过程"></p><p>通常，我们会对“究竟应该把网络IO的代码放到哪里”这样的问题感到困惑。实际上，严格来说，网络IO只是View Model获取数据的一种途径而已，从这个角度上说，它和本地读取数据没有很大区别。因此我们也不应该有类似这样的困惑。只不过，<strong>当View Model中存在着多种获取数据的通路的时候，我们会在View Model和Model之间加一层代理来屏蔽掉这个差别。我们管这层代理，就叫做</strong><code>Repository</code>。  </p><p>因此，View Model和Model之间的交互，就可以进一步被细化成这样：<br><img src="https://image.boxueio.com/repository-pattern-in-bx-app-4@2x.jpg" alt="MVVM细化过程"></p><p>所谓的view model status，就是一组表示当前view类型的case<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">GuideViewStatus</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> welcome</span><br><span class="line">  <span class="keyword">case</span> signIn</span><br><span class="line">  <span class="keyword">case</span> signUp</span><br><span class="line">  <span class="keyword">case</span> contactUs</span><br><span class="line">  <span class="keyword">case</span> resetPassword</span><br><span class="line">  <span class="keyword">case</span> requestNotification</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是依赖关系&quot;&gt;&lt;a href=&quot;#什么是依赖关系&quot; class=&quot;headerlink&quot; title=&quot;什么是依赖关系&quot;&gt;&lt;/a&gt;什么是依赖关系&lt;/h2&gt;&lt;p&gt;例子:&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// Swift demo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Canvas&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; color: &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;drawCircle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(at origin: &lt;span class=&quot;params&quot;&gt;(Double, Double)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, d: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pen = &lt;span class=&quot;type&quot;&gt;Pencil&lt;/span&gt;(of: color)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pen.circle(at: origin, d: d)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; canvas = &lt;span class=&quot;type&quot;&gt;Canvas&lt;/span&gt;(color: .red)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;canvas.drawCircle(at: (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), d: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，是由于对类型名称的了解而引入的依赖关系。这里Canvas要求必须存在一个叫做Pencil的&lt;/li&gt;
&lt;li&gt;其次，是由于要发送给其它对象的方法名而引入的依赖关系。这里Canvas要求Pencil中必须有一个叫做circle的方法&lt;/li&gt;
&lt;li&gt;第三，是方法的参数引入的依赖关系。既然Canvas创建了Pencil对象，它自然就需要知道Pencil的init方法需要接受一个UIColor对象&lt;br&gt;除了上面三点之外，还有一类依赖关系是参数的顺序。但由于Swift并不像Ruby一样可以通过命名参数调整顺序，因此这类依赖关系，我们就不在这里讨论了
    
    </summary>
    
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="MVVM" scheme="http://yoursite.com/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>flutter-go代码开发规范</title>
    <link href="http://yoursite.com/2019/05/10/flutter-go%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2019/05/10/flutter-go%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</id>
    <published>2019-05-10T05:52:28.000Z</published>
    <updated>2019-09-15T14:13:44.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flutter-Go-代码开发规范-0-1-0-版"><a href="#Flutter-Go-代码开发规范-0-1-0-版" class="headerlink" title="Flutter Go 代码开发规范 0.1.0 版"></a>Flutter Go 代码开发规范 0.1.0 版</h1><p>转发自<a href="https://github.com/alibaba/flutter-go/blob/master/Flutter_Go%20%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md" target="_blank" rel="noopener">alibab flutter-go仓库</a></p><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><h3 id="标识符三种类型"><a href="#标识符三种类型" class="headerlink" title="标识符三种类型"></a>标识符三种类型</h3><h4 id="大驼峰"><a href="#大驼峰" class="headerlink" title="大驼峰"></a>大驼峰</h4><p>类、枚举、typedef和类型参数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SliderMenu</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequest</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Predicate = <span class="built_in">bool</span> <span class="built_in">Function</span>&lt;T&gt;(T value);</span><br></pre></td></tr></table></figure><p>包括用于元数据注释的类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Foo([arg]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Foo</span>(anArg)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Foo</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><a id="more"></a> <h4 id="使用小写加下划线来命名库和源文件"><a href="#使用小写加下划线来命名库和源文件" class="headerlink" title="使用小写加下划线来命名库和源文件"></a>使用小写加下划线来命名库和源文件</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> peg_parser.source_scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'file_system.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'slider_menu.dart'</span>;</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> pegparser.SourceScanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'file-system.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'SliderMenu.dart'</span>;</span><br></pre></td></tr></table></figure><h4 id="使用小写加下划线来命名导入前缀"><a href="#使用小写加下划线来命名导入前缀" class="headerlink" title="使用小写加下划线来命名导入前缀"></a>使用小写加下划线来命名导入前缀</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span> <span class="keyword">as</span> math;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:angular_components/angular_components'</span></span><br><span class="line">    <span class="keyword">as</span> angular_components;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:js/js.dart'</span> <span class="keyword">as</span> js;</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span> <span class="keyword">as</span> Math;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:angular_components/angular_components'</span></span><br><span class="line">    <span class="keyword">as</span> angularComponents;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:js/js.dart'</span> <span class="keyword">as</span> JS;</span><br></pre></td></tr></table></figure><h4 id="使用小驼峰法命名其他标识符"><a href="#使用小驼峰法命名其他标识符" class="headerlink" title="使用小驼峰法命名其他标识符"></a>使用小驼峰法命名其他标识符</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> item;</span><br><span class="line"></span><br><span class="line">HttpRequest httpRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> align(<span class="built_in">bool</span> clearItems) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优先使用小驼峰法作为常量命名"><a href="#优先使用小驼峰法作为常量命名" class="headerlink" title="优先使用小驼峰法作为常量命名"></a>优先使用小驼峰法作为常量命名</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> defaultTimeout = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">final</span> urlScheme = <span class="built_in">RegExp</span>(<span class="string">'^([a-z]+):'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dice</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> numberGenerator = Random();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> DefaultTimeout = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">final</span> URL_SCHEME = <span class="built_in">RegExp</span>(<span class="string">'^([a-z]+):'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dice</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> NUMBER_GENERATOR = Random();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不使用前缀字母"><a href="#不使用前缀字母" class="headerlink" title="不使用前缀字母"></a>不使用前缀字母</h4><p>因为Dart可以告诉您声明的类型、范围、可变性和其他属性，所以没有理由将这些属性编码为标识符名称。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaultTimeout</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kDefaultTimeout</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>为了使你的文件前言保持整洁，我们有规定的命令，指示应该出现在其中。每个“部分”应该用空行分隔。</p><h4 id="在其他引入之前引入所需的dart库"><a href="#在其他引入之前引入所需的dart库" class="headerlink" title="在其他引入之前引入所需的dart库"></a>在其他引入之前引入所需的dart库</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:html'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:bar/bar.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:foo/foo.dart'</span>;</span><br></pre></td></tr></table></figure><h4 id="在相对引入之前先引入在包中的库"><a href="#在相对引入之前先引入在包中的库" class="headerlink" title="在相对引入之前先引入在包中的库"></a>在相对引入之前先引入在包中的库</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:bar/bar.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:foo/foo.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'util.dart'</span>;</span><br></pre></td></tr></table></figure><h4 id="第三方包的导入先于其他包"><a href="#第三方包的导入先于其他包" class="headerlink" title="第三方包的导入先于其他包"></a>第三方包的导入先于其他包</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:bar/bar.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:foo/foo.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:my_package/util.dart'</span>;</span><br></pre></td></tr></table></figure><h4 id="在所有导入之后，在单独的部分中指定导出"><a href="#在所有导入之后，在单独的部分中指定导出" class="headerlink" title="在所有导入之后，在单独的部分中指定导出"></a>在所有导入之后，在单独的部分中指定导出</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'src/error.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'src/foo_bar.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="string">'src/error.dart'</span>;</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'src/error.dart'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="string">'src/error.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'src/foo_bar.dart'</span>;</span><br></pre></td></tr></table></figure><h3 id="所有流控制结构，请使用大括号"><a href="#所有流控制结构，请使用大括号" class="headerlink" title="所有流控制结构，请使用大括号"></a>所有流控制结构，请使用大括号</h3><p>这样做可以避免悬浮的else问题</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isWeekDay) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Bike to work!'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Go dancing or read a book!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h4><p>一个if语句没有else子句，其中整个if语句和then主体都适合一行。在这种情况下，如果你喜欢的话，你可以去掉大括号</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (arg == <span class="keyword">null</span>) <span class="keyword">return</span> defaultValue;</span><br></pre></td></tr></table></figure><p>如果流程体超出了一行需要分划请使用大括号：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (overflowChars != other.overflowChars) &#123;</span><br><span class="line">  <span class="keyword">return</span> overflowChars &lt; other.overflowChars;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (overflowChars != other.overflowChars)</span><br><span class="line">  <span class="keyword">return</span> overflowChars &lt; other.overflowChars;</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="要像句子一样格式化"><a href="#要像句子一样格式化" class="headerlink" title="要像句子一样格式化"></a>要像句子一样格式化</h3><p>除非是区分大小写的标识符，否则第一个单词要大写。以句号结尾(或“!”或“?”)。对于所有的注释都是如此：doc注释、内联内容，甚至TODOs。即使是一个句子片段。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">greet(name) &#123;</span><br><span class="line">  <span class="comment">// Assume we have a valid name.</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Hi, <span class="subst">$name</span>!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">greet(name) &#123;</span><br><span class="line">  <span class="comment">/* Assume we have a valid name. */</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Hi, <span class="subst">$name</span>!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用块注释(/…/)临时注释掉一段代码，但是所有其他注释都应该使用//</p><h3 id="Doc注释"><a href="#Doc注释" class="headerlink" title="Doc注释"></a>Doc注释</h3><p>使用///文档注释来记录成员和类型。</p><p>使用doc注释而不是常规注释，可以让dartdoc找到并生成文档。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/// The number of characters in this chunk when unsplit.</span></span></span><br><span class="line"><span class="built_in">int</span> <span class="keyword">get</span> length =&gt; ...</span><br></pre></td></tr></table></figure><blockquote><p>由于历史原因，达特茅斯学院支持道格评论的两种语法:///(“C#风格”)和/<strong>…* /(“JavaDoc风格”)。我们更喜欢/// 因为它更紧凑。/</strong>和<em>/在多行文档注释中添加两个无内容的行。在某些情况下，///语法也更容易阅读，例如文档注释包含使用</em>标记列表项的项目符号列表。</p></blockquote><h3 id="考虑为私有api编写文档注释"><a href="#考虑为私有api编写文档注释" class="headerlink" title="考虑为私有api编写文档注释"></a>考虑为私有api编写文档注释</h3><p>Doc注释并不仅仅针对库的公共API的外部使用者。它们还有助于理解从库的其他部分调用的私有成员</p><h4 id="用一句话总结开始doc注释"><a href="#用一句话总结开始doc注释" class="headerlink" title="用一句话总结开始doc注释"></a>用一句话总结开始doc注释</h4><p>以简短的、以用户为中心的描述开始你的文档注释，以句号结尾。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/// Deletes </span>the<span class="markdown"> file at [path] from </span>the<span class="markdown"> file system.</span></span></span><br><span class="line"><span class="keyword">void</span> delete(<span class="built_in">String</span> path) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/// Depending on </span>the<span class="markdown"> state of </span>the<span class="markdown"> file system and </span>the<span class="markdown"> user's permissions,</span></span></span><br><span class="line"><span class="comment"><span class="markdown">/// certain operations may or may not be possible. If there is no file at</span></span></span><br><span class="line"><span class="comment"><span class="markdown">/// [path] or it can't be accessed, this function throws either [IOError]</span></span></span><br><span class="line"><span class="comment"><span class="markdown">/// or [PermissionError], respectively. Otherwise, this deletes </span>the<span class="markdown"> file.</span></span></span><br><span class="line"><span class="keyword">void</span> delete(<span class="built_in">String</span> path) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="“doc注释”的第一句话分隔成自己的段落"><a href="#“doc注释”的第一句话分隔成自己的段落" class="headerlink" title="“doc注释”的第一句话分隔成自己的段落"></a>“doc注释”的第一句话分隔成自己的段落</h4><p>在第一个句子之后添加一个空行，把它分成自己的段落</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/// Deletes </span>the<span class="markdown"> file at [path].</span></span></span><br><span class="line"><span class="comment"><span class="markdown">///</span></span></span><br><span class="line"><span class="comment"><span class="markdown">/// Throws </span>an<span class="markdown"> [IOError] if </span>the<span class="markdown"> file could not be found. Throws </span>a<span class="markdown"></span></span></span><br><span class="line"><span class="comment"><span class="markdown">/// [PermissionError] if </span>the<span class="markdown"> file is present </span>but<span class="markdown"> could not be deleted.</span></span></span><br><span class="line"><span class="keyword">void</span> delete(<span class="built_in">String</span> path) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Flutter-Go-使用参考"><a href="#Flutter-Go-使用参考" class="headerlink" title="Flutter_Go 使用参考"></a>Flutter_Go 使用参考</h2><h3 id="库的引用"><a href="#库的引用" class="headerlink" title="库的引用"></a>库的引用</h3><p>flutter go 中，导入lib下文件库，统一指定包名，避免过多的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```dart</span><br><span class="line">package:flutter_go/</span><br></pre></td></tr></table></figure></p><h3 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h3><h4 id="使用相邻字符串连接字符串文字"><a href="#使用相邻字符串连接字符串文字" class="headerlink" title="使用相邻字符串连接字符串文字"></a>使用相邻字符串连接字符串文字</h4><p>如果有两个字符串字面值(不是值，而是实际引用的字面值)，则不需要使用+连接它们。就像在C和c++中，简单地把它们放在一起就能做到。这是创建一个长字符串很好的方法但是不适用于单独一行。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">raiseAlarm(</span><br><span class="line">    <span class="string">'ERROR: Parts of the spaceship are on fire. Other '</span></span><br><span class="line">    <span class="string">'parts are overrun by martians. Unclear which are which.'</span>);</span><br></pre></td></tr></table></figure><p>不推荐如下写法:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raiseAlarm(<span class="string">'ERROR: Parts of the spaceship are on fire. Other '</span> +</span><br><span class="line">    <span class="string">'parts are overrun by martians. Unclear which are which.'</span>);</span><br></pre></td></tr></table></figure><h4 id="优先使用模板字符串"><a href="#优先使用模板字符串" class="headerlink" title="优先使用模板字符串"></a>优先使用模板字符串</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Hello, <span class="subst">$name</span>! You are <span class="subst">$&#123;year - birth&#125;</span> years old.'</span>;</span><br></pre></td></tr></table></figure><h4 id="在不需要的时候，避免使用花括号"><a href="#在不需要的时候，避免使用花括号" class="headerlink" title="在不需要的时候，避免使用花括号"></a>在不需要的时候，避免使用花括号</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Hi, <span class="subst">$name</span>!'</span></span><br><span class="line"><span class="string">"Wear your wildest <span class="subst">$decade</span>'s outfit."</span></span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Hello, '</span> + name + <span class="string">'! You are '</span> + (year - birth).toString() + <span class="string">' y...'</span>;</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Hi, <span class="subst">$&#123;name&#125;</span>!'</span></span><br><span class="line"><span class="string">"Wear your wildest <span class="subst">$&#123;decade&#125;</span>'s outfit."</span></span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="尽可能使用集合字面量"><a href="#尽可能使用集合字面量" class="headerlink" title="尽可能使用集合字面量"></a>尽可能使用集合字面量</h4><p>如果要创建一个不可增长的列表，或者其他一些自定义集合类型，那么无论如何，都要使用构造函数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> points = [];</span><br><span class="line"><span class="keyword">var</span> addresses = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> lines = &lt;Lines&gt;[];</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> points = <span class="built_in">List</span>();</span><br><span class="line"><span class="keyword">var</span> addresses = <span class="built_in">Map</span>();</span><br></pre></td></tr></table></figure><h4 id="不要使用-length查看集合是否为空"><a href="#不要使用-length查看集合是否为空" class="headerlink" title="不要使用.length查看集合是否为空"></a>不要使用.length查看集合是否为空</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (lunchBox.isEmpty) <span class="keyword">return</span> <span class="string">'so hungry...'</span>;</span><br><span class="line"><span class="keyword">if</span> (words.isNotEmpty) <span class="keyword">return</span> words.join(<span class="string">' '</span>);</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (lunchBox.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">'so hungry...'</span>;</span><br><span class="line"><span class="keyword">if</span> (!words.isEmpty) <span class="keyword">return</span> words.join(<span class="string">' '</span>);</span><br></pre></td></tr></table></figure><h4 id="考虑使用高阶方法转换序列"><a href="#考虑使用高阶方法转换序列" class="headerlink" title="考虑使用高阶方法转换序列"></a>考虑使用高阶方法转换序列</h4><p>如果有一个集合，并且希望从中生成一个新的修改后的集合，那么使用.map()、.where()和Iterable上的其他方便的方法通常更短，也更具有声明性</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aquaticNames = animals</span><br><span class="line">    .where((animal) =&gt; animal.isAquatic)</span><br><span class="line">    .map((animal) =&gt; animal.name);</span><br></pre></td></tr></table></figure><h4 id="避免使用带有函数字面量的Iterable-forEach"><a href="#避免使用带有函数字面量的Iterable-forEach" class="headerlink" title="避免使用带有函数字面量的Iterable.forEach()"></a>避免使用带有函数字面量的Iterable.forEach()</h4><p>在Dart中，如果你想遍历一个序列，惯用的方法是使用循环。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> person <span class="keyword">in</span> people) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">people.forEach((person) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="不要使用List-from-，除非打算更改结果的类型"><a href="#不要使用List-from-，除非打算更改结果的类型" class="headerlink" title="不要使用List.from()，除非打算更改结果的类型"></a>不要使用List.from()，除非打算更改结果的类型</h4><p>给定一个迭代，有两种明显的方法可以生成包含相同元素的新列表</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> copy1 = iterable.toList();</span><br><span class="line"><span class="keyword">var</span> copy2 = <span class="built_in">List</span>.from(iterable);</span><br></pre></td></tr></table></figure><p>明显的区别是第一个比较短。重要的区别是第一个保留了原始对象的类型参数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Creates a List&lt;int&gt;:</span></span><br><span class="line"><span class="keyword">var</span> iterable = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prints "List&lt;int&gt;":</span></span><br><span class="line"><span class="built_in">print</span>(iterable.toList().runtimeType);</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Creates a List&lt;int&gt;:</span></span><br><span class="line"><span class="keyword">var</span> iterable = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prints "List&lt;dynamic&gt;":</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">List</span>.from(iterable).runtimeType);</span><br></pre></td></tr></table></figure><h3 id="参数的使用"><a href="#参数的使用" class="headerlink" title="参数的使用"></a>参数的使用</h3><h4 id="使用-将命名参数与其默认值分割开"><a href="#使用-将命名参数与其默认值分割开" class="headerlink" title="使用=将命名参数与其默认值分割开"></a>使用=将命名参数与其默认值分割开</h4><p>由于遗留原因，Dart均允许“:”和“=”作为指定参数的默认值分隔符。为了与可选的位置参数保持一致，使用“=”。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> insert(<span class="built_in">Object</span> item, &#123;<span class="built_in">int</span> at = <span class="number">0</span>&#125;) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> insert(<span class="built_in">Object</span> item, &#123;<span class="built_in">int</span> at: <span class="number">0</span>&#125;) &#123; ... &#125;</span><br></pre></td></tr></table></figure><h4 id="不要使用显式默认值null"><a href="#不要使用显式默认值null" class="headerlink" title="不要使用显式默认值null"></a>不要使用显式默认值null</h4><p>如果参数是可选的，但没有给它一个默认值，则语言隐式地使用null作为默认值，因此不需要编写它</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> error([<span class="built_in">String</span> message]) &#123;</span><br><span class="line">  stderr.write(message ?? <span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐如下写法:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> error([<span class="built_in">String</span> message = <span class="keyword">null</span>]) &#123;</span><br><span class="line">  stderr.write(message ?? <span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="不要显式地将变量初始化为空"><a href="#不要显式地将变量初始化为空" class="headerlink" title="不要显式地将变量初始化为空"></a>不要显式地将变量初始化为空</h4><p>在Dart中，未显式初始化的变量或字段自动被初始化为null。不要多余赋值null</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> _nextId;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazyId</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _id;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> id &#123;</span><br><span class="line">    <span class="keyword">if</span> (_nextId == <span class="keyword">null</span>) _nextId = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (_id == <span class="keyword">null</span>) _id = _nextId++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _id;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> _nextId = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazyId</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _id = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> id &#123;</span><br><span class="line">    <span class="keyword">if</span> (_nextId == <span class="keyword">null</span>) _nextId = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (_id == <span class="keyword">null</span>) _id = _nextId++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _id;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="避免储存你能计算的东西"><a href="#避免储存你能计算的东西" class="headerlink" title="避免储存你能计算的东西"></a>避免储存你能计算的东西</h4><p>在设计类时，您通常希望将多个视图公开到相同的底层状态。通常你会看到在构造函数中计算所有视图的代码，然后存储它们:</p><p>应该避免的写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> radius;</span><br><span class="line">  <span class="built_in">num</span> area;</span><br><span class="line">  <span class="built_in">num</span> circumference;</span><br><span class="line"></span><br><span class="line">  Circle(<span class="built_in">num</span> radius)</span><br><span class="line">      : radius = radius,</span><br><span class="line">        area = pi * radius * radius,</span><br><span class="line">        circumference = pi * <span class="number">2.0</span> * radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码问题：</p><ul><li>浪费内存</li><li>缓存的问题是无效——如何知道何时缓存过期需要重新计算？</li></ul><p>推荐的写法如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> radius;</span><br><span class="line"></span><br><span class="line">  Circle(<span class="keyword">this</span>.radius);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">num</span> <span class="keyword">get</span> area =&gt; pi * radius * radius;</span><br><span class="line">  <span class="built_in">num</span> <span class="keyword">get</span> circumference =&gt; pi * <span class="number">2.0</span> * radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类成员"><a href="#类成员" class="headerlink" title="类成员"></a>类成员</h3><h4 id="不要把不必要地将字段包装在getter和setter中"><a href="#不要把不必要地将字段包装在getter和setter中" class="headerlink" title="不要把不必要地将字段包装在getter和setter中"></a>不要把不必要地将字段包装在getter和setter中</h4><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _contents;</span><br><span class="line">  <span class="keyword">get</span> contents =&gt; _contents;</span><br><span class="line">  <span class="keyword">set</span> contents(value) &#123;</span><br><span class="line">    _contents = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优先使用final字段来创建只读属性"><a href="#优先使用final字段来创建只读属性" class="headerlink" title="优先使用final字段来创建只读属性"></a>优先使用final字段来创建只读属性</h4><p>尤其对于 <code>StatelessWidget</code></p><h4 id="在不需要的时候不要用this"><a href="#在不需要的时候不要用this" class="headerlink" title="在不需要的时候不要用this"></a>在不需要的时候不要用this</h4><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.update(<span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> update(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> clear() &#123;</span><br><span class="line">    update(<span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> update(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><h4 id="尽可能使用初始化的形式"><a href="#尽可能使用初始化的形式" class="headerlink" title="尽可能使用初始化的形式"></a>尽可能使用初始化的形式</h4><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x, y;</span><br><span class="line">  Point(<span class="built_in">num</span> x, <span class="built_in">num</span> y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x, y;</span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不要使用new"><a href="#不要使用new" class="headerlink" title="不要使用new"></a>不要使用new</h4><p>Dart2使new 关键字可选</p><p>推荐写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Row(</span><br><span class="line">    children: [</span><br><span class="line">      RaisedButton(</span><br><span class="line">        child: Text(<span class="string">'Increment'</span>),</span><br><span class="line">      ),</span><br><span class="line">      Text(<span class="string">'Click!'</span>),</span><br><span class="line">    ],</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐如下写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Row(</span><br><span class="line">    children: [</span><br><span class="line">      <span class="keyword">new</span> RaisedButton(</span><br><span class="line">        child: <span class="keyword">new</span> Text(<span class="string">'Increment'</span>),</span><br><span class="line">      ),</span><br><span class="line">      <span class="keyword">new</span> Text(<span class="string">'Click!'</span>),</span><br><span class="line">    ],</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><h4 id="优先使用async-await代替原始的futures"><a href="#优先使用async-await代替原始的futures" class="headerlink" title="优先使用async/await代替原始的futures"></a>优先使用async/await代替原始的futures</h4><p>async/await语法提高了可读性，允许你在异步代码中使用所有Dart控制流结构。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;<span class="built_in">int</span>&gt; countActivePlayers(<span class="built_in">String</span> teamName) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> team = <span class="keyword">await</span> downloadTeam(teamName);</span><br><span class="line">    <span class="keyword">if</span> (team == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> players = <span class="keyword">await</span> team.roster;</span><br><span class="line">    <span class="keyword">return</span> players.where((player) =&gt; player.isActive).length;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    log.error(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="当异步没有任何用处时，不要使用它"><a href="#当异步没有任何用处时，不要使用它" class="headerlink" title="当异步没有任何用处时，不要使用它"></a>当异步没有任何用处时，不要使用它</h4><p>如果可以在不改变函数行为的情况下省略异步，那么就这样做。、</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Future afterTwoThings(Future first, Future second) &#123;</span><br><span class="line">  <span class="keyword">return</span> Future.wait([first, second]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Future afterTwoThings(Future first, Future second) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> Future.wait([first, second]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flutter-Go-代码开发规范-0-1-0-版&quot;&gt;&lt;a href=&quot;#Flutter-Go-代码开发规范-0-1-0-版&quot; class=&quot;headerlink&quot; title=&quot;Flutter Go 代码开发规范 0.1.0 版&quot;&gt;&lt;/a&gt;Flutter Go 代码开发规范 0.1.0 版&lt;/h1&gt;&lt;p&gt;转发自&lt;a href=&quot;https://github.com/alibaba/flutter-go/blob/master/Flutter_Go%20%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;alibab flutter-go仓库&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码风格&quot;&gt;&lt;a href=&quot;#代码风格&quot; class=&quot;headerlink&quot; title=&quot;代码风格&quot;&gt;&lt;/a&gt;代码风格&lt;/h2&gt;&lt;h3 id=&quot;标识符三种类型&quot;&gt;&lt;a href=&quot;#标识符三种类型&quot; class=&quot;headerlink&quot; title=&quot;标识符三种类型&quot;&gt;&lt;/a&gt;标识符三种类型&lt;/h3&gt;&lt;h4 id=&quot;大驼峰&quot;&gt;&lt;a href=&quot;#大驼峰&quot; class=&quot;headerlink&quot; title=&quot;大驼峰&quot;&gt;&lt;/a&gt;大驼峰&lt;/h4&gt;&lt;p&gt;类、枚举、typedef和类型参数&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SliderMenu&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HttpRequest&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; Predicate = &lt;span class=&quot;built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;&amp;lt;T&amp;gt;(T value);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;包括用于元数据注释的类&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Foo([arg]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Foo&lt;/span&gt;(anArg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Foo&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ARTS_Week_4.md</title>
    <link href="http://yoursite.com/2019/05/10/ARTS-Week-4/"/>
    <id>http://yoursite.com/2019/05/10/ARTS-Week-4/</id>
    <published>2019-05-10T05:48:07.000Z</published>
    <updated>2019-09-15T14:13:37.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><h2 id="The-Clean-Code-Blog"><a href="#The-Clean-Code-Blog" class="headerlink" title="The Clean Code Blog"></a><a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="noopener">The Clean Code Blog</a></h2><p><img src="https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg" alt="clean architecture"></p><p>在过去几年中, 我们已经看到了关于系统架构方面的一系列想法. 它们包括:</p><ul><li>Hexagonal Architecture (俗称Ports and Adapters) by Alistair Cockburn and adopted by Steve Freeman, and Nat Pryce in their wonderful book Growing Object Oriented Software</li><li>Onion Architecture by Jeffrey Palermo</li><li>Screaming Architecture from a blog of mine last year</li><li>DCI from James Coplien, and Trygve Reenskaug.</li><li>BCE by Ivar Jacobson from his book Object Oriented Software Engineering: A Use-Case Driven Approach</li></ul><p>虽然这些架构在一些细节中有很多不同, 但是它们还是非常相似的.它们都有同一个目标–对于关注点的分离. 它们都通过将软件分层来实现分离. 每一个都至少有一个层级用于业务规则, 另一个则关于接口.<br>每一个架构都满足:</p><ol><li>独立于任何框架. 该架构不应该依赖于任何已经存在的功能丰富的软件的一些库. 这将允许你把框架当做工具来使用, 而不用强制的将自己的系统塞进有限的约束中.</li><li>测试友好. 业务规则可以在脱离UI、数据库、网页服务或者任何其他外部元素的情况下进行测试.</li><li>独立于UI. UI的改变可以很容易, 而不用改变除系统中UI之外的剩余东西. 例如, 一个网页UI可以在不改变业务规则的情况下被一个控制台UI所代替.</li><li>独立于数据库. 你可以用Oracle活着SQLServer来替换Mongo, BigTable, CouchDB或者其他的. 你的业务规则没有与数据库绑定.</li><li>独立于任何外部机构. 实际上就是让你的业务规则简单的不知道任何除自己之外的东西.</li></ol><p>本文顶部的图片是尝试将所以这些架构继承到一个可操作的想法中.<br><a id="more"></a> </p><h3 id="依赖规则"><a href="#依赖规则" class="headerlink" title="依赖规则"></a>依赖规则</h3><p>图片中的同心圆代表着软件的不同区域. 通常来讲, 离中心点越远, 软件的层级就越高. 外圈是机制, 内圈是政策.<br>使这个架构生效的首页规则就是<em>依赖规则</em>. 这个规则阐明了源代码的依赖只能由外圈指向内圈. 内圈并不能知道外圈的任何事情. 尤其要是注意的是, 声明在外圈的某物不可以在内圈中提及. 这包括函数, 类, 变量或者其他软件中的被命名的实体.</p><h3 id="实体层"><a href="#实体层" class="headerlink" title="实体层"></a>实体层</h3><p>实体封装了企业间的业务规则. 一个实体可以是一个有方法的对象, 一个数据结构体的集合或者是函数. 只要实体可以被企业中的血多不同应用程序使用, 其他的都无关紧要.<br>如果你没有企业, 并且你仅仅只写了一个简单的app, 那么这些实体指的就是你app中的业务对象. 他们封装了最通用最高级的规则. 当外部规则改变时, 它们是最不可能发生改变的. 例如, 你不会期望这些对象们随着页面导航或者安全性的改变而改变. 任何特定的应用程序操作更改都不应该影响到实体层.</p><h3 id="用例层"><a href="#用例层" class="headerlink" title="用例层"></a>用例层</h3><p>软件中的这一层包括了app特定的业务规则. 它封装并且实现了系统中的所有用例. 这些用例协调了从实体层来的数据流, 并且只是这些实体用它们的企业级业务规则来实现用例的目标.<br>我们不希望改变这一层, 导致影响其他层. 我们也不期望这一层会被任何其他外部的改变, 如数据库, UI, 或者其他人么通用框架所影响. 这一层是独立的.</p><p>然而我们确实希望改变程序的操作会影响用例从而影响软件中的这一层. 如果用例的细节发生改变, 那么这一层肯定会被影响.</p><h3 id="接口适配层"><a href="#接口适配层" class="headerlink" title="接口适配层"></a>接口适配层</h3><p>软件中的这一层是一个将用例或者实体的从一个最方便格式的数据转换成一个适用于如数据库或者网页的外部机构的最简便格式的适配器的集合. 例如, 这一层将会完整的包含GUI中MVC的架构. <code>Presenters</code>, <code>Views</code>, and <code>Controllers</code>就是属于这的. 由可能仅仅是某种数据结构的模型通过<code>Controllers</code>传递到用例层, 然后再通过用力层回调给<code>Presents</code>和<code>Views</code>.<br>相似的, 数据也是在这层从一个最简便的形式的实体或用例被转换成了一个适用于任何持久性框架(如数据库)的最简便的格式. 此层中的任何代码都不应知道关于数据库的任何事情. 如果数据库是SQL 数据库, 那么所有的SQL操作都应该在这层被限制, 更不能直接操作数据库.<br>此层中还包括将外层数据格式(如外部服务)转换成用例和实体使用的内层格式的任何其他适配器.</p><h3 id="框架和驱动"><a href="#框架和驱动" class="headerlink" title="框架和驱动"></a>框架和驱动</h3><p>最外层通常由框架和工具组成，例如数据库，Web框架等。通常，除了与下一层内部通信的粘合代码之外，您不会在此层中编写太多代码.<br>这层是所有的细节实现所在. 网络是细节, 数据库是鞋机. 我们将这些东西放在最外层, 以确保变动他们的时候造成的伤害最小.</p><h3 id="只有4层"><a href="#只有4层" class="headerlink" title="只有4层?"></a>只有4层?</h3><p>并非如此, 这些层只是一些概要. 你可以发现你所需要的会超过这四层. 这也没有规定必须只有四层. 然而, <em>依赖规则</em> 总是适用. 源代码依赖总是自外向内. 最外层是最低等级的具体细节实现. 随着你向内移动，软件变得更加抽象，并封装了更高级别的策略. 最内层是最抽象通用的.</p><h3 id="跨越边界"><a href="#跨越边界" class="headerlink" title="跨越边界"></a>跨越边界</h3><p>图的右下方是我们如何跨越层级边界的实例. 它展示了在下一层中<code>Controllers</code>和<code>Presenters</code>通过<code>Use Cases</code>是如何交流的. 注意这个控制流. 它开始于<code>controller</code>中,然后穿过<code>use case</code>,再然后在<code>presenter</code>的<code>executing</code>中结束.同时也注意源代码的依赖. 它们中的每一个都指向了<code>Use Cases层</code>.<br>我们通常通过使用依赖倒置原则来解决这些明显的矛盾. 在一些语音中, 如Java语言, 我们可以安排好接口和继承关系, 使得源代码依赖性反对跨越边界的正确点处的控制流.</p><p>例如, 思考这种情况, 用例需要调用<code>presenter</code>.然而, 这个回调肯定不能被分发因为这违反了<em>依赖规则</em>.<br>例如, 许多数据库框架在一次查询中会返回包含一个便捷数据格式的响应. 我们称之为<code>RowStructure</code>. 我们并非是想向内传递一个<code>row structure</code>. 这将违反了<em>依赖规则</em>, 因为它将强制内层得知外层的某些事情.<br>所以我们会传递一个数据来跨越边界, 我们会使用对内层来讲最方便的形式.</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>遵守这些简单的规则并不难, 而且这将会省去很多令你头疼的问题. 通过将软件分成多个层，并符合<code>依赖规则</code>，您将创建一个本质上可测试，并具有潜在的所有好处的系统. 当系统挖外部的一部分变得过时时(如数据库, 网络框架), 你可以最小粒度的替换它们.</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm&quot;&gt;&lt;a href=&quot;#Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Algorithm&quot;&gt;&lt;/a&gt;Algorithm&lt;/h2&gt;&lt;h2 id=&quot;The-Clean-Code-Blog&quot;&gt;&lt;a href=&quot;#The-Clean-Code-Blog&quot; class=&quot;headerlink&quot; title=&quot;The Clean Code Blog&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Clean Code Blog&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg&quot; alt=&quot;clean architecture&quot;&gt;&lt;/p&gt;
&lt;p&gt;在过去几年中, 我们已经看到了关于系统架构方面的一系列想法. 它们包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hexagonal Architecture (俗称Ports and Adapters) by Alistair Cockburn and adopted by Steve Freeman, and Nat Pryce in their wonderful book Growing Object Oriented Software&lt;/li&gt;
&lt;li&gt;Onion Architecture by Jeffrey Palermo&lt;/li&gt;
&lt;li&gt;Screaming Architecture from a blog of mine last year&lt;/li&gt;
&lt;li&gt;DCI from James Coplien, and Trygve Reenskaug.&lt;/li&gt;
&lt;li&gt;BCE by Ivar Jacobson from his book Object Oriented Software Engineering: A Use-Case Driven Approach&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然这些架构在一些细节中有很多不同, 但是它们还是非常相似的.它们都有同一个目标–对于关注点的分离. 它们都通过将软件分层来实现分离. 每一个都至少有一个层级用于业务规则, 另一个则关于接口.&lt;br&gt;每一个架构都满足:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;独立于任何框架. 该架构不应该依赖于任何已经存在的功能丰富的软件的一些库. 这将允许你把框架当做工具来使用, 而不用强制的将自己的系统塞进有限的约束中.&lt;/li&gt;
&lt;li&gt;测试友好. 业务规则可以在脱离UI、数据库、网页服务或者任何其他外部元素的情况下进行测试.&lt;/li&gt;
&lt;li&gt;独立于UI. UI的改变可以很容易, 而不用改变除系统中UI之外的剩余东西. 例如, 一个网页UI可以在不改变业务规则的情况下被一个控制台UI所代替.&lt;/li&gt;
&lt;li&gt;独立于数据库. 你可以用Oracle活着SQLServer来替换Mongo, BigTable, CouchDB或者其他的. 你的业务规则没有与数据库绑定.&lt;/li&gt;
&lt;li&gt;独立于任何外部机构. 实际上就是让你的业务规则简单的不知道任何除自己之外的东西.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本文顶部的图片是尝试将所以这些架构继承到一个可操作的想法中.&lt;br&gt;
    
    </summary>
    
    
    
      <category term="ARTS" scheme="http://yoursite.com/tags/ARTS/"/>
    
  </entry>
  
  <entry>
    <title>ARTS Week 3</title>
    <link href="http://yoursite.com/2019/04/08/ARTS-Week-3/"/>
    <id>http://yoursite.com/2019/04/08/ARTS-Week-3/</id>
    <published>2019-04-08T15:24:45.000Z</published>
    <updated>2019-09-15T14:13:24.063Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://savvyapps.com/uploads/blog/_1920xAUTO_crop_center-center_82_none/2015.06__Auto_Renewable_Subscriptions.jpg" alt="https://savvyapps.com/uploads/blog/_1920xAUTO_crop_center-center_82_none/2015.06__Auto_Renewable_Subscriptions.jpg"></p><h2 id="Algorithm-NO-237-Delete-Node-in-a-Linked-List"><a href="#Algorithm-NO-237-Delete-Node-in-a-Linked-List" class="headerlink" title="Algorithm: NO.237 Delete Node in a Linked List"></a>Algorithm: <a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/" target="_blank" rel="noopener">NO.237 Delete Node in a Linked List</a></h2><p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p><p>Given linked list – head = [4,5,1,9], which looks like following:</p><p><img src="https://assets.leetcode.com/uploads/2018/12/28/237_example.png" alt="https://assets.leetcode.com/uploads/2018/12/28/237_example.png"></p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [4,5,1,9], node = 5</span><br><span class="line">Output: [4,1,9]</span><br><span class="line">Explanation: You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [4,5,1,9], node = 1</span><br><span class="line">Output: [4,5,9]</span><br><span class="line">Explanation: You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.</span><br></pre></td></tr></table></figure></p><p><strong>Note:</strong></p><ul><li>The linked list will have at least two elements.</li><li>All of the nodes’ values will be unique.</li><li>The given node will not be the tail and it will always be a valid node of the linked list.</li><li>Do not return anything from your function.<a id="more"></a> <strong>解答</strong>:<br>这道题比较巧妙的地方就在于函数只被传入一个参数, 且传入的就是要被<em>删除</em>的<code>node</code>, 所以需要转化下思路.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        node.val = node.next.val;</span><br><span class="line">        node.next = node.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Review-Getting-Started-with-Auto-renewable-Subscriptions-in-iOS"><a href="#Review-Getting-Started-with-Auto-renewable-Subscriptions-in-iOS" class="headerlink" title="Review Getting Started with Auto-renewable Subscriptions in iOS"></a>Review <a href="https://savvyapps.com/blog/getting-started-with-auto-renewable-subscriptions-in-ios/" target="_blank" rel="noopener">Getting Started with Auto-renewable Subscriptions in iOS</a></h2><p>自动续订订阅是iOS IAP体系内的一个分支, 它允许app在一定时间内提供内容或功能并对其收费. 这种类型的内购产品类型将超越IAP中的对于消耗品和非消耗品的一次性消费和低频消费的购买模式所产生的经济效益, 并以此来扩展app的潜在收益. 通过之前为自己的多个app实现过几次, 我们注意到他们无法满足你对苹果的期望, 在基于订阅体系的app模式, 他们无法提供足够完成和有效的解决方案.</p><h3 id="使用自动续订订阅的标准"><a href="#使用自动续订订阅的标准" class="headerlink" title="使用自动续订订阅的标准"></a>使用自动续订订阅的标准</h3><p>使用自动续订订阅的app可以在规定时间内(例如,每月,每年等等)收取长期费用. 自动续订订阅与IAP体系中其他不能提供带有时间性质的产品所不同. 它们提供了额外的好处, 即无需进一步干预即可为用户收取订阅费用.</p><p><img src="https://savvyapps.com/wp-content/uploads/2015/06/Screen-Shot-2015-06-11-at-1.14.37-PM.png" alt="https://savvyapps.com/wp-content/uploads/2015/06/Screen-Shot-2015-06-11-at-1.14.37-PM.png"></p><p>Apple将其不同类型的应用内购买成为”产品”. 有关其应用内购买产品(消耗性, 非消耗性和自动续订订阅)之间的基本差异, 请考虑这些示例. 一个消耗性的的产品,可能是游戏app中一个小时的经验提升的增益效果. 另一方面, 一个非消耗性产品可以是采取解锁主题的形式展示, 因为它可能在以后再次恢复.<br>从历史角度来看, 如果报刊应用程序和出版物只是下发基础性的内容而不是提供额外的功能的访问, 那么苹果会限制这类产品使用自动续订订阅系统. 这在iTunes Connect中的自动续订订阅的设置(例如需要提供一个”publication”名称)过程中仍然很明显. 这些年来, Apple放宽了这一限制, 并允许非报停应用程序加入自动续订订阅的潮流. 自动续订订阅现在更多的是用于生产力和业务应用的程序中. 例如, 在任务管理app Omnifocus中, 如果用户已经超期了14天的免费使用, 那么便会向用户收取双层订阅费用. 甚至像一款 脑力开发的app Lumosity, 提供一个免费的基本会员资格, 并使用自动续订订阅来解锁高级功能. 这个app同时也提供独立或者朋友和家庭订阅计划.  </p><h3 id="创建一个自动续订订阅"><a href="#创建一个自动续订订阅" class="headerlink" title="创建一个自动续订订阅"></a>创建一个自动续订订阅</h3><p>创建自动续订订阅的第一步与创建其他IAP产品并没有多少不同. 你会遇到的主要的不同就是你需要配置商品的自动续订周期时间(如 按月, 按年 等)和提供免费试用. 与此同时, 免费试用是回被限制在很少几个的时间段里, 并且它并不是动态的. 如果你想要要求超出选项提供的免费周期时间或者你想要提供不同的试用等级, 那么非常推荐你忽略这些选项并且手动处理. 当用户同意提供他们的详细信息(名字, 邮箱, 地址)时, 开发者也可以提供免费试用时间.</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>如果在<code>UIScrollview</code>中使用<code>Autolayout</code>对其子控件进行布局时, 需要注意以下两点:</p><ol><li>ScrollView内部子控件的尺寸不能以scrollView的尺寸为参照</li><li>ScrollView内部的子控件的约束必须完整</li></ol><p>首先,子控件的尺寸不能以ScrollView的尺寸为参照,那么我们有两种选择:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">提供一个具体值的约束(比如200)</span><br><span class="line">子控件的尺寸可以参照ScrollView以外其它的控件的尺寸(如控制器的view的尺寸)</span><br></pre></td></tr></table></figure></p><p>其次,约束”完整”的意思是说:子控件在水平及竖直方向上的约束要把<code>ScrollView</code>”撑满”.</p><p>也就是说,在水平方向上,我们需要设置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">子控件左侧与父控件的距离</span><br><span class="line">子控件自身的宽度</span><br><span class="line">子控件右侧距父控件的距离.</span><br></pre></td></tr></table></figure></p><p>竖直方向上也一样,要设置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">子控件顶部距父控件的距离</span><br><span class="line">子控件的高度</span><br><span class="line">子控件底部距父控件的距离.</span><br></pre></td></tr></table></figure></p><h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p>分享一篇关于IAP自动续订订阅的定价策略的决策  <a href="https://technologytw.com/2019/02/9777/" target="_blank" rel="noopener">WWDC 2018：IAP最佳實踐並增強活動營銷功能</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://savvyapps.com/uploads/blog/_1920xAUTO_crop_center-center_82_none/2015.06__Auto_Renewable_Subscriptions.jpg&quot; alt=&quot;https://savvyapps.com/uploads/blog/_1920xAUTO_crop_center-center_82_none/2015.06__Auto_Renewable_Subscriptions.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Algorithm-NO-237-Delete-Node-in-a-Linked-List&quot;&gt;&lt;a href=&quot;#Algorithm-NO-237-Delete-Node-in-a-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;Algorithm: NO.237 Delete Node in a Linked List&quot;&gt;&lt;/a&gt;Algorithm: &lt;a href=&quot;https://leetcode-cn.com/problems/delete-node-in-a-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NO.237 Delete Node in a Linked List&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.&lt;/p&gt;
&lt;p&gt;Given linked list – head = [4,5,1,9], which looks like following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2018/12/28/237_example.png&quot; alt=&quot;https://assets.leetcode.com/uploads/2018/12/28/237_example.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: head = [4,5,1,9], node = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [4,1,9]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: You are given the second node with value 5, the linked list should become 4 -&amp;gt; 1 -&amp;gt; 9 after calling your function.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: head = [4,5,1,9], node = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [4,5,9]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: You are given the third node with value 1, the linked list should become 4 -&amp;gt; 5 -&amp;gt; 9 after calling your function.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The linked list will have at least two elements.&lt;/li&gt;
&lt;li&gt;All of the nodes’ values will be unique.&lt;/li&gt;
&lt;li&gt;The given node will not be the tail and it will always be a valid node of the linked list.&lt;/li&gt;
&lt;li&gt;Do not return anything from your function.
    
    </summary>
    
    
    
      <category term="ARTS" scheme="http://yoursite.com/tags/ARTS/"/>
    
  </entry>
  
  <entry>
    <title>ARTS Week 2</title>
    <link href="http://yoursite.com/2019/04/01/ARTS-Week-2/"/>
    <id>http://yoursite.com/2019/04/01/ARTS-Week-2/</id>
    <published>2019-04-01T09:16:38.000Z</published>
    <updated>2019-09-15T14:13:17.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><h3 id="No-3-Longest-Substring-Without-Repeating-Characters"><a href="#No-3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="No.3 Longest Substring Without Repeating Characters"></a>No.3 Longest Substring Without Repeating Characters</h3><p>Given a string, find the length of the longest substring without repeating characters.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;abcabcbb&quot;</span><br><span class="line">Output: 3 </span><br><span class="line">Explanation: The answer is &quot;abc&quot;, with the length of 3.</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;bbbbb&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The answer is &quot;b&quot;, with the length of 1.</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;pwwkew&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;wke&quot;, with the length of 3. </span><br><span class="line">             Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure></p><a id="more"></a> <p>解答:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">map</span> = [<span class="type">Character</span>: <span class="type">Int</span>](), i = <span class="number">0</span>, j = <span class="number">0</span>, longest = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> sChars = <span class="type">Array</span>(s)</span><br><span class="line">        <span class="keyword">while</span> j &lt; sChars.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="built_in">c</span> = sChars[j]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> index = <span class="built_in">map</span>[<span class="built_in">c</span>] &#123;</span><br><span class="line">                <span class="comment">// 1.滑动窗口</span></span><br><span class="line">                i = <span class="built_in">max</span>(i, index)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.</span></span><br><span class="line">            longest = <span class="built_in">max</span>(longest, j - i + <span class="number">1</span>)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            <span class="comment">// 在j+=1之后在存到map中, 以及在2.处计算的 + 1, 是为了兼容 string长度为1的字符串</span></span><br><span class="line">            <span class="built_in">map</span>[<span class="built_in">c</span>] = j</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> longest</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>小记:<br>为什么在上面代码中 <strong>1</strong> 处要使用max运算选出最大值, 而不是直接将<code>index</code>赋值给<code>i</code>?<br>答: 直接将<code>index</code>赋值给<code>i</code>会导致处理类似<code>abba</code>这种情况出错.</p><h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><h3 id="Swift-Playgrounds-in-Depth-Part-Two"><a href="#Swift-Playgrounds-in-Depth-Part-Two" class="headerlink" title="Swift Playgrounds in Depth(Part Two)"></a>Swift Playgrounds in Depth(Part Two)</h3><p>原文: <a href="https://www.raywenderlich.com/4345-swift-playgrounds-in-depth" target="_blank" rel="noopener">https://www.raywenderlich.com/4345-swift-playgrounds-in-depth</a></p><p>第二部分主要是讲Playground在项目中的应用.</p><h3 id="AttributedStrings-xcworkspace"><a href="#AttributedStrings-xcworkspace" class="headerlink" title="AttributedStrings.xcworkspace"></a>AttributedStrings.xcworkspace</h3><p>在项目中 直接添加一个playground文件(在Xcode10.1中,选中目录Command+N 新建文件 往下拉就可以找到新建Playground一栏)即可.<br>添加完就可以直接引用所有包含的框架, 也可以进行进一步的测试.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> BonMot</span><br><span class="line"><span class="keyword">import</span> TextAttributes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">attributedStringWithBonMot</span><span class="params">(<span class="number">_</span> inputString: String)</span></span> -&gt; <span class="type">NSAttributedString</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> style = <span class="type">StringStyle</span>(</span><br><span class="line">        .color(.blue),</span><br><span class="line">        .font(<span class="type">UIFont</span>(name: <span class="string">"AmericanTypewriter"</span>, size: <span class="number">24</span>)!)</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> inputString.styled(with: style)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">attributedStringWithBonMot(<span class="string">"Hellow BonMot"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">attributedStringWithTextAttributes</span><span class="params">(<span class="number">_</span> inputString: String)</span></span> -&gt; <span class="type">NSAttributedString</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> attributes = <span class="type">TextAttributes</span>()</span><br><span class="line">        .font(name: <span class="string">"ChalkboardSE-Bold"</span>, size: <span class="number">24</span>)</span><br><span class="line">        .foregroundColor(.red)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="type">NSAttributedString</span>(string: inputString, attributes: attributes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributedStringWithTextAttributes(<span class="string">"Hello TextAttributes"</span>)</span><br></pre></td></tr></table></figure><h3 id="ConverterApp"><a href="#ConverterApp" class="headerlink" title="ConverterApp"></a>ConverterApp</h3><p>在这个项目中, 对文件移动不同target进行了一些实践, 需要注意的是 在目前版本的Xcode(10.1)下, 直接移动普通文件(.swift)到另一个target的目录下, 会直接修改该文件所绑定的target, 但是对.xib文件而言, Xcode不会不会自动修改, 需要我们手动修改<br>修改完编译, 会提示以下信息:    </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Could</span> not <span class="built_in">find</span> a storyboard named '<span class="type">Temperature'</span> <span class="keyword">in</span> bundle <span class="type">NSBundle</span> ...</span><br></pre></td></tr></table></figure><p>这是因为移动过后的xib文件就不在<code>main bundle</code>中了, 还需要对之前的引用进行修改</p><p><img src="http://ww1.sinaimg.cn/large/6b523ad1ly1g2342psnlrj20s70a4768.jpg" alt></p><p>在playground中使用这个viewcontroller  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> frameworkBundle = <span class="type">Bundle</span>(identifier: <span class="string">"com.razeware.ConverterKit"</span>)</span><br><span class="line"><span class="keyword">let</span> storyboard = <span class="type">UIStoryboard</span>(name: <span class="string">"Temperature"</span>, bundle:</span><br><span class="line">frameworkBundle)</span><br><span class="line"><span class="keyword">let</span> viewController = storyboard.instantiateInitialViewController()!</span><br><span class="line"><span class="comment">// 展示</span></span><br><span class="line">viewController.view</span><br></pre></td></tr></table></figure><p>注意 在playground中 instantiate一个控制器会默认将其设置为 768 * 1024的尺寸<br><img src="http://ww1.sinaimg.cn/large/6b523ad1ly1g235uk7ay5j213w078t9o.jpg" alt></p><p>为了解决这个尺寸问题, 直接修改<code>frame</code>是不起作用的, 我们应该讲<code>live view</code> 直接设置为  <code>viewcontroller</code><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PlaygroundPage</span>.current.liveView = viewController</span><br></pre></td></tr></table></figure></p><p>苹果文档里给出了可以这么操作的缘由<br><img src="http://ww1.sinaimg.cn/large/6b523ad1ly1g236rgs4yzj20vu05ttbw.jpg" alt></p><p>同时, 在xib中选中了什么设备/机型 此处就会显示对应的尺寸.</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>页内锚点链接实现:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[title](#41)</span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"41"</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。</span><br><span class="line"></span><br><span class="line">如果目标是标题类型(#前缀), 还可以直接使用</span><br><span class="line">[描述](#标题内容)来直接跳转.</span><br></pre></td></tr></table></figure></p><p>试一下:<br><a href="#Algorithm">跳转到Algorithm</a></p><h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p><a href="http://dart.goodev.org/guides/language/effective-dart/design#null" target="_blank" rel="noopener">Effective Dart: API 设计</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm&quot;&gt;&lt;a href=&quot;#Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Algorithm&quot;&gt;&lt;/a&gt;Algorithm&lt;/h2&gt;&lt;h3 id=&quot;No-3-Longest-Substring-Without-Repeating-Characters&quot;&gt;&lt;a href=&quot;#No-3-Longest-Substring-Without-Repeating-Characters&quot; class=&quot;headerlink&quot; title=&quot;No.3 Longest Substring Without Repeating Characters&quot;&gt;&lt;/a&gt;No.3 Longest Substring Without Repeating Characters&lt;/h3&gt;&lt;p&gt;Given a string, find the length of the longest substring without repeating characters.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: &amp;quot;abcabcbb&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 3 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: The answer is &amp;quot;abc&amp;quot;, with the length of 3.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Example 2:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: &amp;quot;bbbbb&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: The answer is &amp;quot;b&amp;quot;, with the length of 1.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Example 3:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: &amp;quot;pwwkew&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: The answer is &amp;quot;wke&amp;quot;, with the length of 3. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             Note that the answer must be a substring, &amp;quot;pwke&amp;quot; is a subsequence and not a substring.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ARTS" scheme="http://yoursite.com/tags/ARTS/"/>
    
  </entry>
  
  <entry>
    <title>ARTS Week 1</title>
    <link href="http://yoursite.com/2019/03/26/ARTS-Week-1/"/>
    <id>http://yoursite.com/2019/03/26/ARTS-Week-1/</id>
    <published>2019-03-26T09:09:02.000Z</published>
    <updated>2019-09-15T14:13:11.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><h3 id="No-2-Add-Two-Numbers"><a href="#No-2-Add-Two-Numbers" class="headerlink" title="No.2: Add Two Numbers"></a>No.2: Add Two Numbers</h3><p>原题:<br>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 0 -&gt; 8</span><br><span class="line">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure></p><a id="more"></a> <p>解答:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> val: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> next: <span class="type">ListNode?</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> val: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.val = val</span><br><span class="line">        <span class="keyword">self</span>.next = <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(<span class="number">_</span> l1: ListNode?, <span class="number">_</span> l2: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> carry = <span class="number">0</span>, p = l1, q = l2</span><br><span class="line">        <span class="keyword">var</span> dummy = <span class="type">ListNode</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">var</span> node = dummy</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> || q != <span class="literal">nil</span> &#123;</span><br><span class="line">            carry += p?.val ?? <span class="number">0</span></span><br><span class="line">            carry += q?.val ?? <span class="number">0</span></span><br><span class="line">            node.next = <span class="type">ListNode</span>.<span class="keyword">init</span>(carry % <span class="number">10</span>)</span><br><span class="line">            node = node.next!</span><br><span class="line">            carry = carry / <span class="number">10</span></span><br><span class="line">            p = p?.next</span><br><span class="line">            q = q?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> carry &gt; <span class="number">0</span> &#123;</span><br><span class="line">            node.next = <span class="type">ListNode</span>.<span class="keyword">init</span>(carry)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><h3 id="Swift-Playgrounds-in-Depth-Part-One"><a href="#Swift-Playgrounds-in-Depth-Part-One" class="headerlink" title="Swift Playgrounds in Depth(Part One)"></a>Swift Playgrounds in Depth(Part One)</h3><p>原文: <a href="https://www.raywenderlich.com/4345-swift-playgrounds-in-depth" target="_blank" rel="noopener">https://www.raywenderlich.com/4345-swift-playgrounds-in-depth</a></p><p>这篇文章讲述了一些基础性的playground使用技巧,部分已失效, 但总体还是不错的, 用来查漏补缺, 总结了以下技巧.</p><h3 id="LiveViews-playground"><a href="#LiveViews-playground" class="headerlink" title="LiveViews.playground"></a>LiveViews.playground</h3><h4 id="Playground-Page-Basic-Live-View"><a href="#Playground-Page-Basic-Live-View" class="headerlink" title="Playground Page: Basic Live View"></a>Playground Page: Basic Live View</h4><p>liveView的使用:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PlaygroundSupport</span><br><span class="line"></span><br><span class="line"><span class="type">PlaygroundPage</span>.current.liveView = view</span><br></pre></td></tr></table></figure></p><p>打开<strong>Assistant editor(⌥⌘Enter)</strong>就可以看到实时视图.</p><h3 id="IndefiniteExecution-playground"><a href="#IndefiniteExecution-playground" class="headerlink" title="IndefiniteExecution.playground"></a>IndefiniteExecution.playground</h3><h4 id="Playground-Page-Spring-Animation"><a href="#Playground-Page-Spring-Animation" class="headerlink" title="Playground Page: Spring Animation"></a>Playground Page: Spring Animation</h4><p>调用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PlaygroundPage</span>.current.finishExecution()</span><br></pre></td></tr></table></figure></p><p>就会直接停止执行当前页面.</p><h4 id="Playground-Page-PlaygroundLiveViewable"><a href="#Playground-Page-PlaygroundLiveViewable" class="headerlink" title="Playground Page: PlaygroundLiveViewable"></a>Playground Page: PlaygroundLiveViewable</h4><p>遵守并实现<code>PlaygroundLiveViewable</code>的对象就可以被设置成为<code>PlaygroundPage.current.liveView</code></p><h4 id="IndefiniteExecution-playground-1"><a href="#IndefiniteExecution-playground-1" class="headerlink" title="IndefiniteExecution.playground"></a>IndefiniteExecution.playground</h4><p>通过<code>PlaygroundPage.current.needsIndefiniteExecution = true</code>来手动接管page的终止.<br>在使用<code>PlaygroundPage.current.finishExecution()</code>来手动停止page. <em>注意,在当前版本的playground中(Xcode Version 10.1 (10B61))已经支持GCD的处理</em>.</p><h3 id="SharedPlaygroundData-playground"><a href="#SharedPlaygroundData-playground" class="headerlink" title="SharedPlaygroundData.playground"></a>SharedPlaygroundData.playground</h3><h4 id="Playground-Page-Writing-to-a-File"><a href="#Playground-Page-Writing-to-a-File" class="headerlink" title="Playground Page: Writing to a File"></a>Playground Page: Writing to a File</h4><p>playgrounds直接写文件会报错误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Write Error: You don’t have permission to save the file</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you can only write to the ~/Documents/ Shared Playground Data folder that is accessible via the playgroundSharedDataDirectory global variable in the PlaygroundSupport module.</span><br></pre></td></tr></table></figure><p>在写入前, 先确保该文件夹已经存在,否则:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/Documents/Shared\ Playground\ Data</span><br></pre></td></tr></table></figure></p><p>然后<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> fileURL =</span><br><span class="line">playgroundSharedDataDirectory.appendingPathComponent(filename)</span><br></pre></td></tr></table></figure></p><h4 id="Playground-Page-Reading-from-a-File"><a href="#Playground-Page-Reading-from-a-File" class="headerlink" title="Playground Page: Reading from a File"></a>Playground Page: Reading from a File</h4><p><strong>#fileLiteral(resourceName: “CoreImageFilterNames.txt”)</strong> 拖到项目中后便可使用这个字面量加载文件(已失效).</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>Xcode10目前已经不支持直接使用<strong>Assets</strong>中素材的名字来直接创建<strong>Image Literal</strong>了, 现在可行的方案是先敲出<code>Image</code>在自动联想出<code>Image Literal</code>, 然后使用, 再点击出现的占位图选中自己想使用的素材, 比之前的麻烦了好多.</p><h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p>Flutter越来越火了, 作为Native开发人员, 我觉得首先要巩固自己的护城河, 将Native 和 计算机的基础知识打牢, 然后在以开放的态度面对新技术. 同时, 在学习的时候应该多实践, 没有业务需求上的匹配, 就强制让自己造简单轮子学习.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Algorithm&quot;&gt;&lt;a href=&quot;#Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Algorithm&quot;&gt;&lt;/a&gt;Algorithm&lt;/h2&gt;&lt;h3 id=&quot;No-2-Add-Two-Numbers&quot;&gt;&lt;a href=&quot;#No-2-Add-Two-Numbers&quot; class=&quot;headerlink&quot; title=&quot;No.2: Add Two Numbers&quot;&gt;&lt;/a&gt;No.2: Add Two Numbers&lt;/h3&gt;&lt;p&gt;原题:&lt;br&gt;You are given two &lt;strong&gt;non-empty&lt;/strong&gt; linked lists representing two non-negative integers. The digits are stored in &lt;strong&gt;reverse order&lt;/strong&gt; and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.&lt;/p&gt;
&lt;p&gt;You may assume the two numbers do not contain any leading zero, except the number 0 itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 7 -&amp;gt; 0 -&amp;gt; 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: 342 + 465 = 807.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ARTS" scheme="http://yoursite.com/tags/ARTS/"/>
    
  </entry>
  
  <entry>
    <title>OC与Swift混编项目迁移到Swift4.2小记</title>
    <link href="http://yoursite.com/2019/02/27/OC%E4%B8%8ESwift%E6%B7%B7%E7%BC%96%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0Swift4-2%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/27/OC%E4%B8%8ESwift%E6%B7%B7%E7%BC%96%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0Swift4-2%E5%B0%8F%E8%AE%B0/</id>
    <published>2019-02-27T03:55:21.000Z</published>
    <updated>2019-09-15T14:14:00.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从<code>Xcode10</code>正式版发布之后, 先吃螃蟹的朋友赞叹了<code>Dark Mode</code>的惊艳, 同时也报告说, 打包上传到<code>APPStroe</code>后, 监测到线上 <code>iOS9.3</code>设备大面积crash的记录, 最后被证实是<code>Xcode10</code>的问题.</p><p>出于此原因考虑, 我便一直在使用<code>Xcode9.4.1</code> 及 <code>Swift4</code>进行混编项目的开发.</p><p>然而每每使用低版本的<code>Xcode</code>打包上传<code>APPStore</code>时, 就会收到苹果的官方警告邮件<br><img src="https://user-gold-cdn.xitu.io/2019/2/28/16932d4ffc2a6e6d?w=1824&amp;h=952&amp;f=jpeg&amp;s=255722" alt></p><p>如邮件内容所示, 到<code>2019</code>年的<code>3</code>月份便不可以再使用低版本<code>Xcode</code>进行打包上传操作了. </p><p>于是, 我只好开始了迁移之路.<br><a id="more"></a> </p><h2 id="开始迁移"><a href="#开始迁移" class="headerlink" title="开始迁移"></a>开始迁移</h2><p>使用当前 <code>Xcode10.1(10B61)</code>打开之后, 在<code>Build Setting</code>中搜索 <code>Swift Language Version</code>, 将对应的值改为<code>Swift 4.2</code>,然后开始编译, 此时会出现非常多的<code>Error</code>, 多为<code>ABI</code>的变动, 根据提示进行修改即可.</p><h3 id="AVAudioSession的更改"><a href="#AVAudioSession的更改" class="headerlink" title="AVAudioSession的更改"></a>AVAudioSession的更改</h3><p>然而有一处例外:<br>当项目中通过<code>Swift</code>使用了 <code>AVAudioSession  setCategory</code>这个方法时, 会被告知方法在<code>Swift</code>中不可用.跳转才发现 <code>API</code>已经变化成了<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* set session category and mode with options */</span></span><br><span class="line">    <span class="meta">@available</span>(iOS <span class="number">10.0</span>, *)</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">setCategory</span><span class="params">(<span class="number">_</span> category: AVAudioSession.Category, mode: AVAudioSession.Mode, options: AVAudioSession.CategoryOptions = [])</span></span> <span class="keyword">throws</span></span><br></pre></td></tr></table></figure></p><p>为了兼容低版本, 思来想去, 比较合适的方案就是使用OC编写一个<code>AVAudioSession</code>的分类用来桥接:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AVAudioSession+Swift.h:</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> AVFoundation;</span><br><span class="line"></span><br><span class="line"><span class="type">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line">@interface <span class="type">AVAudioSession</span> (<span class="type">Swift</span>)</span><br><span class="line"></span><br><span class="line">- (<span class="type">BOOL</span>)swift_setCategory:(<span class="type">AVAudioSessionCategory</span>)category error:(<span class="type">NSError</span> **)outError <span class="type">NS_SWIFT_NAME</span>(setCategory(<span class="number">_</span>:));</span><br><span class="line">- (<span class="type">BOOL</span>)swift_setCategory:(<span class="type">AVAudioSessionCategory</span>)category withOptions:(<span class="type">AVAudioSessionCategoryOptions</span>)options error:(<span class="type">NSError</span> **)outError <span class="type">NS_SWIFT_NAME</span>(setCategory(<span class="number">_</span>:options:));</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"><span class="type">NS_ASSUME_NONNULL_END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AVAudioSession+Swift.m:</span></span><br><span class="line"></span><br><span class="line">#<span class="keyword">import</span> "AVAudioSession+Swift.h"</span><br><span class="line"></span><br><span class="line">@implementation <span class="type">AVAudioSession</span> (<span class="type">Swift</span>)</span><br><span class="line"></span><br><span class="line">- (<span class="type">BOOL</span>)swift_setCategory:(<span class="type">AVAudioSessionCategory</span>)category error:(<span class="type">NSError</span> **)outError &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> setCategory:category error:outError];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">BOOL</span>)swift_setCategory:(<span class="type">AVAudioSessionCategory</span>)category withOptions:(<span class="type">AVAudioSessionCategoryOptions</span>)options error:(<span class="type">NSError</span> **)outError &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> setCategory:category withOptions:options error:outError];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>然后在你项目的<code>&lt;#target_name#&gt;-Bridging-Header.h</code>中<code>import</code>这个分类:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> "AVAudioSession+Swift.h"</span><br></pre></td></tr></table></figure></p><p>然后就可以像之前一样调用了.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> <span class="type">AVAudioSession</span>.sharedInstance().setCategory(.playback)</span><br></pre></td></tr></table></figure></p><h3 id="While-deserializing-SIL-vtable-for-‘Class’-in-module-‘module’-error-Abort-trap-6"><a href="#While-deserializing-SIL-vtable-for-‘Class’-in-module-‘module’-error-Abort-trap-6" class="headerlink" title="While deserializing SIL vtable for ‘Class’ in module ‘module’ error: Abort trap: 6"></a>While deserializing SIL vtable for ‘Class’ in module ‘module’ error: Abort trap: 6</h3><p>这类问题分两种, 一种是<code>module</code>是其他的<code>target</code>, 如<code>Pods</code>中的, 另一种是 <code>module</code>是自己的创建的<code>target</code>.</p><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>第一种 只需要将<code>Error</code>所指向的三方库更新到最新版本即可, <code>Xcode10</code>已经发布了快半年了, 这些问题之前也有, 半年的时间, 基本上流行的三方库都已经适配了<code>Swift4.2</code></p><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>而第二种比较棘手, 一般都是由于 <code>Error</code>中的<code>Class</code>所指向的类, 自己是<code>Swift</code>类, 但是却继承自<code>Objective-C</code>声明编写的类.<br>我在自己试过一些微调之后发现于事无补, 所以只好将出错的类使用<code>Objective-C</code>重写, 然后在桥接文件中引入, 好在报错的不多, 没用费太多力气.</p><h3 id="其他奇怪的错误"><a href="#其他奇怪的错误" class="headerlink" title="其他奇怪的错误"></a>其他奇怪的错误</h3><p>迁移完成后 项目跑起来时, 还会出现很多奇怪的问题.<br>比如调用了某个方法A 会报<code>unrecognize selector *</code>,<br>以及莫名的<code>函数调用</code>, 如:<br><img src="https://user-gold-cdn.xitu.io/2019/2/28/16932d4ffc35ee11?w=346&amp;h=182&amp;f=jpeg&amp;s=90288" alt><br>(setupNavibar函数中并没用调用任何初始化构造函数)<br>这类错误, 一般跟以上的俩种问题是一个本质, 需要自己仔细区别, 然后做出相应更新/更改即可.</p><p>除开以上的问题, 项目编译时还会在<code>Pods</code>引用的第三方的类中报ABI需要修改的<code>Error</code>, 这时, 只需要找到队形的<code>Target</code>, 在其<code>Build Settings</code>中修改 <code>Swift Language Version</code>为其对应版本即可.</p><h2 id="最后-希望将来适配Swift5时-不要有这么多坑了…"><a href="#最后-希望将来适配Swift5时-不要有这么多坑了…" class="headerlink" title="最后, 希望将来适配Swift5时, 不要有这么多坑了…"></a>最后, 希望将来适配Swift5时, 不要有这么多坑了…</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;自从&lt;code&gt;Xcode10&lt;/code&gt;正式版发布之后, 先吃螃蟹的朋友赞叹了&lt;code&gt;Dark Mode&lt;/code&gt;的惊艳, 同时也报告说, 打包上传到&lt;code&gt;APPStroe&lt;/code&gt;后, 监测到线上 &lt;code&gt;iOS9.3&lt;/code&gt;设备大面积crash的记录, 最后被证实是&lt;code&gt;Xcode10&lt;/code&gt;的问题.&lt;/p&gt;
&lt;p&gt;出于此原因考虑, 我便一直在使用&lt;code&gt;Xcode9.4.1&lt;/code&gt; 及 &lt;code&gt;Swift4&lt;/code&gt;进行混编项目的开发.&lt;/p&gt;
&lt;p&gt;然而每每使用低版本的&lt;code&gt;Xcode&lt;/code&gt;打包上传&lt;code&gt;APPStore&lt;/code&gt;时, 就会收到苹果的官方警告邮件&lt;br&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/2/28/16932d4ffc2a6e6d?w=1824&amp;amp;h=952&amp;amp;f=jpeg&amp;amp;s=255722&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;如邮件内容所示, 到&lt;code&gt;2019&lt;/code&gt;年的&lt;code&gt;3&lt;/code&gt;月份便不可以再使用低版本&lt;code&gt;Xcode&lt;/code&gt;进行打包上传操作了. &lt;/p&gt;
&lt;p&gt;于是, 我只好开始了迁移之路.&lt;br&gt;
    
    </summary>
    
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透及端口转发</title>
    <link href="http://yoursite.com/2018/07/17/%E5%9F%BA%E4%BA%8ESSH%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%8F%8A%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>http://yoursite.com/2018/07/17/%E5%9F%BA%E4%BA%8ESSH%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%8F%8A%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</id>
    <published>2018-07-17T09:23:09.000Z</published>
    <updated>2020-03-04T04:59:48.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上一篇文章中, 我介绍了<a href="http://blog.onekyle.com/2018/07/14/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0redmine" target="_blank" rel="noopener">如何通过docker搭建redmine项目管理平台</a>, 然而此时 redmine仅仅只能在内网上才能访问到, 接下来这篇就介绍下如何通过内网穿透和端口转发来让我们随心所欲的访问到.</p><h1 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h1><table><thead><tr><th style="text-align:left">机器代号</th><th style="text-align:left">机器描述</th><th style="text-align:left">账户</th><th style="text-align:left">地址</th><th style="text-align:center">ssh/sshd 端口</th></tr></thead><tbody><tr><td style="text-align:left">Server<span id="Server"></span></td><td style="text-align:left">公网服务器</td><td style="text-align:left">server</td><td style="text-align:left">server.site</td><td style="text-align:center">29245</td></tr><tr><td style="text-align:left">Base<span id="Base"></span></td><td style="text-align:left">个人电脑(位于NAT之后)</td><td style="text-align:left">userb</td><td style="text-align:left">127.0.0.1</td><td style="text-align:center">22</td></tr><tr><td style="text-align:left">Slave<span id="Slave"></span></td><td style="text-align:left">垫显示器的MacMini(位于NAT之后)</td><td style="text-align:left">users</td><td style="text-align:left">127.0.01</td><td style="text-align:center">22</td></tr></tbody></table><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>实现内网穿透及端口转发有很多手段途径, 下面我只介绍两种较简单和常用的.<br>一种是 基于 <a href="#ssh">SSH</a> 的<br>另一种是 基于 <a href="#frp">Frp</a> 的</p><a id="more"></a> <h2 id="基于SSH的内网穿透及端口转发"><a href="#基于SSH的内网穿透及端口转发" class="headerlink" title="基于SSH的内网穿透及端口转发"></a>基于SSH的内网穿透及端口转发</h2><p><span id="ssh"></span></p><h3 id="SSH反向隧道"><a href="#SSH反向隧道" class="headerlink" title="SSH反向隧道"></a>SSH反向隧道</h3><p>这种手段实质上是由<a href="#Slave">Slave</a>向Server主动建立一个SSH通道, 将Server的某一个端口转发到Slave的SSH端口(22)上.<br>我们以Server的54345端口为例进行转发:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ssh -fN -R 54345:localhost:22 server@server.site -p 29245</span><br><span class="line"># -f Requests ssh to go to background just before command execution.</span><br><span class="line">　　　　让该命令后台运行 .</span><br><span class="line"># -n Redirects stdin from /dev/null (actually, prevents reading from stdin).</span><br><span class="line"></span><br><span class="line"># -N Do not execute a remote command.</span><br><span class="line">　　　　不执行远程命令 .</span><br><span class="line"># -R 远程转发</span><br></pre></td></tr></table></figure><p>上面, 我们将Server的54345端口转发到了Slave的22端口上, 只要这个隧道不关闭, 我们就可以在Base上通过访问A的54345端口来连接Slave的22端口上.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在Base机器上</span><br><span class="line">ssh slave@server.site -p 54345</span><br></pre></td></tr></table></figure><h3 id="隧道的维持"><a href="#隧道的维持" class="headerlink" title="隧道的维持"></a>隧道的维持</h3><p>由于SSH存在超时关闭的可能, 而一旦链接关闭, 隧道便无法维持, 那么Base也就无法随心所欲的访问Slave了, 为此我们需要一种方案来提供一条稳定的SSH 反向隧道.</p><p>一个最简单的方法就是autossh，这个软件会在超时之后自动重新建立SSH 隧道.</p><ul><li>安装SSH<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># MacMini- MacOS</span><br><span class="line">brew install autossh</span><br></pre></td></tr></table></figure></li></ul><ul><li>配置autossh<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">autossh -M 5678 -fN -o &quot;PubkeyAuthentication=yes&quot; -o &quot;StrictHostKeyChecking=false&quot; -o &quot;PasswordAuthentication=no&quot; -o &quot;ServerAliveInterval 60&quot; -o &quot;Serv erAliveCountMax 3&quot; -R 54345:127.0.0.1:22 server@server.site -p 29245</span><br><span class="line"># “-M 5678” 选项指定中继服务器上的监视端口，用于交换监视 SSH 会话的测试数据。中继服务器上的其它程序不能使用这个端口。</span><br><span class="line"># “-o XXXX” 选项让 ssh：</span><br><span class="line">#        * 使用密钥验证，而不是密码验证。</span><br><span class="line">#        * 自动接受（未知）SSH 主机密钥。</span><br><span class="line">#        * 每 60 秒交换 keep-alive 消息。</span><br><span class="line">#        * 没有收到任何响应时最多发送 3 条 keep-alive 消息。</span><br></pre></td></tr></table></figure></li></ul><p>如此, 便可保证在不重启Slave的情况下的稳定SSH链接.</p><h3 id="端口转发到docker的服务"><a href="#端口转发到docker的服务" class="headerlink" title="端口转发到docker的服务"></a>端口转发到docker的服务</h3><p><a href="http://blog.onekyle.com/2018/07/14/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0redmine/#docker%E5%90%AF%E5%8A%A8redmine" target="_blank" rel="noopener">在上一篇文章中</a>我们在Slave机器上对docker的物理机3000端口与虚拟机的3000端口做的了映射, 所以外部用户可以通过3000端口直接访问docker的redmin服务.<br>此时, 只需要通过SSH隧道将Slave的3000端口转发到Server的某个端口上, 就可以了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -fN -R 3000:localhost:3000 server@server.site -p 29245</span><br></pre></td></tr></table></figure><p>如此, 我们便可以通过访问server.site:3000端口就可以直接访问到位于Slave的redmine服务.  </p><h2 id="基于Frp的内网穿透及端口转发"><a href="#基于Frp的内网穿透及端口转发" class="headerlink" title="基于Frp的内网穿透及端口转发"></a>基于Frp的内网穿透及端口转发</h2><p><span id="frp"></span></p><p><a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">frp</a> 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议.</p><p>frp可以利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务.<br>对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口.<br>也可以利用处于内网或防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司内网环境内的主机.</p><h3 id="安装frp"><a href="#安装frp" class="headerlink" title="安装frp"></a>安装frp</h3><p>Server(公网服务器)与Slave(内网服务器)都需要安装frp, 下载地址是<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Linux</span><br><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># MacOS</span><br><span class="line">curl -OL https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_darwin_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf frp_0.21.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure></p><h3 id="Server端配置"><a href="#Server端配置" class="headerlink" title="Server端配置"></a>Server端配置</h3><ol><li>基本配置  </li></ol><p>在Server端中下载好frp, 解压完成后就cdj进入, 然后编辑frps.ini文件, 添加如下代码.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">#与客户端绑定的进行通信的端口</span><br><span class="line">bind_port = 7000</span><br><span class="line">#http的访问端口</span><br><span class="line">vhost_http_port = 80</span><br><span class="line">#https的访问端口(如果需要的话)</span><br><span class="line">vhost_https_port = 8080</span><br></pre></td></tr></table></figure></p><p>然后我们只需要运行如下命令就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini &amp;!</span><br></pre></td></tr></table></figure></p><ol><li>开机自动运行&amp;自动重连  </li></ol><p>这里以通过systemd来初始化为例, 我们只需要编写一个service文件就可以(其他情况请参看<a href="https://github.com/fatedier/frp/issues/176" target="_blank" rel="noopener">https://github.com/fatedier/frp/issues/176</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 进入相关文件</span><br><span class="line">cd /etc/systemd/system/</span><br><span class="line"></span><br><span class="line">// 创建service文件</span><br><span class="line">touch frps.service</span><br></pre></td></tr></table></figure><p>然后将如下代码写入到frps.service中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frps daemon</span><br><span class="line">After=syslog.target  network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/home/ubuntu/frp/frps -c /home/ubuntu/frp/frps.ini &amp; #这里地址需要改成自己frp的地址</span><br><span class="line">Restart= always</span><br><span class="line">RestartSec=1min</span><br><span class="line">ExecStop=/usr/bin/killall frps</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>最后启用并启动服务:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable frps</span><br><span class="line">sudo systemctl start frps</span><br><span class="line"></span><br><span class="line">// 查看运行状态</span><br><span class="line">sudo systemctl status frps</span><br></pre></td></tr></table></figure><p>如果服务的状态是<code>active</code>就表示运行成功了.</p><h3 id="客户端-Slave-配置"><a href="#客户端-Slave-配置" class="headerlink" title="客户端(Slave)配置"></a>客户端(Slave)配置</h3><p>1.基本配置  </p><p>下载解压后进入目录, 编辑<code>frpc.ini</code>文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = server.site # 如: 123.206.87.36</span><br><span class="line">server_port = 7000 # 与Server端中frps.ini文件中设置的一样.</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 20022</span><br><span class="line"></span><br><span class="line">[jenkins]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 8080</span><br><span class="line">remote_port = 28080</span><br><span class="line"></span><br><span class="line">[redmine]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 3000</span><br><span class="line">remote_port = 23000</span><br></pre></td></tr></table></figure></p><p>2.后台执行  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c ./frpc.ini &amp;!</span><br></pre></td></tr></table></figure><p>在<code>frpc.ini</code>文件中分别配置了三对映射, 这时我们便可以通过访问映射好的ip地址来访问到Base(客户端)的服务.<br><a href="http://123.206.87.36:23000" target="_blank" rel="noopener">访问redmine</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/" target="_blank" rel="noopener">实战 SSH 端口转发</a> 深入浅出的介绍了SSH端口转发的原理.</p><p><a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">frp文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在上一篇文章中, 我介绍了&lt;a href=&quot;http://blog.onekyle.com/2018/07/14/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0redmine&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何通过docker搭建redmine项目管理平台&lt;/a&gt;, 然而此时 redmine仅仅只能在内网上才能访问到, 接下来这篇就介绍下如何通过内网穿透和端口转发来让我们随心所欲的访问到.&lt;/p&gt;
&lt;h1 id=&quot;设备&quot;&gt;&lt;a href=&quot;#设备&quot; class=&quot;headerlink&quot; title=&quot;设备&quot;&gt;&lt;/a&gt;设备&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;机器代号&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;机器描述&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;账户&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;地址&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;ssh/sshd 端口&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Server&lt;span id=&quot;Server&quot;&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;公网服务器&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;server&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;server.site&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;29245&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Base&lt;span id=&quot;Base&quot;&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;个人电脑(位于NAT之后)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;userb&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;127.0.0.1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Slave&lt;span id=&quot;Slave&quot;&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;垫显示器的MacMini(位于NAT之后)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;users&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;127.0.01&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h1&gt;&lt;p&gt;实现内网穿透及端口转发有很多手段途径, 下面我只介绍两种较简单和常用的.&lt;br&gt;一种是 基于 &lt;a href=&quot;#ssh&quot;&gt;SSH&lt;/a&gt; 的&lt;br&gt;另一种是 基于 &lt;a href=&quot;#frp&quot;&gt;Frp&lt;/a&gt; 的&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="开发环境" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>13个小技巧</title>
    <link href="http://yoursite.com/2017/09/18/%E5%AD%A6%E4%B9%A0%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2017/09/18/%E5%AD%A6%E4%B9%A0%E6%8A%80%E5%B7%A7/</id>
    <published>2017-09-18T01:39:56.000Z</published>
    <updated>2019-09-15T14:12:52.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="13个小技巧"><a href="#13个小技巧" class="headerlink" title="13个小技巧"></a>13个小技巧</h2><h3 id="1-Spaced-Repettion-间歇重复"><a href="#1-Spaced-Repettion-间歇重复" class="headerlink" title="1. Spaced Repettion 间歇重复"></a>1. Spaced Repettion 间歇重复</h3><p>为了最大化你的学习效率, 短时间学习, 并且重复练习.<br>有规律的学习计划、作息, 这样会更有效率.</p><h3 id="2-Find-Your-Own-Style"><a href="#2-Find-Your-Own-Style" class="headerlink" title="2. Find Your Own Style"></a>2. Find Your Own Style</h3><h3 id="3-Good-Night-Sleep"><a href="#3-Good-Night-Sleep" class="headerlink" title="3. Good Night Sleep"></a>3. Good Night Sleep</h3><p>睡觉与做梦是处理和存储新信息至关重要的部分.<br>一项哈佛大学的研究显示, 那些在记忆学习资料后睡了一晚好觉的学生, 比那些早上学习晚上测试的学生的效果要好35%.<br><a id="more"></a> </p><h3 id="4-Focus"><a href="#4-Focus" class="headerlink" title="4. Focus"></a>4. Focus</h3><ol><li>关掉自己的手机.</li><li>去图书馆一样安静的地方.</li></ol><h3 id="5-Pomodoro-Technique"><a href="#5-Pomodoro-Technique" class="headerlink" title="5. Pomodoro Technique"></a>5. Pomodoro Technique</h3><p><img src="http://ww1.sinaimg.cn/large/6b523ad1ly1fjni3phfpsj21pc0yi1ky.jpg" alt></p><h3 id="6-Hard-Stuff-First"><a href="#6-Hard-Stuff-First" class="headerlink" title="6. Hard Stuff First"></a>6. Hard Stuff First</h3><p>大多数人在早上有着最强的意志力, 一旦你完成了最难的事, 接下来一整天对都会感觉更好. 可能会因此得到更多的动力 激发自己去完成其他的事项.</p><h3 id="7-Exercise-Meditate-And-Converse"><a href="#7-Exercise-Meditate-And-Converse" class="headerlink" title="7. Exercise Meditate And Converse"></a>7. Exercise Meditate And Converse</h3><p>有一些活动被证实可以使你的大脑增长.<br><img src="http://ww1.sinaimg.cn/large/6b523ad1ly1fjni4czx7hj21pc0yi7wi.jpg" alt></p><h3 id="8-Go-Place"><a href="#8-Go-Place" class="headerlink" title="8. Go Place"></a>8. Go Place</h3><p>换个环境进行学习记忆 效果会好的多.<br><img src="http://ww1.sinaimg.cn/large/6b523ad1ly1fjni4cn69cj21pc0yix6q.jpg" alt></p><h3 id="9-Take-Fun-Seriously"><a href="#9-Take-Fun-Seriously" class="headerlink" title="9. Take Fun Seriously"></a>9. Take Fun Seriously</h3><p><img src="http://ww1.sinaimg.cn/large/6b523ad1ly1fjni4cdjnoj21pc0yikjm.jpg" alt></p><h3 id="10-Space-Your-Studies"><a href="#10-Space-Your-Studies" class="headerlink" title="10. Space Your Studies"></a>10. Space Your Studies</h3><p>利用记忆的特性(如艾宾浩斯遗忘曲线所描述的那样), 定期经常回顾学到的知识, 会得到更好的效果.<br><img src="http://ww1.sinaimg.cn/large/6b523ad1ly1fjni4bcq9cj21pc0yiu0x.jpg" alt></p><h3 id="11-30-Read-70-Recite"><a href="#11-30-Read-70-Recite" class="headerlink" title="11. 30% Read, 70% Recite"></a>11. 30% Read, 70% Recite</h3><p><img src="http://ww1.sinaimg.cn/large/6b523ad1ly1fjni4ciqmtj21pc0yib2a.jpg" alt></p><h3 id="12-Instant-Self-Test-即刻自我检讨"><a href="#12-Instant-Self-Test-即刻自我检讨" class="headerlink" title="12. Instant Self Test 即刻自我检讨"></a>12. Instant Self Test 即刻自我检讨</h3><p>因为大脑对于回想比记忆更难, 所以即时的强化可以有效的提高之后的记忆效果.<br><img src="http://ww1.sinaimg.cn/large/6b523ad1ly1fjni4cihvfj21pc0yix6p.jpg" alt></p><h3 id="13-Don’t-Forceit"><a href="#13-Don’t-Forceit" class="headerlink" title="13. Don’t Forceit"></a>13. Don’t Forceit</h3><p>不要强迫, 如果此时不想学习, 休息下, 去做其他事.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;13个小技巧&quot;&gt;&lt;a href=&quot;#13个小技巧&quot; class=&quot;headerlink&quot; title=&quot;13个小技巧&quot;&gt;&lt;/a&gt;13个小技巧&lt;/h2&gt;&lt;h3 id=&quot;1-Spaced-Repettion-间歇重复&quot;&gt;&lt;a href=&quot;#1-Spaced-Repettion-间歇重复&quot; class=&quot;headerlink&quot; title=&quot;1. Spaced Repettion 间歇重复&quot;&gt;&lt;/a&gt;1. Spaced Repettion 间歇重复&lt;/h3&gt;&lt;p&gt;为了最大化你的学习效率, 短时间学习, 并且重复练习.&lt;br&gt;有规律的学习计划、作息, 这样会更有效率.&lt;/p&gt;
&lt;h3 id=&quot;2-Find-Your-Own-Style&quot;&gt;&lt;a href=&quot;#2-Find-Your-Own-Style&quot; class=&quot;headerlink&quot; title=&quot;2. Find Your Own Style&quot;&gt;&lt;/a&gt;2. Find Your Own Style&lt;/h3&gt;&lt;h3 id=&quot;3-Good-Night-Sleep&quot;&gt;&lt;a href=&quot;#3-Good-Night-Sleep&quot; class=&quot;headerlink&quot; title=&quot;3. Good Night Sleep&quot;&gt;&lt;/a&gt;3. Good Night Sleep&lt;/h3&gt;&lt;p&gt;睡觉与做梦是处理和存储新信息至关重要的部分.&lt;br&gt;一项哈佛大学的研究显示, 那些在记忆学习资料后睡了一晚好觉的学生, 比那些早上学习晚上测试的学生的效果要好35%.&lt;br&gt;
    
    </summary>
    
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>利用宏定义实现枚举转字符串</title>
    <link href="http://yoursite.com/2017/08/30/%E5%88%A9%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E6%9E%9A%E4%B8%BE%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2017/08/30/%E5%88%A9%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E6%9E%9A%E4%B8%BE%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2017-08-30T02:37:00.000Z</published>
    <updated>2020-03-04T05:34:09.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们编码过程中,<code>枚举</code>会经常用到, 尤其是用来表示多种状态时.<br>然而, 在OC中, 对<code>枚举</code>进行打印调试 或者 拼接方法 的操作的编程体验是非常差的. </p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>以下这种情况你应该会经常遇到:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你工作时的几种状态</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, WorkStatus) &#123;</span><br><span class="line">    <span class="comment">/** 摸鱼*/</span></span><br><span class="line">    WorkStatusUnKnown,</span><br><span class="line">    <span class="comment">/** 认真工作*/</span></span><br><span class="line">    WorkStatusWorking,</span><br><span class="line">    <span class="comment">/** 休息*/</span></span><br><span class="line">    WorkStatusSleeping,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当我们想要打印这个枚举时, 默认输出的是这个枚举标识符所对应的值, 这样的效果是非常不理想的, 只输出数字,不直观(我们之所以使用枚举来定义状态, 不就是要直观的表示吗?), 为了达到<code>直观</code>这一目的, 写一个将枚举标识符转换成字符串的方法就势在必得了:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)WorkStatusDescription:(WorkStatus)status</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *desc = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="keyword">case</span> WorkStatusUnKnown:</span><br><span class="line">            desc = <span class="string">@"WorkStatusUnKnown"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WorkStatusWorking:</span><br><span class="line">            desc = <span class="string">@"WorkStatusWorking"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WorkStatusSleeping:</span><br><span class="line">            desc = <span class="string">@"WorkStatusSleeping"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            desc = <span class="string">@"NoOne"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a> <h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>这样操作, 也许解决了不直观的问题, 但是细看之下还是有两点很大的问题.  </p><ol><li>在某一个类的空间内声明定义转换方法, 对于作用域外(其他类)的地方使用非常不便.</li><li>当对枚举的标识符进行增删改操作时, 必须也要同时修改<code>转换方法</code>内的代码, 非常不灵活.</li></ol><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="优化问题1"><a href="#优化问题1" class="headerlink" title="优化问题1"></a>优化问题1</h3><p>针对于 <strong>问题 1</strong>, 我们可以通过在头文件中声明定义函数来解决:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * WorkStatusDescription(WorkStatus status) __attribute__((unused));</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * WorkStatusDescription(WorkStatus status) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *desc = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="keyword">case</span> WorkStatusUnKnown:</span><br><span class="line">            desc = <span class="string">@"WorkStatusUnKnown"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WorkStatusWorking:</span><br><span class="line">            desc = <span class="string">@"WorkStatusWorking"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WorkStatusSleeping:</span><br><span class="line">            desc = <span class="string">@"WorkStatusSleeping"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            desc = <span class="string">@"NoOne"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有两点需要解释:</p><ol><li>使用<code>static</code>可以防止发生函数重复声明定义的错误. (使用<code>NS_INLINE</code>也可以.)</li><li><code>__attribute__((unused))</code> 表示告诉编译器忽略<code>Unused Warning</code>.</li></ol><h3 id="优化问题2"><a href="#优化问题2" class="headerlink" title="优化问题2"></a>优化问题2</h3><p>解决 <strong>问题 2</strong> 的关键在于<strong>如何将一个枚举标识符灵活的转换成字符串</strong>. 根据这个思路, 很自然的就可以联想到 使用 宏定义中 <code>#</code> 可以将参数转换成字符串的特性来解决.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义枚举标识符和其对应的值的宏</span></span><br><span class="line"><span class="meta">#define ENUM_VALUE(name,assign) name assign,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将枚举标识符转换成字符串的宏</span></span><br><span class="line"><span class="meta">#define ENUM_CASE(name,assign) case name: return @#name;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串转换为枚举标识符的宏</span></span><br><span class="line"><span class="meta">#define ENUM_STRCMP(name,assign) if ([string isEqualToString:@#name]) return name;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 声明函数 及 定义枚举</span></span><br><span class="line"><span class="meta">#define DECLARE_ENUM(EnumType,ENUM_DEF) \</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, EnumType) &#123; \</span><br><span class="line">    ENUM_DEF(ENUM_VALUE) \</span><br><span class="line">&#125;; \</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *stringFrom<span class="meta">##EnumType(EnumType value) __attribute__((unused)); \</span></span><br><span class="line"><span class="keyword">static</span> EnumType EnumType<span class="meta">##FromString(NSString *string) __attribute__((unused)); \</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *stringFrom<span class="meta">##EnumType(EnumType value) &#123; \</span></span><br><span class="line">    <span class="keyword">switch</span>(value) &#123; \</span><br><span class="line">        ENUM_DEF(ENUM_CASE) \</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="string">@""</span>; \</span><br><span class="line">    &#125; \</span><br><span class="line">&#125; \</span><br><span class="line">\</span><br><span class="line"><span class="keyword">static</span> EnumType EnumType<span class="meta">##FromString(NSString *string) &#123; \</span></span><br><span class="line">    ENUM_DEF(ENUM_STRCMP) \</span><br><span class="line">    <span class="keyword">return</span> (EnumType)<span class="number">0</span>; \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>为了一气呵成, 已经将针对于 <code>问题 1</code> 优化合并到上面这个代码块中.</em></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入定义宏所在的头文件.</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"enum_generator.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用定义的宏声明枚举</span></span><br><span class="line"><span class="meta">#define WorkStatus(XX) \</span></span><br><span class="line">XX(WorkStatusUnKnown,) \</span><br><span class="line">XX(WorkStatusWorking,) \</span><br><span class="line">XX(WorkStatusSleeping,=<span class="number">50</span>)</span><br><span class="line"><span class="comment">// 生成定义的枚举 与 转换方法.</span></span><br><span class="line">DECLARE_ENUM(WorkStatus,WorkStatus)</span><br></pre></td></tr></table></figure><p>为了更直观的感受, 我们进入预编译阶段, 查看宏生成的代码(为了看起来清晰 已经进行手动换行):<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DECLARE_ENUM(WorkStatus,WorkStatus) 所生成的代码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> WorkStatus : <span class="built_in">NSUInteger</span> WorkStatus; <span class="keyword">enum</span> WorkStatus : <span class="built_in">NSUInteger</span> &#123;</span><br><span class="line">    WorkStatusUnKnown ,</span><br><span class="line">    WorkStatusWorking ,</span><br><span class="line">    WorkStatusSleeping =<span class="number">50</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *stringFromWorkStatu(WorkStatus value) __attribute__((unused));</span><br><span class="line"><span class="keyword">static</span> WorkStatus WorkStatusFromString(<span class="built_in">NSString</span> *string) __attribute__((unused));</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *stringFromWorkStatus(WorkStatus value) &#123;</span><br><span class="line">    <span class="keyword">switch</span>(value) &#123;</span><br><span class="line">        <span class="keyword">case</span> WorkStatusUnKnown:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"WorkStatusUnKnown"</span>;</span><br><span class="line">        <span class="keyword">case</span> WorkStatusWorking:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"WorkStatusWorking"</span>;</span><br><span class="line">        <span class="keyword">case</span> WorkStatusSleeping:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"WorkStatusSleeping"</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> WorkStatus WorkStatusFromString(<span class="built_in">NSString</span> *string) &#123;</span><br><span class="line">    <span class="keyword">if</span> ([string isEqualToString:<span class="string">@"WorkStatusUnKnown"</span>]) <span class="keyword">return</span> WorkStatusUnKnown;</span><br><span class="line">    <span class="keyword">if</span> ([string isEqualToString:<span class="string">@"WorkStatusWorking"</span>]) <span class="keyword">return</span> WorkStatusWorking;</span><br><span class="line">    <span class="keyword">if</span> ([string isEqualToString:<span class="string">@"WorkStatusSleeping"</span>]) <span class="keyword">return</span> WorkStatusSleeping;</span><br><span class="line">    <span class="keyword">return</span> (WorkStatus)<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">WorkStatus testWorkStatus = WorkStatusUnKnown;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"workstatus is: %@"</span>, stringFromWorkStatus(testWorkStatus));</span><br><span class="line"><span class="keyword">if</span> (testWorkStatus == WorkStatusFromString(<span class="string">@"WorkStatusUnKnown"</span>)) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"确认在摸鱼"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// workstatus is: WorkStatusUnKnown</span></span><br><span class="line"><span class="comment">// 确认在摸鱼</span></span><br></pre></td></tr></table></figure><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p>灵感来自 <a href="https://stackoverflow.com/questions/147267/easy-way-to-use-variables-of-enum-types-as-string-in-c/202511#202511" target="_blank" rel="noopener">https://stackoverflow.com/questions/147267/easy-way-to-use-variables-of-enum-types-as-string-in-c/202511#202511</a></p><p>Demo <a href="https://github.com/onekyle/EnumStringConvert/tree/master" target="_blank" rel="noopener">https://github.com/onekyle/EnumStringConvert/tree/master</a></p><p>如果你有更好的想法 请不吝赐教.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在我们编码过程中,&lt;code&gt;枚举&lt;/code&gt;会经常用到, 尤其是用来表示多种状态时.&lt;br&gt;然而, 在OC中, 对&lt;code&gt;枚举&lt;/code&gt;进行打印调试 或者 拼接方法 的操作的编程体验是非常差的. &lt;/p&gt;
&lt;h2 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h2&gt;&lt;p&gt;以下这种情况你应该会经常遇到:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 你工作时的几种状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NS_ENUM&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;, WorkStatus) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** 摸鱼*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WorkStatusUnKnown,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** 认真工作*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WorkStatusWorking,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** 休息*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WorkStatusSleeping,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当我们想要打印这个枚举时, 默认输出的是这个枚举标识符所对应的值, 这样的效果是非常不理想的, 只输出数字,不直观(我们之所以使用枚举来定义状态, 不就是要直观的表示吗?), 为了达到&lt;code&gt;直观&lt;/code&gt;这一目的, 写一个将枚举标识符转换成字符串的方法就势在必得了:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)WorkStatusDescription:(WorkStatus)status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *desc = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (status) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; WorkStatusUnKnown:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            desc = &lt;span class=&quot;string&quot;&gt;@&quot;WorkStatusUnKnown&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; WorkStatusWorking:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            desc = &lt;span class=&quot;string&quot;&gt;@&quot;WorkStatusWorking&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; WorkStatusSleeping:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            desc = &lt;span class=&quot;string&quot;&gt;@&quot;WorkStatusSleeping&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            desc = &lt;span class=&quot;string&quot;&gt;@&quot;NoOne&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; desc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift-step(二)</title>
    <link href="http://yoursite.com/2017/08/15/RxSwift-step-%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/08/15/RxSwift-step-%E4%BA%8C/</id>
    <published>2017-08-15T06:00:21.000Z</published>
    <updated>2019-09-15T14:14:05.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="12-理解重复订阅Observable的行为"><a href="#12-理解重复订阅Observable的行为" class="headerlink" title="12-理解重复订阅Observable的行为"></a>12-理解重复订阅Observable的行为</h2><h3 id="share-不要反复订阅同一个Observable"><a href="#share-不要反复订阅同一个Observable" class="headerlink" title="share() - 不要反复订阅同一个Observable"></a>share() - 不要反复订阅同一个Observable</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = <span class="type">Observable</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">_</span> = numbers.subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</span><br><span class="line"><span class="number">_</span> = numbers.subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</span><br></pre></td></tr></table></figure><p>假设，我们希望这两次订阅实际上使用的是同一个Observable，但执行一下就会在控制台看到，打印了两次1 2 3 4 5，也就是说每次订阅，都会产生一个新的<code>Observable</code>对象，多次订阅的默认行为，并不是共享同一个序列上的事件。</p><p>为了在多次订阅的时候共享事件，我们可以使用share operator，为了观察这个效果，我们把numbers的定义改成这样：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = <span class="type">Observable</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).share()</span><br></pre></td></tr></table></figure></p><a id="more"></a> <h3 id="scan-operator"><a href="#scan-operator" class="headerlink" title="scan operator"></a>scan operator</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">_</span> = selectedPhotos.scan([]) &#123;</span><br><span class="line">    (photos: [<span class="type">UIImage</span>], newPhoto: <span class="type">UIImage</span>) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">var</span> newPhotos = photos</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> index = newPhotos.index(<span class="keyword">where</span>: &#123; newPhoto == $<span class="number">0</span> &#125;) &#123;</span><br><span class="line">            newPhotos.remove(at: index)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            newPhotos.append(newPhoto)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newPhotos</span><br><span class="line">    &#125;.subscribe(onNext: &#123; (photos: [<span class="type">UIImage</span>]) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">self</span>.images.value = photos</span><br><span class="line">    &#125;, onDisposed: &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Finished choose photo memos."</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>上述的scan作用类似于集合类型中的<code>reduce</code>.</p><h2 id="13-更好的处理授权提示"><a href="#13-更好的处理授权提示" class="headerlink" title="13-更好的处理授权提示"></a>13-更好的处理授权提示</h2><p>iOS的用户授权动作是<strong>异步</strong>的.为了能在用户完成授权操作之后继续更新UI，我们得先把授权的结果封装成一个<code>Observable</code>。实际上，这个<code>Observable</code>只可能是下面三种情况：</p><ul><li>如果用户已授权，事件序列就是：<code>.next(true)</code>，<code>.completed()</code>；</li><li>如果用户未授权，序列的第一个事件就一定是<code>.next(false)</code>。然后，如果用户拒绝授权，序列中的事件就是：<code>.next(false)</code>和<code>.completed</code>。否则，就是<code>.next(true)</code>和<code>.completed</code>；</li></ul><h3 id="订阅用户的授权结果"><a href="#订阅用户的授权结果" class="headerlink" title="订阅用户的授权结果"></a>订阅用户的授权结果</h3><p>订阅的部分，应该写在<code>PhotoCollectionViewController.viewDidLoad</code>方法里。先别着急，这个过程要比我们想象的复杂一点，我们不能直接订阅<code>isAuthorized</code>的<code>onNext</code>并处理<code>true</code>/<code>false</code>的情况，因为单一的事件值并不能反映真实的授权情况。按照之前分析的：</p><ul><li>授权成功的序列可能是：<code>.next(true)</code>，<code>.completed</code>或<code>.next(false)</code>，<code>.next(true)</code>，<code>.completed</code>；</li><li>授权失败的序列则是：<code>.next(false)</code>，<code>.next(false)</code>，<code>.completed</code>；<br>因此，我们需要把<code>isAuthorized</code>这个事件序列处理一下，分别处理授权成功和失败的情况。</li></ul><h4 id="订阅成功事件"><a href="#订阅成功事件" class="headerlink" title="订阅成功事件"></a>订阅成功事件</h4><p>首先来订阅授权成功事件，我们只要<strong>忽略掉事件序列中所有的false，并读到第一个true</strong>，就可以认为授权成功了。使用“过滤型”<code>operator</code>可以轻松完成这个任务：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// PHPhotoLibrary.isAuthorized返回一个Observable&lt;Bool&gt;</span></span><br><span class="line">    <span class="keyword">let</span> isAuthorized = <span class="type">PHPhotoLibrary</span>.isAuthorized</span><br><span class="line"></span><br><span class="line">    isAuthorized</span><br><span class="line">        .skipWhile &#123; $<span class="number">0</span> == <span class="literal">false</span> &#125;</span><br><span class="line">        .take(<span class="number">1</span>)</span><br><span class="line">        .subscribe(onNext: &#123;</span><br><span class="line">            [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">            <span class="comment">// Reload the photo collection view</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .addDisposableTo(bag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到, 上面的代码中, 使用<code>skipWhile</code>忽略了所有<code>false</code>, 并且读取到了之后第一个<code>true</code>.</p><h4 id="订阅失败事件"><a href="#订阅失败事件" class="headerlink" title="订阅失败事件"></a>订阅失败事件</h4><p>接下来，我们处理拒绝授权的情况。这种情况相比成功简单一些，因为它对应的事件序列只有一种情况：<code>.next(false)</code>，<code>.next(false)</code>，<code>.completed</code>。因此，我们只要对事件序列中所有元素去重之后，订阅最后一个<code>.next</code>事件，如果是<code>false</code>，就可以确定是用户拒绝授权了。因此，在订阅成功授权的代码后面，继续添加下面的代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    isAuthorized</span><br><span class="line">        .distinctUntilChanged()</span><br><span class="line">        .takeLast(<span class="number">1</span>)</span><br><span class="line">        .<span class="built_in">filter</span>&#123; $<span class="number">0</span> == <span class="literal">false</span> &#125;</span><br><span class="line">        .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>?.flash(title: <span class="string">"Cannot access your photo library"</span>,message: <span class="string">"You can authorize access from the Settings."</span>,</span><br><span class="line">            callback: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span>?.navigationController?.popViewController(animated: <span class="literal">true</span>)</span><br><span class="line">            &#125;))</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        .addDisposableTo(bag)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="14-了解常用的transform-operators"><a href="#14-了解常用的transform-operators" class="headerlink" title="14-了解常用的transform operators"></a>14-了解常用的transform operators</h2><h3 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h3><p><code>toArray</code>，这可以说是最简单的<em>Transform operator</em>。它把<code>Observable&lt;T&gt;</code>中所有的事件值，在订阅的时候，打包成一个<code>Array&lt;T&gt;</code>返回给订阅者.<br><img src="https://image.boxueio.com/transform-ops-1@2x.png" alt="toArray"><br>有一点要注意的是，<code>toArray</code>的转换，是在订阅的时候，根据当前<code>Observable</code>中的值一次性完成转换的，后续的事件订阅则不会再进行转换:  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">numbers.asObservable()</span><br><span class="line">    .toArray()</span><br><span class="line">    .subscribe(onNext: &#123;</span><br><span class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</span><br><span class="line">    &#125;).addDisposableTo(bag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">numbers.onNext(<span class="number">1</span>)</span><br><span class="line">numbers.onNext(<span class="number">2</span>)</span><br><span class="line">numbers.onNext(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>对于这个例子来说，在订阅的时候，使用了<code>toArray</code>，但此时，<code>numbers</code>中没有任何值，<code>toArray</code>变换出来的，就是个空数组。即便之后<code>numbers</code>中发生了事件<code>123</code>，但是，我们订阅的，已经不是<code>numbers</code>，而是<code>numbers</code>在订阅的时候转换成的<code>Observable&lt;Array&lt;Int&gt;&gt;</code>，用序列图来表示是这样的：</p><p><img src="https://image.boxueio.com/transform-ops-2@2x.png" alt="toArray立即转换"><br>我们订阅的代码是图中红色的Observable，因此，也就不会打印任何内容了。</p><h3 id="scan"><a href="#scan" class="headerlink" title="scan"></a>scan</h3><p><img src="https://image.boxueio.com/transform-ops-3@2x.png" alt="scan"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Observable</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).scan(<span class="number">0</span>) &#123;</span><br><span class="line">        accumulatedValue, value <span class="keyword">in</span></span><br><span class="line">         accumulatedValue + value</span><br><span class="line">    &#125;.subscribe(onNext: &#123;</span><br><span class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</span><br><span class="line">    &#125;).addDisposableTo(bag)</span><br></pre></td></tr></table></figure><p>输出为 1、3、6.但是，就想上面图中展示的那样，和<code>toArray</code>不同的是，<code>scan</code>在<code>Observable</code>每次有事件的时候都会执行.</p><h3 id="转换事件类型的map"><a href="#转换事件类型的map" class="headerlink" title="转换事件类型的map"></a>转换事件类型的map</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Observable</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).<span class="built_in">map</span> &#123;</span><br><span class="line">    value <span class="keyword">in</span> value * <span class="number">2</span></span><br><span class="line">&#125;.subscribe(onNext: &#123;</span><br><span class="line">    <span class="built_in">print</span>($<span class="number">0</span>)</span><br><span class="line">&#125;).addDisposableTo(bag)</span><br></pre></td></tr></table></figure><h2 id="15-为什么RxSwift也需要flatMap"><a href="#15-为什么RxSwift也需要flatMap" class="headerlink" title="15-为什么RxSwift也需要flatMap"></a>15-为什么RxSwift也需要flatMap</h2><p><code>flatMap</code>在<code>集合</code>中使用到, 在<code>Optional</code>中也使用到, 到了<code>RxSwift</code>也用到它, 但是在这些不同的领域中, <code>flatMap</code>往往又表示了不同的含义. 在<code>RxSwift</code>中是这么定义<code>flatMap</code>的:  </p><blockquote><p>Transform the items emitted by an Observable into Observables, then flatten the emissions from those into a single Observable.</p></blockquote><p>翻译过来就是 将由<code>Observable</code> 发送来的<code>Item</code>转换成一个个<code>Observables</code>, 然后再展开, 将所有<code>Observables</code>的发射序列合并成一个<code>Observable</code>.</p><h3 id="把序列中的事件变成新的Observable"><a href="#把序列中的事件变成新的Observable" class="headerlink" title="把序列中的事件变成新的Observable"></a>把序列中的事件变成新的Observable</h3><p>来看下RxSwift官方demo中提供的例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> score: <span class="type">Variable</span>&lt;<span class="type">Int</span>&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> 👦🏻 = <span class="type">Player</span>(score: <span class="type">Variable</span>(<span class="number">80</span>))</span><br><span class="line">    <span class="keyword">let</span> 👧🏼 = <span class="type">Player</span>(score: <span class="type">Variable</span>(<span class="number">90</span>))</span><br></pre></td></tr></table></figure><p>然后创建一个<code>Variable</code>, 然后订阅它<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> player = <span class="type">Variable</span>(👦🏻)</span><br><span class="line"></span><br><span class="line">player.asObservable()</span><br><span class="line">    .flatMap &#123; $<span class="number">0</span>.score.asObservable() &#125; <span class="comment">// Change flatMap to flatMapLatest and observe change in printed output</span></span><br><span class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">👦🏻.score.value = <span class="number">85</span> <span class="comment">// 输出 80  85</span></span><br></pre></td></tr></table></figure></p><p>👦🏻是<code>Player</code>序列中发生的事件, 通过<code>flatMap</code>我们把它变成了一个<code>Observable&lt;Int&gt;</code>,  这就是<code>flatMap</code>定义的前半句话的含义: <strong>Transform the items emitted by an Observable into Observables</strong>.</p><p>### 合并所有<code>Observables</code>的发射序列</p><p>接下来, 我们把<code>👧🏼</code>加入, 注意下<code>👧🏼</code>添加的位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">player.value = 👦🏻 // 输出80</span><br><span class="line">👦🏻.score.value = 85 // 输出85</span><br><span class="line"></span><br><span class="line">player.value = 👧🏼 // 输出90</span><br><span class="line"></span><br><span class="line">👧🏼.value = 95 // 输出95</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;12-理解重复订阅Observable的行为&quot;&gt;&lt;a href=&quot;#12-理解重复订阅Observable的行为&quot; class=&quot;headerlink&quot; title=&quot;12-理解重复订阅Observable的行为&quot;&gt;&lt;/a&gt;12-理解重复订阅Observable的行为&lt;/h2&gt;&lt;h3 id=&quot;share-不要反复订阅同一个Observable&quot;&gt;&lt;a href=&quot;#share-不要反复订阅同一个Observable&quot; class=&quot;headerlink&quot; title=&quot;share() - 不要反复订阅同一个Observable&quot;&gt;&lt;/a&gt;share() - 不要反复订阅同一个Observable&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; numbers = &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; = numbers.subscribe(onNext: &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; = numbers.subscribe(onNext: &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假设，我们希望这两次订阅实际上使用的是同一个Observable，但执行一下就会在控制台看到，打印了两次1 2 3 4 5，也就是说每次订阅，都会产生一个新的&lt;code&gt;Observable&lt;/code&gt;对象，多次订阅的默认行为，并不是共享同一个序列上的事件。&lt;/p&gt;
&lt;p&gt;为了在多次订阅的时候共享事件，我们可以使用share operator，为了观察这个效果，我们把numbers的定义改成这样：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; numbers = &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;).share()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="RxSwift" scheme="http://yoursite.com/tags/RxSwift/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift-step by step 1-10</title>
    <link href="http://yoursite.com/2017/08/14/RxSwift-step/"/>
    <id>http://yoursite.com/2017/08/14/RxSwift-step/</id>
    <published>2017-08-13T17:36:55.000Z</published>
    <updated>2020-03-04T04:46:10.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这一系列笔记用于对<a href="http://link" target="_blank" rel="noopener">泊学网RxSwift-step by step</a>进行总结和摘选, 仅用于个人学习记忆.</p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="01-异步事件是以时间为索引的常量队列"><a href="#01-异步事件是以时间为索引的常量队列" class="headerlink" title="01-异步事件是以时间为索引的常量队列"></a>01-异步事件是以时间为索引的常量队列</h3><p>以时间为索引的常量队列的方式 这也是引入RxSwift的目的</p><h3 id="02-安装RxSwift的三种不同的方式"><a href="#02-安装RxSwift的三种不同的方式" class="headerlink" title="02-安装RxSwift的三种不同的方式"></a>02-安装RxSwift的三种不同的方式</h3><p>学习使用<code>playground</code>来编写文档</p><p>安装方式</p><p>1.mac环境下使用cocoapods安装</p><p>2.非mac环境下可以使用 <code>SPM</code> 安装</p><p> <en-media hash="41392bb7367aaee78580f41c29d70646" type="image/tiff"></en-media> </p><p>在编辑SPM自动生成的package.swift文件, 修改 </p><p>然后退出编辑 执行swift build (会自动下载RxSwift 然后 自动执行build)<br><a id="more"></a><br>3.手动添加</p><p> <en-media hash="66867f89faa8141e2b9a582d4681c171" type="image/tiff"></en-media> </p><p>将RxSwift(只是一个project)下载到当前目录下(这个指令值得深究)</p><h3 id="03-RxSwift中的那些”术语”到底在说什么"><a href="#03-RxSwift中的那些”术语”到底在说什么" class="headerlink" title="03-RxSwift中的那些”术语”到底在说什么?"></a>03-RxSwift中的那些”术语”到底在说什么?</h3><p>我们创建的<code>Observable</code>, 表达的是异步操作, <code>Observable</code>中的每一个元素, 都可以理解为一个异步发生的事件.因此,当我们对<code>Observable</code>调用map和filter方法时,只表示我们要对事件序列中的元素进行处理的逻辑,而并不会立即对<code>Observable</code>中的元素进行处理.</p><p>operator对<code>Observable</code>的加工是在订阅的时候发生的.这种只有在订阅的时候才emit事件的<code>Observable</code>,有一个专有的名字,叫做<code>Cold Observable</code>.</p><p>言外之意,就是也有一种<code>Observable</code>是只要创建了就会自动emit事件的,它们叫做<code>Hot Observable</code>.在后面的内容中,我们会看到这类事件队列的用法.</p><p>对于有限观察序列, 执行到头时 资源就自动释放,  但是有时有些观察序列并非有限 如 timer序列. 所以就需要我们对其进行手动释放,</p><p> <en-media hash="3f3fc5320db72321684d720d8cc64c59" type="image/tiff"></en-media> </p><p>当然, RxSwfit也提供另一种方式, DisposeBag实例.</p><p> <en-media hash="c05e45aff19610e87f62155033e87873" type="image/tiff"></en-media> </p><p>调用disposed(by: ) 将<code>Observable</code>与 一个 DisposeBag绑定起来. 然后当这个bag实例销毁时, 所有其绑定的订阅者都将取消订阅 并 回收资源.</p><h3 id="04-理解create和debug-operator"><a href="#04-理解create和debug-operator" class="headerlink" title="04 理解create和debug operator"></a>04 理解create和debug operator</h3><p>理解 create函数中的subcribe参数的意义: 并非订阅, 而是 描述如何向订阅者发送订阅的消息</p><p> <en-media hash="a7da02fab03eeafb50fed5d55651aab9" type="image/tiff"></en-media> </p><p>订阅</p><p> <en-media hash="8c9e4f4e58905caac40f5ab12ef7c361" type="image/tiff"></en-media> </p><p>操作 do 旁路特性</p><p>debug(). 为<code>Observable</code>执行debug()操作, 会将所以订阅到的消息打印出来,</p><h3 id="05-四种Subject的基本用法"><a href="#05-四种Subject的基本用法" class="headerlink" title="05 四种Subject的基本用法"></a>05 四种Subject的基本用法</h3><p>上节末尾,我们提到了Subject.既然它可以同时作为<code>Observable</code> 和 <code>Observer</code>,我们就直奔主题,从一个叫做<code>PublishSubject</code>的对象开始,感受下<code>Subject</code>的用法:</p><h4 id="PublishSubject"><a href="#PublishSubject" class="headerlink" title="PublishSubject"></a>PublishSubject</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line"></span><br><span class="line">subject.onNext(<span class="string">"Episode1 updated"</span>)</span><br><span class="line"><span class="comment">// 第三,当我们把subject当作Observable的时候,订阅它的代码和订阅普通的Observable完全一样：</span></span><br><span class="line"><span class="keyword">let</span> sub1 = subject.subscribe(onNext: &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Sub1 - what happened: \($0)"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="BehaviorSubject"><a href="#BehaviorSubject" class="headerlink" title="BehaviorSubject"></a>BehaviorSubject</h4><p>如果你希望Subject从<code>会员制</code>变成<code>试用制</code>,就需要使用<code>BehaviorSubject</code>.</p><p><img src="https://image.boxueio.com/subject-basic-2@2x.png" alt="BehaviorSubject"></p><h4 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h4><p><code>ReplaySubject</code>的行为和<code>BehaviorSubject</code>类似,都会给订阅者发送历史消息.不同地方有两点：</p><ul><li><code>ReplaySubject</code>没有默认消息,订阅空的<code>ReplaySubject</code>不会收到任何消息；</li><li><code>ReplaySubject</code>自带一个缓冲区,当有订阅者订阅的时候,它会向订阅者发送缓冲区内的所有消息；</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReplaySubject缓冲区的大小,是在创建的时候确定的：</span></span><br><span class="line"><span class="keyword">let</span> subject = <span class="type">ReplaySubject</span>&lt;<span class="type">String</span>&gt;.create(bufferSize: <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h4><p>除了事件序列之外,在平时的编程中我们还经常需遇到一类场景,就是需要某个值是有”响应式”特性的.为了方便这个操作,RxSwift还提供了一个特殊的<code>subject</code>,叫做<code>Variable</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们可以像定义一个普通变量一样定义一个Variable：</span></span><br><span class="line"><span class="keyword">let</span> stringVariable = <span class="type">Variable</span>(<span class="string">"Episode1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们要订阅一个Variable对象的时候,要先明确使用asObservable()方法.而不像其他subject一样直接订阅：</span></span><br><span class="line"><span class="keyword">let</span> stringVariable = <span class="type">Variable</span>(<span class="string">"Episode1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sub1 = stringVariable</span><br><span class="line">    .asObservable()</span><br><span class="line">    .subscribe &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"sub1: \($0)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 而当我们要给一个Variable设置新值的时候,要明确访问它的value属性,而不是使用onNext方法：</span></span><br><span class="line">stringVariable.value = <span class="string">"Episode2"</span></span><br></pre></td></tr></table></figure><p>最后要说明的一点是,<code>Variable</code>只用来表达一个”响应式”值的语义,因此,它有以下两点性质：</p><ul><li>绝不会发生<code>.error</code>事件；</li><li>无需手动给它发送<code>.complete</code>事件表示完成；</li></ul><h3 id="07-TodoDemo2"><a href="#07-TodoDemo2" class="headerlink" title="07 TodoDemo2"></a>07 TodoDemo2</h3><h4 id="资源被正常回收了么？"><a href="#资源被正常回收了么？" class="headerlink" title="资源被正常回收了么？"></a>资源被正常回收了么？</h4><p>此时,尽管已经可以正常添加Todo了,但是如果你足够细心就可以发现,控制台并没有打印Finsih adding a new todo.的提示.也就是说,在dismiss了TodoDetailViewController之后,todoSubject并没有释放,我们应该在某些地方导致了资源泄漏.</p><p>为了进一步确认这个问题,在Podfile中添加下面的内容：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">post_install <span class="keyword">do</span> |installer|</span><br><span class="line">  installer.pods_project.targets.each <span class="keyword">do</span> |target|</span><br><span class="line">    <span class="keyword">if</span> target.name == '<span class="type">RxSwift'</span></span><br><span class="line">      target.build_configurations.each <span class="keyword">do</span> |config|</span><br><span class="line">        <span class="keyword">if</span> config.name == '<span class="type">Debug'</span></span><br><span class="line">          config.build_settings['<span class="type">OTHER_SWIFT_FLAGS'</span>] ||= ['-<span class="type">D'</span>, '<span class="type">TRACE_RESOURCES'</span>]</span><br><span class="line">        end</span><br><span class="line">      end</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>简单来说,就是找到项目中的<code>RxSwift target</code>,在它的<code>Debug</code>配置中,添加<code>-D TRACE_RESOURCES</code>编译参数,并在<code>Termianl</code>中重新执行<code>pod install</code>更新下<code>RxSwift</code>.然后,在<code>TodoDetailViewController</code>的<code>viewWillAppear</code>方法中,添加下面的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewWillAppear(animated)</span><br><span class="line">    todoName.becomeFirstResponder()</span><br><span class="line"></span><br><span class="line">    todoItem = <span class="type">TodoItem</span>()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Resource tracing: \(RxSwift.Resources.total)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但事情至此还没结束,可能你会觉得这样写代码感觉怪怪的,甚至有些危险.因为我们要依赖一个Controller（TodoDetailViewController）中的某个属性<code>（bag）</code>才能得以工作正常.而常规的开发经验通常告诉我们,如此密切的耦合关系通常是各种问题滋生的温床.这至多,只能算一个”非主流”的办法.</p><p>那么,更”主流”的办法是什么呢？</p><p>希望你还记得,对于一个<code>Observable</code>来说,除了所有订阅者都取消订阅会导致其被回收之外,<code>Observable</code>自然结束<code>（onCompleted）</code>或发生错误结束<code>（onError）</code>也会自动让所有订阅者取消订阅,并导致<code>Observable</code>占用的资源被回收.</p><p>因此,当<code>TodoDetailViewController dismiss</code>之后,实际上我们也不会再使用它添加新的<code>Todo</code>了,这时,我们应该给<code>todoSubject</code>发送<code>onCompeleted</code>事件,明确告知<code>RxSwift</code>,这个事件序列结束了.</p><h3 id="08-ToDoDemo3"><a href="#08-ToDoDemo3" class="headerlink" title="08 ToDoDemo3"></a>08 ToDoDemo3</h3><p>可以看到,是否同步成功是通过调用<code>completionHandler</code>通知的,仿照之前的思路,我们可以让<code>syncTodoToCloud</code>返回一个<code>Observable&lt;URL&gt;</code>,其中的<code>URL</code>是<code>iCloud</code>保存在本地的路径：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">syncTodoToCloud</span><span class="params">()</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">URL</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">Observable</span>.create(&#123; observer <span class="keyword">in</span></span><br><span class="line">        plist.save(to: cloudUrl, <span class="keyword">for</span>: .forOverwriting,</span><br><span class="line">            completionHandler: &#123; (success: <span class="type">Bool</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> success &#123;</span><br><span class="line">                observer.onNext(cloudUrl)</span><br><span class="line">                observer.onCompleted()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                observer.onError(<span class="type">SaveTodoError</span>.cannotCreateFileOnCloud)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="type">Disposables</span>.create()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要特别强调的是：<code>onCompleted</code>对于自定义<code>Observable</code>非常重要,通常我们要在<code>onNext</code>之后,自动跟一个<code>onCompleted</code>,以确保<code>Observable</code>资源可以正确回收.</p><h3 id="09-常用的忽略事件操作符"><a href="#09-常用的忽略事件操作符" class="headerlink" title="09 常用的忽略事件操作符"></a>09 常用的忽略事件操作符</h3><p>事例代码<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">example(<span class="string">"ignoreElements"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> tasks = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line">    <span class="keyword">let</span> bag = <span class="type">DisposeBag</span>()</span><br><span class="line"></span><br><span class="line">    tasks.subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</span><br><span class="line">        .addDisposableTo(bag)</span><br><span class="line"></span><br><span class="line">    tasks.onNext(<span class="string">"T1"</span>);</span><br><span class="line">    tasks.onNext(<span class="string">"T2"</span>);</span><br><span class="line">    tasks.onNext(<span class="string">"T3"</span>);</span><br><span class="line">    tasks.onCompleted();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">正常输出:</span></span><br><span class="line"><span class="comment">next(T1)</span></span><br><span class="line"><span class="comment">next(T2)</span></span><br><span class="line"><span class="comment">next(T3)</span></span><br><span class="line"><span class="comment">completed </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h4 id="Ignore-elementss"><a href="#Ignore-elementss" class="headerlink" title="Ignore elementss"></a>Ignore elementss</h4><p><code>ignoreElements</code> 会忽略序列中所有的<code>.next</code>事件.</p><p>将事例代码中的订阅部分替换成以下:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tasks.ignoreElements()</span><br><span class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</span><br><span class="line">    .addDisposableTo(bag)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出:</span></span><br><span class="line"><span class="comment">completed</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>用序列图描述, 就是这样的:<br><img src="https://image.boxueio.com/ignoring-ops-4@2x.png" alt="IgnoreElements"></p><h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><p>skip可以用来忽略事件序列中特定个数的<code>.next</code>.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tasks.skip(<span class="number">2</span>)</span><br><span class="line">    .subscribe &#123;</span><br><span class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .addDisposableTo(bag)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出:</span></span><br><span class="line"><span class="comment">next(T3)</span></span><br><span class="line"><span class="comment">completed</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>用序列图描述, 就是这样的:<br><img src="https://image.boxueio.com/ignoring-ops-4@2x.png" alt="Skip"></p><h4 id="skipWhile-skipUntil"><a href="#skipWhile-skipUntil" class="headerlink" title="skipWhile / skipUntil"></a>skipWhile / skipUntil</h4><h5 id="skipWhile"><a href="#skipWhile" class="headerlink" title="skipWhile"></a>skipWhile</h5><p>除了可以忽略指定个数的事件外,我们还可以通过一个<code>closure</code>自定义忽略的条件,这个<code>operator</code>叫做<code>skipWhile</code>.但它和我们想象中有些不同的是,<strong>它不会”遍历”事件序列上的所有事件,而是当遇到第一个不满足条件的事件之后,就<code>不再忽略</code>任何事件了</strong>.</p><p>使用如下代码替换订阅部分代码:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tasks.skipWhile &#123;</span><br><span class="line">    $<span class="number">0</span> != <span class="string">"T2"</span></span><br><span class="line">&#125;</span><br><span class="line">.subscribe &#123;</span><br><span class="line">    <span class="built_in">print</span>($<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">.addDisposableTo(bag)</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">next(T2) // 注意还是会订阅到T2的事件</span><br><span class="line">next(T3)</span><br><span class="line">completed</span><br></pre></td></tr></table></figure></p><p><img src="https://image.boxueio.com/ignoring-ops-8@2x.png" alt="skipwhile"></p><h5 id="skipUntil"><a href="#skipUntil" class="headerlink" title="skipUntil"></a>skipUntil</h5><p>另外一个和<code>skipWhile</code>类似的<code>operator</code>是<code>skipUntil</code>,它不用一个<code>closure</code>指定忽略的条件,而是使用另外一个事件序列中的事件.例如,我们先把代码改成这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tasks = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> bossIsAngry = <span class="type">PublishSubject</span>&lt;<span class="type">Void</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> bag = <span class="type">DisposeBag</span>()</span><br><span class="line"></span><br><span class="line">tasks.skipUntil(bossIsAngry)</span><br><span class="line">    .subscribe &#123;</span><br><span class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .addDisposableTo(bag)</span><br><span class="line"></span><br><span class="line">tasks.onNext(<span class="string">"T1"</span>);</span><br><span class="line">tasks.onNext(<span class="string">"T2"</span>);</span><br><span class="line">tasks.onNext(<span class="string">"T3"</span>);</span><br><span class="line">tasks.onCompleted();</span><br></pre></td></tr></table></figure><p>执行一下就会看到,我们不会订阅到任何事件.这就是<code>skipUntil</code>的效果,它会一直忽略<code>tasks</code>中的事件,直到<code>bossIsAngry</code>中发生事件为止.</p><p>在T2与T3中插入如下代码<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tasks.onNext(<span class="string">"T1"</span>);</span><br><span class="line">tasks.onNext(<span class="string">"T2"</span>);</span><br><span class="line">bossIsAngry.onNext();</span><br><span class="line">tasks.onNext(<span class="string">"T3"</span>);</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">next(<span class="type">T3</span>)</span><br><span class="line">completed</span><br></pre></td></tr></table></figure></p><p>用序列图描述出来, 就是这样的:<br><img src="https://image.boxueio.com/ignoring-ops-9@2x.png" alt="skipUntil"></p><h4 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged"></a>distinctUntilChanged</h4><p><code>distinctUntilChanged</code>可以用来忽略序列中<strong>连续</strong> <strong>重复</strong> 的事件. 例如:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">example(<span class="string">"ignoreElements"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> tasks = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line">    <span class="keyword">let</span> bag = <span class="type">DisposeBag</span>()</span><br><span class="line"></span><br><span class="line">    tasks.distinctUntilChanged()</span><br><span class="line">        .subscribe &#123;</span><br><span class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .addDisposableTo(bag)</span><br><span class="line"></span><br><span class="line">    tasks.onNext(<span class="string">"T1"</span>)</span><br><span class="line">    tasks.onNext(<span class="string">"T2"</span>)</span><br><span class="line">    tasks.onNext(<span class="string">"T2"</span>)</span><br><span class="line">    tasks.onNext(<span class="string">"T3"</span>)</span><br><span class="line">    tasks.onNext(<span class="string">"T3"</span>)</span><br><span class="line">    tasks.onNext(<span class="string">"T4"</span>)</span><br><span class="line">    tasks.onCompleted()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于T2和T3都存在连续重复的事件, 因此我们只能订阅到下面这样的结果<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">next(<span class="type">T1</span>)</span><br><span class="line">next(<span class="type">T2</span>)</span><br><span class="line">next(<span class="type">T3</span>)</span><br><span class="line">next(<span class="type">T4</span>)</span><br><span class="line">completed</span><br></pre></td></tr></table></figure></p><p>它的序列图是这样的:<br><img src="https://image.boxueio.com/ignoring-ops-12@2x.png" alt="distinctUntilChangesd"><br>但是,如果把T2放到两个T3中间,此时就没有任何连续重复的事件了,我们就会订阅到所有任务.</p><h3 id="10-常用的获取事件操作符"><a href="#10-常用的获取事件操作符" class="headerlink" title="10 常用的获取事件操作符"></a>10 常用的获取事件操作符</h3><h4 id="elementAt"><a href="#elementAt" class="headerlink" title="elementAt"></a>elementAt</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tasks.elementAt(<span class="number">1</span>)</span><br><span class="line">    .subscribe &#123;</span><br><span class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .addDisposableTo(bag)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">next(T2)</span></span><br><span class="line"><span class="comment">completed</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tasks.<span class="built_in">filter</span> &#123; $<span class="number">0</span> == <span class="string">"T2"</span> &#125;</span><br><span class="line">    .subscribe &#123;</span><br><span class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .addDisposableTo(bag)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">输出:</span></span><br><span class="line"><span class="comment">next(T2)</span></span><br><span class="line"><span class="comment">completed</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="take"><a href="#take" class="headerlink" title="take"></a>take</h4><p>除了选择订阅单一事件之外,我们也可以选择一次性订阅多个事件,例如,选择序列中的前两个事件：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tasks.take(<span class="number">2</span>)</span><br><span class="line">    .subscribe &#123;</span><br><span class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .addDisposableTo(bag)</span><br></pre></td></tr></table></figure><h4 id="takeWhile-takeWhileWithIndex"><a href="#takeWhile-takeWhileWithIndex" class="headerlink" title="takeWhile/takeWhileWithIndex"></a>takeWhile/takeWhileWithIndex</h4><p>我们也可以用一个closure来指定”只要条件为true就一直订阅下去”这样的概念.例如,只要任务不是T3就一直订阅下去:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tasks.takeWhile &#123;</span><br><span class="line">        $<span class="number">0</span> != <span class="string">"T3"</span></span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe &#123;</span><br><span class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .addDisposableTo(bag)</span><br></pre></td></tr></table></figure><p>控制台输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">next(T1)</span><br><span class="line">next(T2)</span><br><span class="line">completed</span><br></pre></td></tr></table></figure></p><p><code>takeWhileWithIndex</code>的<code>closure</code>有两个参数，第一个是事件的值，第二个是事件在序列中的索引。它的语义和<code>takeWhile</code>是完全一样的，需要注意的仍旧是，在<code>closure</code>里写的，是读取事件的条件，而不是终止读取的条件.</p><h4 id="takeUntil"><a href="#takeUntil" class="headerlink" title="takeUntil"></a>takeUntil</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">example(<span class="string">"ignoreElements"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> tasks = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line">    <span class="keyword">let</span> bossHasGone = <span class="type">PublishSubject</span>&lt;<span class="type">Void</span>&gt;()</span><br><span class="line">    <span class="keyword">let</span> bag = <span class="type">DisposeBag</span>()</span><br><span class="line"></span><br><span class="line">    tasks.subscribe.takeUntil(bossHasGone) &#123;</span><br><span class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .addDisposableTo(bag)</span><br><span class="line"></span><br><span class="line">    tasks.onNext(<span class="string">"T1"</span>)</span><br><span class="line">    tasks.onNext(<span class="string">"T2"</span>)</span><br><span class="line">    tasks.onNext(<span class="string">"T3"</span>)</span><br><span class="line">    tasks.onCompleted()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.onNext(<span class="string">"T1"</span>)</span><br><span class="line">tasks.onNext(<span class="string">"T2"</span>)</span><br><span class="line"></span><br><span class="line">bossHasGone.onNext()</span><br><span class="line"></span><br><span class="line">tasks.onNext(<span class="string">"T3"</span>)</span><br><span class="line">tasks.onCompleted()</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">next(T1)</span><br><span class="line">next(T2)</span><br><span class="line">completed</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;这一系列笔记用于对&lt;a href=&quot;http://link&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;泊学网RxSwift-step by step&lt;/a&gt;进行总结和摘选, 仅用于个人学习记忆.&lt;/p&gt;
&lt;h2 id=&quot;笔记&quot;&gt;&lt;a href=&quot;#笔记&quot; class=&quot;headerlink&quot; title=&quot;笔记&quot;&gt;&lt;/a&gt;笔记&lt;/h2&gt;&lt;h3 id=&quot;01-异步事件是以时间为索引的常量队列&quot;&gt;&lt;a href=&quot;#01-异步事件是以时间为索引的常量队列&quot; class=&quot;headerlink&quot; title=&quot;01-异步事件是以时间为索引的常量队列&quot;&gt;&lt;/a&gt;01-异步事件是以时间为索引的常量队列&lt;/h3&gt;&lt;p&gt;以时间为索引的常量队列的方式 这也是引入RxSwift的目的&lt;/p&gt;
&lt;h3 id=&quot;02-安装RxSwift的三种不同的方式&quot;&gt;&lt;a href=&quot;#02-安装RxSwift的三种不同的方式&quot; class=&quot;headerlink&quot; title=&quot;02-安装RxSwift的三种不同的方式&quot;&gt;&lt;/a&gt;02-安装RxSwift的三种不同的方式&lt;/h3&gt;&lt;p&gt;学习使用&lt;code&gt;playground&lt;/code&gt;来编写文档&lt;/p&gt;
&lt;p&gt;安装方式&lt;/p&gt;
&lt;p&gt;1.mac环境下使用cocoapods安装&lt;/p&gt;
&lt;p&gt;2.非mac环境下可以使用 &lt;code&gt;SPM&lt;/code&gt; 安装&lt;/p&gt;
&lt;p&gt; &lt;en-media hash=&quot;41392bb7367aaee78580f41c29d70646&quot; type=&quot;image/tiff&quot;&gt;&lt;/en-media&gt; &lt;/p&gt;
&lt;p&gt;在编辑SPM自动生成的package.swift文件, 修改 &lt;/p&gt;
&lt;p&gt;然后退出编辑 执行swift build (会自动下载RxSwift 然后 自动执行build)&lt;br&gt;
    
    </summary>
    
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="RxSwift" scheme="http://yoursite.com/tags/RxSwift/"/>
    
  </entry>
  
</feed>
